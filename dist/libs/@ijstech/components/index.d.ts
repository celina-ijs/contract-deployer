/// <amd-module name="@ijstech/types/jsonSchema.ts" />
declare module "@ijstech/types/jsonSchema.ts" {
    export type IJSONSchema4TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null' | 'any';
    export type IJSONSchema4Type = string | number | boolean | IJSONSchema4Object | IJSONSchema4Array | null;
    export interface IJSONSchema4Object {
        [key: string]: IJSONSchema4Type;
    }
    export interface IJSONSchema4Array extends Array<IJSONSchema4Type> {
    }
    export type IJSONSchema4Version = string;
    export interface IJSONSchema4 {
        id?: string | undefined;
        $ref?: string | undefined;
        $schema?: IJSONSchema4Version | undefined;
        title?: string | undefined;
        description?: string | undefined;
        tooltip?: string | undefined;
        default?: IJSONSchema4Type | undefined;
        multipleOf?: number | undefined;
        maximum?: number | undefined;
        exclusiveMaximum?: boolean | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: boolean | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        pattern?: string | undefined;
        additionalItems?: boolean | IJSONSchema4 | undefined;
        items?: IJSONSchema4 | IJSONSchema4[] | undefined;
        maxItems?: number | undefined;
        minItems?: number | undefined;
        uniqueItems?: boolean | undefined;
        maxProperties?: number | undefined;
        minProperties?: number | undefined;
        required?: boolean | string[] | undefined;
        additionalProperties?: boolean | IJSONSchema4 | undefined;
        definitions?: {
            [k: string]: IJSONSchema4;
        } | undefined;
        properties?: {
            [k: string]: IJSONSchema4;
        } | undefined;
        patternProperties?: {
            [k: string]: IJSONSchema4;
        } | undefined;
        dependencies?: {
            [k: string]: IJSONSchema4 | string[];
        } | undefined;
        enum?: IJSONSchema4Type[] | undefined;
        type?: IJSONSchema4TypeName | IJSONSchema4TypeName[] | undefined;
        allOf?: IJSONSchema4[] | undefined;
        anyOf?: IJSONSchema4[] | undefined;
        oneOf?: IJSONSchema4[] | undefined;
        not?: IJSONSchema4 | undefined;
        extends?: string | string[] | undefined;
        [k: string]: any;
        format?: string | undefined;
    }
    export type IJSONSchema6TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null' | 'any';
    export type IJSONSchema6Type = string | number | boolean | IJSONSchema6Object | IJSONSchema6Array | null;
    export interface IJSONSchema6Object {
        [key: string]: IJSONSchema6Type;
    }
    export interface IJSONSchema6Array extends Array<IJSONSchema6Type> {
    }
    export type IJSONSchema6Version = string;
    export type IJSONSchema6Definition = IJSONSchema6 | boolean;
    export interface IJSONSchema6 {
        $id?: string | undefined;
        $ref?: string | undefined;
        $schema?: IJSONSchema6Version | undefined;
        multipleOf?: number | undefined;
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        pattern?: string | undefined;
        items?: IJSONSchema6Definition | IJSONSchema6Definition[] | undefined;
        additionalItems?: IJSONSchema6Definition | undefined;
        maxItems?: number | undefined;
        minItems?: number | undefined;
        uniqueItems?: boolean | undefined;
        contains?: IJSONSchema6Definition | undefined;
        maxProperties?: number | undefined;
        minProperties?: number | undefined;
        required?: string[] | undefined;
        properties?: {
            [k: string]: IJSONSchema6Definition;
        } | undefined;
        patternProperties?: {
            [k: string]: IJSONSchema6Definition;
        } | undefined;
        additionalProperties?: IJSONSchema6Definition | undefined;
        dependencies?: {
            [k: string]: IJSONSchema6Definition | string[];
        } | undefined;
        propertyNames?: IJSONSchema6Definition | undefined;
        enum?: IJSONSchema6Type[] | undefined;
        const?: IJSONSchema6Type | undefined;
        type?: IJSONSchema6TypeName | IJSONSchema6TypeName[] | undefined;
        allOf?: IJSONSchema6Definition[] | undefined;
        anyOf?: IJSONSchema6Definition[] | undefined;
        oneOf?: IJSONSchema6Definition[] | undefined;
        not?: IJSONSchema6Definition | undefined;
        definitions?: {
            [k: string]: IJSONSchema6Definition;
        } | undefined;
        title?: string | undefined;
        description?: string | undefined;
        tooltip?: string | undefined;
        default?: IJSONSchema6Type | undefined;
        examples?: IJSONSchema6Type[] | undefined;
        format?: string | undefined;
    }
    export type IJSONSchema7TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null';
    export type IJSONSchema7Type = string | number | boolean | IJSONSchema7Object | IJSONSchema7Array | null;
    export interface IJSONSchema7Object {
        [key: string]: IJSONSchema7Type;
    }
    export interface IJSONSchema7Array extends Array<IJSONSchema7Type> {
    }
    export type IJSONSchema7Version = string;
    export type IJSONSchema7Definition = IJSONSchema7 | boolean;
    export interface IJSONSchema7 {
        $id?: string | undefined;
        $ref?: string | undefined;
        $schema?: IJSONSchema7Version | undefined;
        $comment?: string | undefined;
        $defs?: {
            [key: string]: IJSONSchema7Definition;
        } | undefined;
        type?: IJSONSchema7TypeName | IJSONSchema7TypeName[] | undefined;
        enum?: IJSONSchema7Type[] | undefined;
        const?: IJSONSchema7Type | undefined;
        multipleOf?: number | undefined;
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        pattern?: string | undefined;
        items?: IJSONSchema7Definition | IJSONSchema7Definition[] | undefined;
        additionalItems?: IJSONSchema7Definition | undefined;
        maxItems?: number | undefined;
        minItems?: number | undefined;
        uniqueItems?: boolean | undefined;
        contains?: IJSONSchema7 | undefined;
        maxProperties?: number | undefined;
        minProperties?: number | undefined;
        required?: string[] | undefined;
        properties?: {
            [key: string]: IJSONSchema7Definition;
        } | undefined;
        patternProperties?: {
            [key: string]: IJSONSchema7Definition;
        } | undefined;
        additionalProperties?: IJSONSchema7Definition | undefined;
        dependencies?: {
            [key: string]: IJSONSchema7Definition | string[];
        } | undefined;
        propertyNames?: IJSONSchema7Definition | undefined;
        if?: IJSONSchema7Definition | undefined;
        then?: IJSONSchema7Definition | undefined;
        else?: IJSONSchema7Definition | undefined;
        allOf?: IJSONSchema7Definition[] | undefined;
        anyOf?: IJSONSchema7Definition[] | undefined;
        oneOf?: IJSONSchema7Definition[] | undefined;
        not?: IJSONSchema7Definition | undefined;
        format?: string | undefined;
        contentMediaType?: string | undefined;
        contentEncoding?: string | undefined;
        definitions?: {
            [key: string]: IJSONSchema7Definition;
        } | undefined;
        title?: string | undefined;
        description?: string | undefined;
        tooltip?: string | undefined;
        default?: IJSONSchema7Type | undefined;
        readOnly?: boolean | undefined;
        writeOnly?: boolean | undefined;
        examples?: IJSONSchema7Type | undefined;
    }
    export type IDataSchema = IJSONSchema4 | IJSONSchema6 | IJSONSchema7;
}
/// <amd-module name="@ijstech/types/i18n.ts" />
declare module "@ijstech/types/i18n.ts" {
    export interface I18nInterface {
        get(key: string, params?: {
            [key: string]: string;
        }, skipApp?: boolean): string;
        has(key: string): boolean;
    }
    export type Locales = keyof typeof languages;
    export type Translations = {
        [locale in Locales]?: {
            [key: string]: string;
        };
    };
    export const languages: {
        aa: {
            name: string;
            native: string;
        };
        ab: {
            name: string;
            native: string;
        };
        af: {
            name: string;
            native: string;
        };
        ak: {
            name: string;
            native: string;
        };
        am: {
            name: string;
            native: string;
        };
        an: {
            name: string;
            native: string;
        };
        ar: {
            name: string;
            native: string;
            rtl: number;
        };
        as: {
            name: string;
            native: string;
        };
        av: {
            name: string;
            native: string;
        };
        ay: {
            name: string;
            native: string;
        };
        az: {
            name: string;
            native: string;
        };
        ba: {
            name: string;
            native: string;
        };
        be: {
            name: string;
            native: string;
        };
        bg: {
            name: string;
            native: string;
        };
        bh: {
            name: string;
            native: string;
        };
        bi: {
            name: string;
            native: string;
        };
        bm: {
            name: string;
            native: string;
        };
        bn: {
            name: string;
            native: string;
        };
        bo: {
            name: string;
            native: string;
        };
        br: {
            name: string;
            native: string;
        };
        bs: {
            name: string;
            native: string;
        };
        ca: {
            name: string;
            native: string;
        };
        ce: {
            name: string;
            native: string;
        };
        ch: {
            name: string;
            native: string;
        };
        co: {
            name: string;
            native: string;
        };
        cr: {
            name: string;
            native: string;
        };
        cs: {
            name: string;
            native: string;
        };
        cu: {
            name: string;
            native: string;
        };
        cv: {
            name: string;
            native: string;
        };
        cy: {
            name: string;
            native: string;
        };
        da: {
            name: string;
            native: string;
        };
        de: {
            name: string;
            native: string;
        };
        dv: {
            name: string;
            native: string;
            rtl: number;
        };
        dz: {
            name: string;
            native: string;
        };
        ee: {
            name: string;
            native: string;
        };
        el: {
            name: string;
            native: string;
        };
        en: {
            name: string;
            native: string;
        };
        eo: {
            name: string;
            native: string;
        };
        es: {
            name: string;
            native: string;
        };
        et: {
            name: string;
            native: string;
        };
        eu: {
            name: string;
            native: string;
        };
        fa: {
            name: string;
            native: string;
            rtl: number;
        };
        ff: {
            name: string;
            native: string;
        };
        fi: {
            name: string;
            native: string;
        };
        fj: {
            name: string;
            native: string;
        };
        fo: {
            name: string;
            native: string;
        };
        fr: {
            name: string;
            native: string;
        };
        fy: {
            name: string;
            native: string;
        };
        ga: {
            name: string;
            native: string;
        };
        gd: {
            name: string;
            native: string;
        };
        gl: {
            name: string;
            native: string;
        };
        gn: {
            name: string;
            native: string;
        };
        gu: {
            name: string;
            native: string;
        };
        gv: {
            name: string;
            native: string;
        };
        ha: {
            name: string;
            native: string;
            rtl: number;
        };
        he: {
            name: string;
            native: string;
            rtl: number;
        };
        hi: {
            name: string;
            native: string;
        };
        ho: {
            name: string;
            native: string;
        };
        hr: {
            name: string;
            native: string;
        };
        ht: {
            name: string;
            native: string;
        };
        hu: {
            name: string;
            native: string;
        };
        hy: {
            name: string;
            native: string;
        };
        hz: {
            name: string;
            native: string;
        };
        ia: {
            name: string;
            native: string;
        };
        id: {
            name: string;
            native: string;
        };
        ie: {
            name: string;
            native: string;
        };
        ig: {
            name: string;
            native: string;
        };
        ii: {
            name: string;
            native: string;
        };
        ik: {
            name: string;
            native: string;
        };
        io: {
            name: string;
            native: string;
        };
        is: {
            name: string;
            native: string;
        };
        it: {
            name: string;
            native: string;
        };
        iu: {
            name: string;
            native: string;
        };
        ja: {
            name: string;
            native: string;
        };
        jv: {
            name: string;
            native: string;
        };
        ka: {
            name: string;
            native: string;
        };
        kg: {
            name: string;
            native: string;
        };
        ki: {
            name: string;
            native: string;
        };
        kj: {
            name: string;
            native: string;
        };
        kk: {
            name: string;
            native: string;
        };
        kl: {
            name: string;
            native: string;
        };
        km: {
            name: string;
            native: string;
        };
        kn: {
            name: string;
            native: string;
        };
        ko: {
            name: string;
            native: string;
        };
        kr: {
            name: string;
            native: string;
        };
        ks: {
            name: string;
            native: string;
            rtl: number;
        };
        ku: {
            name: string;
            native: string;
            rtl: number;
        };
        kv: {
            name: string;
            native: string;
        };
        kw: {
            name: string;
            native: string;
        };
        ky: {
            name: string;
            native: string;
        };
        la: {
            name: string;
            native: string;
        };
        lb: {
            name: string;
            native: string;
        };
        lg: {
            name: string;
            native: string;
        };
        li: {
            name: string;
            native: string;
        };
        ln: {
            name: string;
            native: string;
        };
        lo: {
            name: string;
            native: string;
        };
        lt: {
            name: string;
            native: string;
        };
        lu: {
            name: string;
            native: string;
        };
        lv: {
            name: string;
            native: string;
        };
        mg: {
            name: string;
            native: string;
        };
        mh: {
            name: string;
            native: string;
        };
        mi: {
            name: string;
            native: string;
        };
        mk: {
            name: string;
            native: string;
        };
        ml: {
            name: string;
            native: string;
        };
        mn: {
            name: string;
            native: string;
        };
        mo: {
            name: string;
            native: string;
        };
        mr: {
            name: string;
            native: string;
        };
        ms: {
            name: string;
            native: string;
        };
        mt: {
            name: string;
            native: string;
        };
        my: {
            name: string;
            native: string;
        };
        na: {
            name: string;
            native: string;
        };
        nb: {
            name: string;
            native: string;
        };
        nd: {
            name: string;
            native: string;
        };
        ne: {
            name: string;
            native: string;
        };
        ng: {
            name: string;
            native: string;
        };
        nl: {
            name: string;
            native: string;
        };
        nn: {
            name: string;
            native: string;
        };
        no: {
            name: string;
            native: string;
        };
        nr: {
            name: string;
            native: string;
        };
        nv: {
            name: string;
            native: string;
        };
        ny: {
            name: string;
            native: string;
        };
        oc: {
            name: string;
            native: string;
        };
        oj: {
            name: string;
            native: string;
        };
        om: {
            name: string;
            native: string;
        };
        or: {
            name: string;
            native: string;
        };
        os: {
            name: string;
            native: string;
        };
        pa: {
            name: string;
            native: string;
        };
        pi: {
            name: string;
            native: string;
        };
        pl: {
            name: string;
            native: string;
        };
        ps: {
            name: string;
            native: string;
            rtl: number;
        };
        pt: {
            name: string;
            native: string;
        };
        qu: {
            name: string;
            native: string;
        };
        rm: {
            name: string;
            native: string;
        };
        rn: {
            name: string;
            native: string;
        };
        ro: {
            name: string;
            native: string;
        };
        ru: {
            name: string;
            native: string;
        };
        rw: {
            name: string;
            native: string;
        };
        sa: {
            name: string;
            native: string;
        };
        sc: {
            name: string;
            native: string;
        };
        sd: {
            name: string;
            native: string;
        };
        se: {
            name: string;
            native: string;
        };
        sg: {
            name: string;
            native: string;
        };
        sh: {
            name: string;
            native: string;
        };
        si: {
            name: string;
            native: string;
        };
        sk: {
            name: string;
            native: string;
        };
        sl: {
            name: string;
            native: string;
        };
        sm: {
            name: string;
            native: string;
        };
        sn: {
            name: string;
            native: string;
        };
        so: {
            name: string;
            native: string;
        };
        sq: {
            name: string;
            native: string;
        };
        sr: {
            name: string;
            native: string;
        };
        ss: {
            name: string;
            native: string;
        };
        st: {
            name: string;
            native: string;
        };
        su: {
            name: string;
            native: string;
        };
        sv: {
            name: string;
            native: string;
        };
        sw: {
            name: string;
            native: string;
        };
        ta: {
            name: string;
            native: string;
        };
        te: {
            name: string;
            native: string;
        };
        tg: {
            name: string;
            native: string;
        };
        th: {
            name: string;
            native: string;
        };
        ti: {
            name: string;
            native: string;
        };
        tk: {
            name: string;
            native: string;
        };
        tl: {
            name: string;
            native: string;
        };
        tn: {
            name: string;
            native: string;
        };
        to: {
            name: string;
            native: string;
        };
        tr: {
            name: string;
            native: string;
        };
        ts: {
            name: string;
            native: string;
        };
        tt: {
            name: string;
            native: string;
        };
        tw: {
            name: string;
            native: string;
        };
        ty: {
            name: string;
            native: string;
        };
        ug: {
            name: string;
            native: string;
        };
        uk: {
            name: string;
            native: string;
        };
        ur: {
            name: string;
            native: string;
            rtl: number;
        };
        uz: {
            name: string;
            native: string;
        };
        ve: {
            name: string;
            native: string;
        };
        vi: {
            name: string;
            native: string;
        };
        vo: {
            name: string;
            native: string;
        };
        wa: {
            name: string;
            native: string;
        };
        wo: {
            name: string;
            native: string;
        };
        xh: {
            name: string;
            native: string;
        };
        yi: {
            name: string;
            native: string;
            rtl: number;
        };
        yo: {
            name: string;
            native: string;
        };
        za: {
            name: string;
            native: string;
        };
        "zh-hans": {
            name: string;
            native: string;
        };
        "zh-hant": {
            name: string;
            native: string;
        };
        zu: {
            name: string;
            native: string;
        };
    };
}
/// <amd-module name="@ijstech/types/tooltip.ts" />
declare module "@ijstech/types/tooltip.ts" {
    import { I18nInterface } from "@ijstech/types/i18n.ts";
    export type PlacementType = 'top' | 'left' | 'right' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'leftTop' | 'leftBottom' | 'rightTop' | 'rightBottom';
    export type TriggerType = 'hover' | 'click';
    export interface ITooltipImpl {
        content: string;
        popperClass: string;
        color: string;
        placement: PlacementType;
        trigger: TriggerType;
        duration: number;
        maxWidth: string;
        designMode: boolean;
        isSmallScreen: boolean;
        show(elm: HTMLElement): void;
        close(): void;
        updateLocale(i18n: I18nInterface): void;
    }
    export interface ITooltip {
        content?: string;
        popperClass?: string;
        color?: string;
        placement?: PlacementType;
        trigger?: TriggerType;
        duration?: number;
        maxWidth?: string;
    }
}
/// <amd-module name="@ijstech/types" />
declare module "@ijstech/types" {
    export * as JSONSchema from "@ijstech/types/jsonSchema.ts";
    export { IDataSchema } from "@ijstech/types/jsonSchema.ts";
    export { ITooltipImpl, PlacementType, TriggerType, ITooltip } from "@ijstech/types/tooltip.ts";
    export { I18nInterface, Locales, Translations, languages } from "@ijstech/types/i18n.ts";
    import { I18nInterface, Locales } from "@ijstech/types/i18n.ts";
    export interface IApplication {
        locale: Locales;
        i18n: I18nInterface;
    }
    export interface IModule extends HTMLElement {
        i18n: I18nInterface;
        isModule: boolean;
        currentModuleDir?: string;
        updateLocale(): void;
    }
    export function isModule(value: IModule): value is IModule;
    export enum GroupType {
        'BASIC' = "Basic",
        'LAYOUT' = "Layout",
        'FIELDS' = "Fields"
    }
}
/// <amd-module name="@ijstech/style/colors.ts" />
declare module "@ijstech/style/colors.ts" {
    export interface IColor {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
        A100: string;
        A200: string;
        A400: string;
        A700: string;
    }
    export const amber: IColor;
    export const blue: IColor;
    export const blueGrey: IColor;
    export const brown: IColor;
    export const cyan: IColor;
    export const deepOrange: IColor;
    export const deepPurple: IColor;
    export const green: IColor;
    export const grey: IColor;
    export const indigo: IColor;
    export const lightBlue: IColor;
    export const lightGreen: IColor;
    export const lime: IColor;
    export const orange: IColor;
    export const pink: IColor;
    export const purple: IColor;
    export const red: IColor;
    export const teal: IColor;
    export const yellow: IColor;
    export interface IColors {
        amber: IColor;
        blue: IColor;
        blueGrey: IColor;
        brown: IColor;
        cyan: IColor;
        deepOrange: IColor;
        deepPurple: IColor;
        green: IColor;
        grey: IColor;
        indigo: IColor;
        lightBlue: IColor;
        lightGreen: IColor;
        lime: IColor;
        orange: IColor;
        pink: IColor;
        purple: IColor;
        red: IColor;
        teal: IColor;
        yellow: IColor;
    }
    export const Colors: IColors;
}
/// <amd-module name="@ijstech/style/theme.ts" />
declare module "@ijstech/style/theme.ts" {
    import { IColor, Colors } from "@ijstech/style/colors.ts";
    export { Colors };
    type IColorVar = string;
    interface IThemeColors {
        main: IColorVar;
        light: IColorVar;
        dark: IColorVar;
        contrastText: IColorVar;
    }
    interface ILayout {
        container: {
            width: string;
            maxWidth: string;
            textAlign: string;
            overflow: string;
        };
    }
    export interface ITheme {
        action: {
            active: IColorVar;
            activeBackground: IColorVar;
            activeOpacity: number;
            disabled: IColorVar;
            disabledBackground: IColorVar;
            disabledOpacity: number;
            focus: IColorVar;
            focusBackground: IColorVar;
            focusOpacity: number;
            hover: IColorVar;
            hoverBackground: IColorVar;
            hoverOpacity: number;
            selected: IColorVar;
            selectedBackground: IColorVar;
            selectedOpacity: number;
        };
        background: {
            default: IColorVar;
            paper: IColorVar;
            main: IColorVar;
            modal: IColorVar;
            gradient: IColorVar;
        };
        breakpoints: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
        colors: {
            primary: IThemeColors;
            secondary: IThemeColors;
            error: IThemeColors;
            warning: IThemeColors;
            info: IThemeColors;
            success: IThemeColors;
        };
        layout: ILayout;
        divider: IColorVar;
        shadows: {
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
        };
        text: {
            primary: IColorVar;
            secondary: IColorVar;
            third: IColorVar;
            disabled: IColorVar;
            hint: IColorVar;
        };
        docs: {
            background: IColorVar;
            text0: IColorVar;
            text1: IColorVar;
        };
        typography: {
            fontFamily: string;
            fontSize: string;
        };
        input: {
            background: string;
            fontColor: string;
        };
        combobox: {
            background: string;
            fontColor: string;
        };
    }
    export interface IThemeVariables {
        action: {
            active: string;
            activeBackground: string;
            activeOpacity: string;
            disabled: string;
            disabledBackground: string;
            disabledOpacity: string;
            focus: string;
            focusBackground: string;
            focusOpacity: string;
            hover: string;
            hoverBackground: string;
            hoverOpacity: string;
            selected: string;
            selectedBackground: string;
            selectedOpacity: string;
        };
        background: {
            default: string;
            paper: string;
            main: string;
            modal: string;
            gradient: string;
        };
        breakpoints: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        colors: {
            primary: IThemeColors;
            secondary: IThemeColors;
            error: IThemeColors;
            warning: IThemeColors;
            info: IThemeColors;
            success: IThemeColors;
        };
        layout: ILayout;
        divider: string;
        shadows: {
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
        };
        text: {
            primary: string;
            secondary: string;
            third: string;
            disabled: string;
            hint: string;
        };
        docs: {
            background: string;
            text0: string;
            text1: string;
        };
        typography: {
            fontFamily: string;
            fontSize: string;
        };
        input: {
            background: string;
            fontColor: string;
        };
        combobox: {
            background: string;
            fontColor: string;
        };
    }
    export const defaultTheme: ITheme;
    export const darkTheme: ITheme;
    export const ThemeVars: IThemeVariables;
    export const ColorVars: IColor;
    export var currentTheme: ITheme;
    export function applyTheme(theme: ITheme): void;
}
/// <amd-module name="@ijstech/style/styles.ts" />
declare module "@ijstech/style/styles.ts" {
    /**
     * Valid CSS property values.
     */
    export type PropertyValue = number | boolean | string;
    /**
     * Input styles object.
     */
    export interface Styles {
        $unique?: boolean;
        $global?: boolean;
        $displayName?: string;
        [selector: string]: null | undefined | PropertyValue | PropertyValue[] | Styles;
    }
    /**
     * Propagate change events.
     */
    export interface Changes {
        add(style: Container<any>, index: number): void;
        change(style: Container<any>, oldIndex: number, newIndex: number): void;
        remove(style: Container<any>, index: number): void;
    }
    /**
     * Cache-able interface.
     */
    export interface Container<T> {
        id: string;
        clone(): T;
        getStyles(): string;
    }
    /**
     * Implement a cache/event emitter.
     */
    export class Cache<T extends Container<any>> {
        changes?: Changes;
        sheet: string[];
        changeId: number;
        private _keys;
        private _children;
        private _counters;
        constructor(changes?: Changes);
        add(style: T): void;
        remove(style: T): void;
        values(): T[];
        merge(cache: Cache<any>): this;
        unmerge(cache: Cache<any>): this;
        clone(): Cache<T>;
    }
    /**
     * Selector is a dumb class made to represent nested CSS selectors.
     */
    export class Selector implements Container<Selector> {
        selector: string;
        id: string;
        constructor(selector: string, id: string);
        getStyles(): string;
        clone(): Selector;
    }
    /**
     * The style container registers a style string with selectors.
     */
    export class Style extends Cache<Selector> implements Container<Style> {
        style: string;
        id: string;
        constructor(style: string, id: string);
        getStyles(): string;
        clone(): Style;
    }
    /**
     * Implement rule logic for style output.
     */
    export class Rule extends Cache<Rule | Style> implements Container<Rule> {
        rule: string;
        style: string;
        id: string;
        constructor(rule: string, style: string, id: string);
        getStyles(): string;
        clone(): Rule;
    }
    /**
     * The FreeStyle class implements the API for everything else.
     */
    export class FreeStyle extends Cache<Rule | Style> implements Container<FreeStyle> {
        id: string;
        constructor(id: string, changes?: Changes);
        registerStyle(css: Styles): string;
        registerKeyframes(keyframes: Styles): string;
        registerHashRule(prefix: string, styles: Styles): string;
        registerRule(rule: string, styles: Styles): string;
        registerCss(styles: Styles): string;
        getStyles(): string;
        clone(): FreeStyle;
    }
    /**
     * Exports a simple function to create a new instance.
     */
    export function create(changes?: Changes): FreeStyle;
}
/// <amd-module name="@ijstech/style/csstype.ts" />
declare module "@ijstech/style/csstype.ts" {
    export type PropertyValue<TValue> = TValue extends Array<infer AValue> ? Array<AValue extends infer TUnpacked & {} ? TUnpacked : AValue> : TValue extends infer TUnpacked & {} ? TUnpacked : TValue;
    export type Fallback<T> = {
        [P in keyof T]: T[P] | NonNullable<T[P]>[];
    };
    export interface StandardLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * The **`accent-color`** CSS property sets the color of the elements accent. An accent appears in elements such as `<input>` of `type="checkbox"`, or `type="radio"`.
         *
         * **Syntax**: `auto | <color>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **93** | **92**  |   No   | **93** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/accent-color
         */
        accentColor?: Property.AccentColor | undefined;
        /**
         * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.
         *
         * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **29**  | **28**  |  **9**  | **12** | **11** |
         * | 21 _-x-_ |         | 7 _-x-_ |        |        |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/align-content
         */
        alignContent?: Property.AlignContent | undefined;
        /**
         * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.
         *
         * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **52**  | **20**  |  **9**  | **12** | **11** |
         * | 21 _-x-_ |         | 7 _-x-_ |        |        |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/align-items
         */
        alignItems?: Property.AlignItems | undefined;
        /**
         * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :------: | :-----: | :-------: | :----: | :----: |
         * |  **36**  | **20**  |   **9**   | **12** | **11** |
         * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  |      IE      |
         * | :----: | :-----: | :------: | :----: | :----------: |
         * | **57** | **52**  | **10.1** | **16** | **10** _-x-_ |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/align-self
         */
        alignSelf?: Property.AlignSelf | undefined;
        /**
         * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.
         *
         * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   |   n/a   |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks
         */
        alignTracks?: Property.AlignTracks | undefined;
        /**
         * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay
         */
        animationDelay?: Property.AnimationDelay<TTime> | undefined;
        /**
         * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
         *
         * **Syntax**: `<single-animation-direction>#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction
         */
        animationDirection?: Property.AnimationDirection | undefined;
        /**
         * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration
         */
        animationDuration?: Property.AnimationDuration<TTime> | undefined;
        /**
         * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
         *
         * **Syntax**: `<single-animation-fill-mode>#`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode
         */
        animationFillMode?: Property.AnimationFillMode | undefined;
        /**
         * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.
         *
         * **Syntax**: `<single-animation-iteration-count>#`
         *
         * **Initial value**: `1`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count
         */
        animationIterationCount?: Property.AnimationIterationCount | undefined;
        /**
         * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules describing the animation or animations to apply to the element.
         *
         * **Syntax**: `[ none | <keyframes-name> ]#`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-name
         */
        animationName?: Property.AnimationName | undefined;
        /**
         * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
         *
         * **Syntax**: `<single-animation-play-state>#`
         *
         * **Initial value**: `running`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state
         */
        animationPlayState?: Property.AnimationPlayState | undefined;
        /**
         * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function
         */
        animationTimingFunction?: Property.AnimationTimingFunction | undefined;
        /**
         * The `**appearance**` CSS property is used to display an element using platform-native styling, based on the operating system's theme. The **`-moz-appearance`** and **`-webkit-appearance`** properties are non-standard versions of this property, used (respectively) by Gecko (Firefox) and by WebKit-based (e.g., Safari) and Blink-based (e.g., Chrome, Opera) browsers to achieve the same thing. Note that Firefox and Edge also support **`-webkit-appearance`**, for compatibility reasons.
         *
         * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox |   Safari    |   Edge   | IE  |
         * | :-----: | :-----: | :---------: | :------: | :-: |
         * | **84**  | **80**  | **3** _-x-_ |  **84**  | No  |
         * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/appearance
         */
        appearance?: Property.Appearance | undefined;
        /**
         * The **`aspect-ratio`**  CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.
         *
         * **Syntax**: `auto | <ratio>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **88** | **89**  | **15** | **88** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio
         */
        aspectRatio?: Property.AspectRatio | undefined;
        /**
         * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.
         *
         * **Syntax**: `none | <filter-function-list>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |   Safari    |  Edge  | IE  |
         * | :----: | :-----: | :---------: | :----: | :-: |
         * | **76** |   n/a   | **9** _-x-_ | **17** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter
         */
        backdropFilter?: Property.BackdropFilter | undefined;
        /**
         * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
         *
         * **Syntax**: `visible | hidden`
         *
         * **Initial value**: `visible`
         *
         * |  Chrome  | Firefox  |    Safari     |  Edge  |   IE   |
         * | :------: | :------: | :-----------: | :----: | :----: |
         * |  **36**  |  **16**  | **5.1** _-x-_ | **12** | **10** |
         * | 12 _-x-_ | 10 _-x-_ |               |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility
         */
        backfaceVisibility?: Property.BackfaceVisibility | undefined;
        /**
         * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.
         *
         * **Syntax**: `<attachment>#`
         *
         * **Initial value**: `scroll`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment
         */
        backgroundAttachment?: Property.BackgroundAttachment | undefined;
        /**
         * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.
         *
         * **Syntax**: `<blend-mode>#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **35** | **30**  | **8**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode
         */
        backgroundBlendMode?: Property.BackgroundBlendMode | undefined;
        /**
         * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `border-box`
         *
         * | Chrome | Firefox |   Safari    |  Edge  |  IE   |
         * | :----: | :-----: | :---------: | :----: | :---: |
         * | **1**  |  **4**  | **3** _-x-_ | **12** | **9** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-clip
         */
        backgroundClip?: Property.BackgroundClip | undefined;
        /**
         * The **`background-color`** CSS property sets the background color of an element.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `transparent`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-color
         */
        backgroundColor?: Property.BackgroundColor | undefined;
        /**
         * The **`background-image`** CSS property sets one or more background images on an element.
         *
         * **Syntax**: `<bg-image>#`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-image
         */
        backgroundImage?: Property.BackgroundImage | undefined;
        /**
         * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `padding-box`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **4**  | **3**  | **12** | **9** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-origin
         */
        backgroundOrigin?: Property.BackgroundOrigin | undefined;
        /**
         * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.
         *
         * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`
         *
         * **Initial value**: `left`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  | **49**  | **1**  | **12** | **6** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x
         */
        backgroundPositionX?: Property.BackgroundPositionX<TLength> | undefined;
        /**
         * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.
         *
         * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`
         *
         * **Initial value**: `top`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  | **49**  | **1**  | **12** | **6** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y
         */
        backgroundPositionY?: Property.BackgroundPositionY<TLength> | undefined;
        /**
         * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.
         *
         * **Syntax**: `<repeat-style>#`
         *
         * **Initial value**: `repeat`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat
         */
        backgroundRepeat?: Property.BackgroundRepeat | undefined;
        /**
         * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **3**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-size
         */
        backgroundSize?: Property.BackgroundSize<TLength> | undefined;
        /**
         * **Syntax**: `clip | ellipsis | <string>`
         *
         * **Initial value**: `clip`
         */
        blockOverflow?: Property.BlockOverflow | undefined;
        /**
         * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'width'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/block-size
         */
        blockSize?: Property.BlockSize<TLength> | undefined;
        /**
         * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>{1,2}`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color
         */
        borderBlockColor?: Property.BorderBlockColor | undefined;
        /**
         * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color
         */
        borderBlockEndColor?: Property.BorderBlockEndColor | undefined;
        /**
         * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style
         */
        borderBlockEndStyle?: Property.BorderBlockEndStyle | undefined;
        /**
         * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width
         */
        borderBlockEndWidth?: Property.BorderBlockEndWidth<TLength> | undefined;
        /**
         * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color
         */
        borderBlockStartColor?: Property.BorderBlockStartColor | undefined;
        /**
         * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style
         */
        borderBlockStartStyle?: Property.BorderBlockStartStyle | undefined;
        /**
         * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width
         */
        borderBlockStartWidth?: Property.BorderBlockStartWidth<TLength> | undefined;
        /**
         * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style
         */
        borderBlockStyle?: Property.BorderBlockStyle | undefined;
        /**
         * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width
         */
        borderBlockWidth?: Property.BorderBlockWidth<TLength> | undefined;
        /**
         * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color
         */
        borderBottomColor?: Property.BorderBottomColor | undefined;
        /**
         * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius
         */
        borderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;
        /**
         * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius
         */
        borderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;
        /**
         * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.
         *
         * **Syntax**: `<line-style>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style
         */
        borderBottomStyle?: Property.BorderBottomStyle | undefined;
        /**
         * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width
         */
        borderBottomWidth?: Property.BorderBottomWidth<TLength> | undefined;
        /**
         * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.
         *
         * **Syntax**: `collapse | separate`
         *
         * **Initial value**: `separate`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse
         */
        borderCollapse?: Property.BorderCollapse | undefined;
        /**
         * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **89** | **66**  | **15** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius
         */
        borderEndEndRadius?: Property.BorderEndEndRadius<TLength> | undefined;
        /**
         * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **89** | **66**  | **15** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius
         */
        borderEndStartRadius?: Property.BorderEndStartRadius<TLength> | undefined;
        /**
         * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.
         *
         * **Syntax**: `[ <length> | <number> ]{1,4}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **15**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset
         */
        borderImageOutset?: Property.BorderImageOutset<TLength> | undefined;
        /**
         * The **`border-image-repeat`** CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.
         *
         * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`
         *
         * **Initial value**: `stretch`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **15**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat
         */
        borderImageRepeat?: Property.BorderImageRepeat | undefined;
        /**
         * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.
         *
         * **Syntax**: `<number-percentage>{1,4} && fill?`
         *
         * **Initial value**: `100%`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **15**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice
         */
        borderImageSlice?: Property.BorderImageSlice | undefined;
        /**
         * The **`border-image-source`** CSS property sets the source image used to create an element's border image.
         *
         * **Syntax**: `none | <image>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **15**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source
         */
        borderImageSource?: Property.BorderImageSource | undefined;
        /**
         * The **`border-image-width`** CSS property sets the width of an element's border image.
         *
         * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`
         *
         * **Initial value**: `1`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **13**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width
         */
        borderImageWidth?: Property.BorderImageWidth<TLength> | undefined;
        /**
         * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>{1,2}`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color
         */
        borderInlineColor?: Property.BorderInlineColor | undefined;
        /**
         * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |
         * | :----: | :-------------------------: | :------: | :----: | :-: |
         * | **69** |           **41**            | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-end-color)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color
         */
        borderInlineEndColor?: Property.BorderInlineEndColor | undefined;
        /**
         * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |
         * | :----: | :-------------------------: | :------: | :----: | :-: |
         * | **69** |           **41**            | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-end-style)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style
         */
        borderInlineEndStyle?: Property.BorderInlineEndStyle | undefined;
        /**
         * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |
         * | :----: | :-------------------------: | :------: | :----: | :-: |
         * | **69** |           **41**            | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-end-width)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width
         */
        borderInlineEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;
        /**
         * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |
         * | :----: | :---------------------------: | :------: | :----: | :-: |
         * | **69** |            **41**             | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-start-color)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color
         */
        borderInlineStartColor?: Property.BorderInlineStartColor | undefined;
        /**
         * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |
         * | :----: | :---------------------------: | :------: | :----: | :-: |
         * | **69** |            **41**             | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-start-style)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style
         */
        borderInlineStartStyle?: Property.BorderInlineStartStyle | undefined;
        /**
         * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width
         */
        borderInlineStartWidth?: Property.BorderInlineStartWidth<TLength> | undefined;
        /**
         * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style
         */
        borderInlineStyle?: Property.BorderInlineStyle | undefined;
        /**
         * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width
         */
        borderInlineWidth?: Property.BorderInlineWidth<TLength> | undefined;
        /**
         * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color
         */
        borderLeftColor?: Property.BorderLeftColor | undefined;
        /**
         * The **`border-left-style`** CSS property sets the line style of an element's left `border`.
         *
         * **Syntax**: `<line-style>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style
         */
        borderLeftStyle?: Property.BorderLeftStyle | undefined;
        /**
         * The **`border-left-width`** CSS property sets the width of the left border of an element.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width
         */
        borderLeftWidth?: Property.BorderLeftWidth<TLength> | undefined;
        /**
         * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color
         */
        borderRightColor?: Property.BorderRightColor | undefined;
        /**
         * The **`border-right-style`** CSS property sets the line style of an element's right `border`.
         *
         * **Syntax**: `<line-style>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style
         */
        borderRightStyle?: Property.BorderRightStyle | undefined;
        /**
         * The **`border-right-width`** CSS property sets the width of the right border of an element.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width
         */
        borderRightWidth?: Property.BorderRightWidth<TLength> | undefined;
        /**
         * The **`border-spacing`** CSS property sets the distance between the borders of adjacent `<table>` cells. This property applies only when `border-collapse` is `separate`.
         *
         * **Syntax**: `<length> <length>?`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing
         */
        borderSpacing?: Property.BorderSpacing<TLength> | undefined;
        /**
         * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **89** | **66**  | **15** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius
         */
        borderStartEndRadius?: Property.BorderStartEndRadius<TLength> | undefined;
        /**
         * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **89** | **66**  | **15** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius
         */
        borderStartStartRadius?: Property.BorderStartStartRadius<TLength> | undefined;
        /**
         * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color
         */
        borderTopColor?: Property.BorderTopColor | undefined;
        /**
         * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius
         */
        borderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;
        /**
         * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius
         */
        borderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;
        /**
         * The **`border-top-style`** CSS property sets the line style of an element's top `border`.
         *
         * **Syntax**: `<line-style>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style
         */
        borderTopStyle?: Property.BorderTopStyle | undefined;
        /**
         * The **`border-top-width`** CSS property sets the width of the top border of an element.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width
         */
        borderTopWidth?: Property.BorderTopWidth<TLength> | undefined;
        /**
         * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/bottom
         */
        bottom?: Property.Bottom<TLength> | undefined;
        /**
         * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
         *
         * **Syntax**: `slice | clone`
         *
         * **Initial value**: `slice`
         *
         * |    Chrome    | Firefox |   Safari    |     Edge     | IE  |
         * | :----------: | :-----: | :---------: | :----------: | :-: |
         * | **22** _-x-_ | **32**  | **7** _-x-_ | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break
         */
        boxDecorationBreak?: Property.BoxDecorationBreak | undefined;
        /**
         * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.
         *
         * **Syntax**: `none | <shadow>#`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * | **10**  |  **4**  | **5.1** | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow
         */
        boxShadow?: Property.BoxShadow | undefined;
        /**
         * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.
         *
         * **Syntax**: `content-box | border-box`
         *
         * **Initial value**: `content-box`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * | **10**  | **29**  | **5.1** | **12** | **8** |
         * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing
         */
        boxSizing?: Property.BoxSizing | undefined;
        /**
         * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.
         *
         * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  |   No   | **12** | **10** |
         *
         * ---
         *
         * _Supported in Paged Media_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  | **10** | **12** | **10** |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/break-after
         */
        breakAfter?: Property.BreakAfter | undefined;
        /**
         * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.
         *
         * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  |   No   | **12** | **10** |
         *
         * ---
         *
         * _Supported in Paged Media_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  | **10** | **12** | **10** |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/break-before
         */
        breakBefore?: Property.BreakBefore | undefined;
        /**
         * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.
         *
         * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  | **10** | **12** | **10** |
         *
         * ---
         *
         * _Supported in Paged Media_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  | **10** | **12** | **10** |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/break-inside
         */
        breakInside?: Property.BreakInside | undefined;
        /**
         * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.
         *
         * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`
         *
         * **Initial value**: `top`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/caption-side
         */
        captionSide?: Property.CaptionSide | undefined;
        /**
         * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.
         *
         * **Syntax**: `auto | <color>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **53**  | **11.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/caret-color
         */
        caretColor?: Property.CaretColor | undefined;
        /**
         * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.
         *
         * **Syntax**: `none | left | right | both | inline-start | inline-end`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/clear
         */
        clear?: Property.Clear | undefined;
        /**
         * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.
         *
         * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`
         *
         * **Initial value**: `none`
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :------: | :-----: | :-------: | :----: | :----: |
         * |  **55**  | **3.5** |  **9.1**  | **12** | **10** |
         * | 23 _-x-_ |         | 6.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/clip-path
         */
        clipPath?: Property.ClipPath | undefined;
        /**
         * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `<currentcolor>` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: Varies from one browser to another
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/color
         */
        color?: Property.Color | undefined;
        /**
         * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.
         *
         * **Syntax**: `economy | exact`
         *
         * **Initial value**: `economy`
         *
         * |                Chrome                 | Firefox |                Safari                |                 Edge                  | IE  |
         * | :-----------------------------------: | :-----: | :----------------------------------: | :-----------------------------------: | :-: |
         * | **49** _(-webkit-print-color-adjust)_ | **48**  | **6** _(-webkit-print-color-adjust)_ | **79** _(-webkit-print-color-adjust)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/color-adjust
         */
        colorAdjust?: Property.ColorAdjust | undefined;
        /**
         * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.
         *
         * **Syntax**: `normal | [ light | dark | <custom-ident> ]+`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **81** |   No    | **13** | **81** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme
         */
        colorScheme?: Property.ColorScheme | undefined;
        /**
         * The **`column-count`** CSS property breaks an element's content into the specified number of columns.
         *
         * **Syntax**: `<integer> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-count
         */
        columnCount?: Property.ColumnCount | undefined;
        /**
         * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.
         *
         * **Syntax**: `auto | balance | balance-all`
         *
         * **Initial value**: `balance`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE   |
         * | :----: | :-----: | :-----: | :----: | :----: |
         * | **50** | **52**  |  **9**  | **12** | **10** |
         * |        |         | 8 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-fill
         */
        columnFill?: Property.ColumnFill | undefined;
        /**
         * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
         *
         * **Syntax**: `normal | <length-percentage>`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **84** | **63**  | **14.1** | **84** | No  |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * |         Chrome         |        Firefox         |          Safari          |  Edge  | IE  |
         * | :--------------------: | :--------------------: | :----------------------: | :----: | :-: |
         * |         **66**         |         **61**         |          **12**          | **16** | No  |
         * | 57 _(grid-column-gap)_ | 52 _(grid-column-gap)_ | 10.1 _(grid-column-gap)_ |        |     |
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  | **10**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-gap
         */
        columnGap?: Property.ColumnGap<TLength> | undefined;
        /**
         * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color
         */
        columnRuleColor?: Property.ColumnRuleColor | undefined;
        /**
         * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style
         */
        columnRuleStyle?: Property.ColumnRuleStyle | undefined;
        /**
         * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width
         */
        columnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;
        /**
         * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.
         *
         * **Syntax**: `none | all`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **50**  | **71**  |   **9**   | **12** | **10** |
         * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-span
         */
        columnSpan?: Property.ColumnSpan | undefined;
        /**
         * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
         *
         * **Syntax**: `<length> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **50**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-width
         */
        columnWidth?: Property.ColumnWidth<TLength> | undefined;
        /**
         * The **`contain`** CSS property allows an author to indicate that an element and its contents are, as much as possible, _independent_ of the rest of the document tree. This allows the browser to recalculate layout, style, paint, size, or any combination of them for a limited area of the DOM and not the entire page, leading to obvious performance benefits.
         *
         * **Syntax**: `none | strict | content | [ size || layout || style || paint ]`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **52** | **69**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/contain
         */
        contain?: Property.Contain | undefined;
        /**
         * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**_._
         *
         * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/content
         */
        content?: Property.Content | undefined;
        /**
         * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. Basically it enables the user agent to skip an element's rendering work, including layout and painting, until it is needed, makes the initial page load much faster.
         *
         * **Syntax**: `visible | auto | hidden`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **85** |   No    |   No   | **85** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility
         */
        contentVisibility?: Property.ContentVisibility | undefined;
        /**
         * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.
         *
         * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **2**  |  **1**  | **3**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment
         */
        counterIncrement?: Property.CounterIncrement | undefined;
        /**
         * The **`counter-reset`** CSS property resets a CSS counter to a given value.
         *
         * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **2**  |  **1**  | **3**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset
         */
        counterReset?: Property.CounterReset | undefined;
        /**
         * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.
         *
         * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **85** | **68**  |   No   | **85** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/counter-set
         */
        counterSet?: Property.CounterSet | undefined;
        /**
         * The **`cursor`** CSS property sets the type of mouse cursor, if any, to show when the mouse pointer is over an element.
         *
         * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/cursor
         */
        cursor?: Property.Cursor | undefined;
        /**
         * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).
         *
         * **Syntax**: `ltr | rtl`
         *
         * **Initial value**: `ltr`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **2**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/direction
         */
        direction?: Property.Direction | undefined;
        /**
         * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.
         *
         * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`
         *
         * **Initial value**: `inline`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/display
         */
        display?: Property.Display | undefined;
        /**
         * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.
         *
         * **Syntax**: `show | hide`
         *
         * **Initial value**: `show`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells
         */
        emptyCells?: Property.EmptyCells | undefined;
        /**
         * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.
         *
         * **Syntax**: `none | <filter-function-list>`
         *
         * **Initial value**: `none`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  | IE  |
         * | :------: | :-----: | :-----: | :----: | :-: |
         * |  **53**  | **35**  | **9.1** | **12** | No  |
         * | 18 _-x-_ |         | 6 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/filter
         */
        filter?: Property.Filter | undefined;
        /**
         * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.
         *
         * **Syntax**: `content | <'width'>`
         *
         * **Initial value**: `auto`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **29**  | **22**  |  **9**  | **12** | **11** |
         * | 22 _-x-_ |         | 7 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis
         */
        flexBasis?: Property.FlexBasis<TLength> | undefined;
        /**
         * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
         *
         * **Syntax**: `row | row-reverse | column | column-reverse`
         *
         * **Initial value**: `row`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |
         * | :------: | :-----: | :-----: | :----: | :------: |
         * |  **29**  | **20**  |  **9**  | **12** |  **11**  |
         * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction
         */
        flexDirection?: Property.FlexDirection | undefined;
        /**
         * The **`flex-grow`** CSS property sets the flex grow factor of a flex item main size.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |
         * | :------: | :-----: | :-----: | :----: | :----------------------: |
         * |  **29**  | **20**  |  **9**  | **12** |          **11**          |
         * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow
         */
        flexGrow?: Property.FlexGrow | undefined;
        /**
         * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `1`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **29**  | **20**  |  **9**  | **12** | **10** |
         * | 22 _-x-_ |         | 8 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink
         */
        flexShrink?: Property.FlexShrink | undefined;
        /**
         * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.
         *
         * **Syntax**: `nowrap | wrap | wrap-reverse`
         *
         * **Initial value**: `nowrap`
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :------: | :-----: | :-------: | :----: | :----: |
         * |  **29**  | **28**  |   **9**   | **12** | **11** |
         * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap
         */
        flexWrap?: Property.FlexWrap | undefined;
        /**
         * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).
         *
         * **Syntax**: `left | right | none | inline-start | inline-end`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/float
         */
        float?: Property.Float | undefined;
        /**
         * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.
         *
         * **Syntax**: `[ <family-name> | <generic-family> ]#`
         *
         * **Initial value**: depends on user agent
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-family
         */
        fontFamily?: Property.FontFamily | undefined;
        /**
         * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.
         *
         * **Syntax**: `normal | <feature-tag-value>#`
         *
         * **Initial value**: `normal`
         *
         * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |
         * | :------: | :------: | :-----: | :----: | :----: |
         * |  **48**  |  **34**  | **9.1** | **15** | **10** |
         * | 16 _-x-_ | 15 _-x-_ |         |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings
         */
        fontFeatureSettings?: Property.FontFeatureSettings | undefined;
        /**
         * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.
         *
         * **Syntax**: `auto | normal | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **33** | **32**  |  **9**  | **79** | No  |
         * |        |         | 6 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning
         */
        fontKerning?: Property.FontKerning | undefined;
        /**
         * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.
         *
         * **Syntax**: `normal | <string>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **34**  |   No   |  No  | No  |
         * |        | 4 _-x-_ |        |      |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override
         */
        fontLanguageOverride?: Property.FontLanguageOverride | undefined;
        /**
         * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.
         *
         * **Syntax**: `auto | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **79** | **62**  | **11** | **17** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing
         */
        fontOpticalSizing?: Property.FontOpticalSizing | undefined;
        /**
         * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.
         *
         * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-size
         */
        fontSize?: Property.FontSize<TLength> | undefined;
        /**
         * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).
         *
         * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |  n/a   |  **1**  |   No   | n/a  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust
         */
        fontSizeAdjust?: Property.FontSizeAdjust | undefined;
        /**
         * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.
         *
         * **Syntax**: `auto | never | always | <absolute-size> | <length>`
         *
         * **Initial value**: `auto`
         *
         * |              Chrome              |              Firefox               |              Safari              |               Edge                | IE  |
         * | :------------------------------: | :--------------------------------: | :------------------------------: | :-------------------------------: | :-: |
         * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | **79** _(-webkit-font-smoothing)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth
         */
        fontSmooth?: Property.FontSmooth<TLength> | undefined;
        /**
         * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.
         *
         * **Syntax**: `<font-stretch-absolute>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **60** |  **9**  | **11** | **12** | **9** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch
         */
        fontStretch?: Property.FontStretch | undefined;
        /**
         * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.
         *
         * **Syntax**: `normal | italic | oblique <angle>?`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-style
         */
        fontStyle?: Property.FontStyle | undefined;
        /**
         * The **`font-synthesis`** CSS property controls which missing typefaces, bold or italic, may be synthesized by the browser.
         *
         * **Syntax**: `none | [ weight || style || small-caps ]`
         *
         * **Initial value**: `weight style`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **34**  | **9**  |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis
         */
        fontSynthesis?: Property.FontSynthesis | undefined;
        /**
         * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.
         *
         * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant
         */
        fontVariant?: Property.FontVariant | undefined;
        /**
         * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.
         *
         * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **52** | **34**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps
         */
        fontVariantCaps?: Property.FontVariantCaps | undefined;
        /**
         * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.
         *
         * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **63** | **34**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian
         */
        fontVariantEastAsian?: Property.FontVariantEastAsian | undefined;
        /**
         * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.
         *
         * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`
         *
         * **Initial value**: `normal`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  | IE  |
         * | :------: | :-----: | :-----: | :----: | :-: |
         * |  **34**  | **34**  | **9.1** | **79** | No  |
         * | 31 _-x-_ |         | 7 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures
         */
        fontVariantLigatures?: Property.FontVariantLigatures | undefined;
        /**
         * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.
         *
         * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **52** | **34**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric
         */
        fontVariantNumeric?: Property.FontVariantNumeric | undefined;
        /**
         * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.
         *
         * **Syntax**: `normal | sub | super`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  | Edge | IE  |
         * | :----: | :-----: | :-----: | :--: | :-: |
         * |   No   | **34**  | **9.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position
         */
        fontVariantPosition?: Property.FontVariantPosition | undefined;
        /**
         * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.
         *
         * **Syntax**: `normal | [ <string> <number> ]#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **62** | **62**  | **11** | **17** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings
         */
        fontVariationSettings?: Property.FontVariationSettings | undefined;
        /**
         * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.
         *
         * **Syntax**: `<font-weight-absolute> | bolder | lighter`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **2**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-weight
         */
        fontWeight?: Property.FontWeight | undefined;
        /**
         * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.
         *
         * **Syntax**: `auto | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |              Edge               |                 IE                  |
         * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |
         * | **89** |   No    |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |
         * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust
         */
        forcedColorAdjust?: Property.ForcedColorAdjust | undefined;
        /**
         * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.
         *
         * **Syntax**: `<track-size>+`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |             IE              |
         * | :----: | :-----: | :------: | :----: | :-------------------------: |
         * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns
         */
        gridAutoColumns?: Property.GridAutoColumns<TLength> | undefined;
        /**
         * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.
         *
         * **Syntax**: `[ row | column ] || dense`
         *
         * **Initial value**: `row`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow
         */
        gridAutoFlow?: Property.GridAutoFlow | undefined;
        /**
         * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.
         *
         * **Syntax**: `<track-size>+`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |            IE            |
         * | :----: | :-----: | :------: | :----: | :----------------------: |
         * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows
         */
        gridAutoRows?: Property.GridAutoRows<TLength> | undefined;
        /**
         * The **`grid-column-end`** CSS property specifies a grid item’s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.
         *
         * **Syntax**: `<grid-line>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end
         */
        gridColumnEnd?: Property.GridColumnEnd | undefined;
        /**
         * The **`grid-column-start`** CSS property specifies a grid item’s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.
         *
         * **Syntax**: `<grid-line>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start
         */
        gridColumnStart?: Property.GridColumnStart | undefined;
        /**
         * The **`grid-row-end`** CSS property specifies a grid item’s end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.
         *
         * **Syntax**: `<grid-line>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end
         */
        gridRowEnd?: Property.GridRowEnd | undefined;
        /**
         * The **`grid-row-start`** CSS property specifies a grid item’s start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.
         *
         * **Syntax**: `<grid-line>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start
         */
        gridRowStart?: Property.GridRowStart | undefined;
        /**
         * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.
         *
         * **Syntax**: `none | <string>+`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas
         */
        gridTemplateAreas?: Property.GridTemplateAreas | undefined;
        /**
         * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.
         *
         * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |             IE              |
         * | :----: | :-----: | :------: | :----: | :-------------------------: |
         * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns
         */
        gridTemplateColumns?: Property.GridTemplateColumns<TLength> | undefined;
        /**
         * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.
         *
         * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |            IE            |
         * | :----: | :-----: | :------: | :----: | :----------------------: |
         * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows
         */
        gridTemplateRows?: Property.GridTemplateRows<TLength> | undefined;
        /**
         * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.
         *
         * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   |   No    | **10** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation
         */
        hangingPunctuation?: Property.HangingPunctuation | undefined;
        /**
         * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.
         *
         * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/height
         */
        height?: Property.Height<TLength> | undefined;
        /**
         * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
         *
         * **Syntax**: `none | manual | auto`
         *
         * **Initial value**: `manual`
         *
         * |  Chrome  | Firefox |    Safari     |  Edge  |      IE      |
         * | :------: | :-----: | :-----------: | :----: | :----------: |
         * |  **55**  | **43**  | **5.1** _-x-_ | **79** | **10** _-x-_ |
         * | 13 _-x-_ | 6 _-x-_ |               |        |              |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/hyphens
         */
        hyphens?: Property.Hyphens | undefined;
        /**
         * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image. It should _not_ be used for any other orientation adjustments; instead, the `transform` property should be used with the `rotate` `<transform-function>`.
         *
         * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`
         *
         * **Initial value**: `from-image`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **81** | **26**  | **13.1** | **81** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation
         */
        imageOrientation?: Property.ImageOrientation | undefined;
        /**
         * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.
         *
         * **Syntax**: `auto | crisp-edges | pixelated`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **13** | **3.6** | **6**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering
         */
        imageRendering?: Property.ImageRendering | undefined;
        /**
         * **Syntax**: `[ from-image || <resolution> ] && snap?`
         *
         * **Initial value**: `1dppx`
         */
        imageResolution?: Property.ImageResolution | undefined;
        /**
         * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.
         *
         * **Syntax**: `normal | [ <number> <integer>? ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox |   Safari    | Edge | IE  |
         * | :----: | :-----: | :---------: | :--: | :-: |
         * |   No   |   No    | **9** _-x-_ |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter
         */
        initialLetter?: Property.InitialLetter | undefined;
        /**
         * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'width'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inline-size
         */
        inlineSize?: Property.InlineSize<TLength> | undefined;
        /**
         * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.
         *
         * **Syntax**: `<'top'>{1,4}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset
         */
        inset?: Property.Inset<TLength> | undefined;
        /**
         * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-block
         */
        insetBlock?: Property.InsetBlock<TLength> | undefined;
        /**
         * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end
         */
        insetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;
        /**
         * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start
         */
        insetBlockStart?: Property.InsetBlockStart<TLength> | undefined;
        /**
         * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline
         */
        insetInline?: Property.InsetInline<TLength> | undefined;
        /**
         * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end
         */
        insetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;
        /**
         * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start
         */
        insetInlineStart?: Property.InsetInlineStart<TLength> | undefined;
        /**
         * The **`isolation`** CSS property determines whether an element must create a new stacking context.
         *
         * **Syntax**: `auto | isolate`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **41** | **36**  | **8**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/isolation
         */
        isolation?: Property.Isolation | undefined;
        /**
         * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.
         *
         * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :------: | :-----: | :-------: | :----: | :----: |
         * |  **52**  | **20**  |   **9**   | **12** | **11** |
         * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/justify-content
         */
        justifyContent?: Property.JustifyContent | undefined;
        /**
         * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.
         *
         * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`
         *
         * **Initial value**: `legacy`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **52** | **20**  | **9**  | **12** | **11** |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **45**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/justify-items
         */
        justifyItems?: Property.JustifyItems | undefined;
        /**
         * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **45**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  |      IE      |
         * | :----: | :-----: | :------: | :----: | :----------: |
         * | **57** | **45**  | **10.1** | **16** | **10** _-x-_ |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/justify-self
         */
        justifySelf?: Property.JustifySelf | undefined;
        /**
         * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.
         *
         * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   |   n/a   |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks
         */
        justifyTracks?: Property.JustifyTracks | undefined;
        /**
         * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/left
         */
        left?: Property.Left<TLength> | undefined;
        /**
         * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.
         *
         * **Syntax**: `normal | <length>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing
         */
        letterSpacing?: Property.LetterSpacing<TLength> | undefined;
        /**
         * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
         *
         * **Syntax**: `auto | loose | normal | strict | anywhere`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE    |
         * | :-----: | :-----: | :-----: | :----: | :-----: |
         * | **58**  | **69**  | **11**  | **14** | **5.5** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |         |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/line-break
         */
        lineBreak?: Property.LineBreak | undefined;
        /**
         * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.
         *
         * **Syntax**: `normal | <number> | <length> | <percentage>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/line-height
         */
        lineHeight?: Property.LineHeight<TLength> | undefined;
        /**
         * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |  n/a   |   No    |   No   | n/a  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step
         */
        lineHeightStep?: Property.LineHeightStep<TLength> | undefined;
        /**
         * The **`list-style-image`** CSS property sets an image to be used as the list item marker.
         *
         * **Syntax**: `<image> | none`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image
         */
        listStyleImage?: Property.ListStyleImage | undefined;
        /**
         * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.
         *
         * **Syntax**: `inside | outside`
         *
         * **Initial value**: `outside`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position
         */
        listStylePosition?: Property.ListStylePosition | undefined;
        /**
         * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.
         *
         * **Syntax**: `<counter-style> | <string> | none`
         *
         * **Initial value**: `disc`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type
         */
        listStyleType?: Property.ListStyleType | undefined;
        /**
         * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'margin-left'>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-block
         */
        marginBlock?: Property.MarginBlock<TLength> | undefined;
        /**
         * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end
         */
        marginBlockEnd?: Property.MarginBlockEnd<TLength> | undefined;
        /**
         * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start
         */
        marginBlockStart?: Property.MarginBlockStart<TLength> | undefined;
        /**
         * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom
         */
        marginBottom?: Property.MarginBottom<TLength> | undefined;
        /**
         * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'margin-left'>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline
         */
        marginInline?: Property.MarginInline<TLength> | undefined;
        /**
         * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         *
         * |          Chrome          |        Firefox        |          Safari          |  Edge  | IE  |
         * | :----------------------: | :-------------------: | :----------------------: | :----: | :-: |
         * |          **69**          |        **41**         |         **12.1**         | **79** | No  |
         * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end
         */
        marginInlineEnd?: Property.MarginInlineEnd<TLength> | undefined;
        /**
         * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         *
         * |           Chrome           |         Firefox         |           Safari           |  Edge  | IE  |
         * | :------------------------: | :---------------------: | :------------------------: | :----: | :-: |
         * |           **69**           |         **41**          |          **12.1**          | **79** | No  |
         * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start
         */
        marginInlineStart?: Property.MarginInlineStart<TLength> | undefined;
        /**
         * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-left
         */
        marginLeft?: Property.MarginLeft<TLength> | undefined;
        /**
         * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-right
         */
        marginRight?: Property.MarginRight<TLength> | undefined;
        /**
         * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-top
         */
        marginTop?: Property.MarginTop<TLength> | undefined;
        /**
         * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.
         *
         * **Syntax**: `luminance | alpha`
         *
         * **Initial value**: `alpha`
         */
        maskBorderMode?: Property.MaskBorderMode | undefined;
        /**
         * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.
         *
         * **Syntax**: `[ <length> | <number> ]{1,4}`
         *
         * **Initial value**: `0`
         *
         * |                 Chrome                  | Firefox |                  Safari                   |                   Edge                   | IE  |
         * | :-------------------------------------: | :-----: | :---------------------------------------: | :--------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-outset)_ |   No    | **3.1** _(-webkit-mask-box-image-outset)_ | **79** _(-webkit-mask-box-image-outset)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset
         */
        maskBorderOutset?: Property.MaskBorderOutset<TLength> | undefined;
        /**
         * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.
         *
         * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`
         *
         * **Initial value**: `stretch`
         *
         * |                 Chrome                  | Firefox |                  Safari                   |                   Edge                   | IE  |
         * | :-------------------------------------: | :-----: | :---------------------------------------: | :--------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-repeat)_ |   No    | **3.1** _(-webkit-mask-box-image-repeat)_ | **79** _(-webkit-mask-box-image-repeat)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat
         */
        maskBorderRepeat?: Property.MaskBorderRepeat | undefined;
        /**
         * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.
         *
         * **Syntax**: `<number-percentage>{1,4} fill?`
         *
         * **Initial value**: `0`
         *
         * |                 Chrome                 | Firefox |                  Safari                  |                  Edge                   | IE  |
         * | :------------------------------------: | :-----: | :--------------------------------------: | :-------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-slice)_ |   No    | **3.1** _(-webkit-mask-box-image-slice)_ | **79** _(-webkit-mask-box-image-slice)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice
         */
        maskBorderSlice?: Property.MaskBorderSlice | undefined;
        /**
         * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.
         *
         * **Syntax**: `none | <image>`
         *
         * **Initial value**: `none`
         *
         * |                 Chrome                  | Firefox |                  Safari                   |                   Edge                   | IE  |
         * | :-------------------------------------: | :-----: | :---------------------------------------: | :--------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-source)_ |   No    | **3.1** _(-webkit-mask-box-image-source)_ | **79** _(-webkit-mask-box-image-source)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source
         */
        maskBorderSource?: Property.MaskBorderSource | undefined;
        /**
         * The **`mask-border-width`** CSS property sets the width of an element's mask border.
         *
         * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`
         *
         * **Initial value**: `auto`
         *
         * |                 Chrome                 | Firefox |                  Safari                  |                  Edge                   | IE  |
         * | :------------------------------------: | :-----: | :--------------------------------------: | :-------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-width)_ |   No    | **3.1** _(-webkit-mask-box-image-width)_ | **79** _(-webkit-mask-box-image-width)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width
         */
        maskBorderWidth?: Property.MaskBorderWidth<TLength> | undefined;
        /**
         * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.
         *
         * **Syntax**: `[ <geometry-box> | no-clip ]#`
         *
         * **Initial value**: `border-box`
         *
         * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |
         * | :---------: | :-----: | :---------: | :----------: | :-: |
         * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip
         */
        maskClip?: Property.MaskClip | undefined;
        /**
         * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.
         *
         * **Syntax**: `<compositing-operator>#`
         *
         * **Initial value**: `add`
         *
         * | Chrome | Firefox | Safari | Edge  | IE  |
         * | :----: | :-----: | :----: | :---: | :-: |
         * |   No   | **53**  |   No   | 18-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite
         */
        maskComposite?: Property.MaskComposite | undefined;
        /**
         * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.
         *
         * **Syntax**: `<mask-reference>#`
         *
         * **Initial value**: `none`
         *
         * |   Chrome    | Firefox |   Safari    | Edge  | IE  |
         * | :---------: | :-----: | :---------: | :---: | :-: |
         * | **1** _-x-_ | **53**  | **4** _-x-_ | 16-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-image
         */
        maskImage?: Property.MaskImage | undefined;
        /**
         * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.
         *
         * **Syntax**: `<masking-mode>#`
         *
         * **Initial value**: `match-source`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **53**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode
         */
        maskMode?: Property.MaskMode | undefined;
        /**
         * The **`mask-origin`** CSS property sets the origin of a mask.
         *
         * **Syntax**: `<geometry-box>#`
         *
         * **Initial value**: `border-box`
         *
         * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |
         * | :---------: | :-----: | :---------: | :----------: | :-: |
         * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin
         */
        maskOrigin?: Property.MaskOrigin | undefined;
        /**
         * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.
         *
         * **Syntax**: `<position>#`
         *
         * **Initial value**: `center`
         *
         * |   Chrome    | Firefox |    Safari     | Edge  | IE  |
         * | :---------: | :-----: | :-----------: | :---: | :-: |
         * | **1** _-x-_ | **53**  | **3.1** _-x-_ | 18-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-position
         */
        maskPosition?: Property.MaskPosition<TLength> | undefined;
        /**
         * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.
         *
         * **Syntax**: `<repeat-style>#`
         *
         * **Initial value**: `no-repeat`
         *
         * |   Chrome    | Firefox |    Safari     | Edge  | IE  |
         * | :---------: | :-----: | :-----------: | :---: | :-: |
         * | **1** _-x-_ | **53**  | **3.1** _-x-_ | 18-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat
         */
        maskRepeat?: Property.MaskRepeat | undefined;
        /**
         * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto`
         *
         * |   Chrome    | Firefox |   Safari    | Edge  | IE  |
         * | :---------: | :-----: | :---------: | :---: | :-: |
         * | **4** _-x-_ | **53**  | **4** _-x-_ | 18-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-size
         */
        maskSize?: Property.MaskSize<TLength> | undefined;
        /**
         * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.
         *
         * **Syntax**: `luminance | alpha`
         *
         * **Initial value**: `luminance`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **24** | **35**  | **7**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-type
         */
        maskType?: Property.MaskType | undefined;
        /**
         * The `math-style` property indicates whether MathML equations should render with normal or compact height.
         *
         * **Syntax**: `normal | compact`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * |  n/a   |   n/a   | **14.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/math-style
         */
        mathStyle?: Property.MathStyle | undefined;
        /**
         * The `**max-block-size**` CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.
         *
         * **Syntax**: `<'max-width'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size
         */
        maxBlockSize?: Property.MaxBlockSize<TLength> | undefined;
        /**
         * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.
         *
         * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **18** |  **1**  | **1.3** | **12** | **7** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/max-height
         */
        maxHeight?: Property.MaxHeight<TLength> | undefined;
        /**
         * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'max-width'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |   Safari   |  Edge  | IE  |
         * | :----: | :-----: | :--------: | :----: | :-: |
         * | **57** | **41**  |  **12.1**  | **79** | No  |
         * |        |         | 10.1 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size
         */
        maxInlineSize?: Property.MaxInlineSize<TLength> | undefined;
        /**
         * **Syntax**: `none | <integer>`
         *
         * **Initial value**: `none`
         */
        maxLines?: Property.MaxLines | undefined;
        /**
         * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.
         *
         * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **7** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/max-width
         */
        maxWidth?: Property.MaxWidth<TLength> | undefined;
        /**
         * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'min-width'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size
         */
        minBlockSize?: Property.MinBlockSize<TLength> | undefined;
        /**
         * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.
         *
         * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **3**  | **1.3** | **12** | **7** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/min-height
         */
        minHeight?: Property.MinHeight<TLength> | undefined;
        /**
         * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'min-width'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size
         */
        minInlineSize?: Property.MinInlineSize<TLength> | undefined;
        /**
         * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.
         *
         * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **7** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/min-width
         */
        minWidth?: Property.MinWidth<TLength> | undefined;
        /**
         * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.
         *
         * **Syntax**: `<blend-mode>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **41** | **32**  | **8**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode
         */
        mixBlendMode?: Property.MixBlendMode | undefined;
        /**
         * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **55**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-distance)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance
         */
        motionDistance?: Property.OffsetDistance<TLength> | undefined;
        /**
         * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.
         *
         * **Syntax**: `none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`
         *
         * **Initial value**: `none`
         *
         * |       Chrome       | Firefox | Safari |  Edge  | IE  |
         * | :----------------: | :-----: | :----: | :----: | :-: |
         * |       **55**       | **72**  |   No   | **79** | No  |
         * | 46 _(motion-path)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-path
         */
        motionPath?: Property.OffsetPath | undefined;
        /**
         * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.
         *
         * **Syntax**: `[ auto | reverse ] || <angle>`
         *
         * **Initial value**: `auto`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **56**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-rotation)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
         */
        motionRotation?: Property.OffsetRotate | undefined;
        /**
         * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.
         *
         * **Syntax**: `fill | contain | cover | none | scale-down`
         *
         * **Initial value**: `fill`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **32** | **36**  | **10** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/object-fit
         */
        objectFit?: Property.ObjectFit | undefined;
        /**
         * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **32** | **36**  | **10** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/object-position
         */
        objectPosition?: Property.ObjectPosition<TLength> | undefined;
        /**
         * **Syntax**: `auto | <position>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **79** | **72**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor
         */
        offsetAnchor?: Property.OffsetAnchor<TLength> | undefined;
        /**
         * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **55**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-distance)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance
         */
        offsetDistance?: Property.OffsetDistance<TLength> | undefined;
        /**
         * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.
         *
         * **Syntax**: `none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`
         *
         * **Initial value**: `none`
         *
         * |       Chrome       | Firefox | Safari |  Edge  | IE  |
         * | :----------------: | :-----: | :----: | :----: | :-: |
         * |       **55**       | **72**  |   No   | **79** | No  |
         * | 46 _(motion-path)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-path
         */
        offsetPath?: Property.OffsetPath | undefined;
        /**
         * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.
         *
         * **Syntax**: `[ auto | reverse ] || <angle>`
         *
         * **Initial value**: `auto`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **56**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-rotation)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
         */
        offsetRotate?: Property.OffsetRotate | undefined;
        /**
         * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.
         *
         * **Syntax**: `[ auto | reverse ] || <angle>`
         *
         * **Initial value**: `auto`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **56**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-rotation)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
         */
        offsetRotation?: Property.OffsetRotate | undefined;
        /**
         * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.
         *
         * **Syntax**: `<alpha-value>`
         *
         * **Initial value**: `1.0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **2**  | **12** | **9** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/opacity
         */
        opacity?: Property.Opacity | undefined;
        /**
         * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `0`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |
         * | :------: | :-----: | :-----: | :----: | :------: |
         * |  **29**  | **20**  |  **9**  | **12** |  **11**  |
         * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/order
         */
        order?: Property.Order | undefined;
        /**
         * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `2`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **25** |   No    | **1.3** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/orphans
         */
        orphans?: Property.Orphans | undefined;
        /**
         * The **`outline-color`** CSS property sets the color of an element's outline.
         *
         * **Syntax**: `<color> | invert`
         *
         * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **1.5** | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline-color
         */
        outlineColor?: Property.OutlineColor | undefined;
        /**
         * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **1**  | **1.5** | **1.2** | **15** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset
         */
        outlineOffset?: Property.OutlineOffset<TLength> | undefined;
        /**
         * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
         *
         * **Syntax**: `auto | <'border-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **1.5** | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline-style
         */
        outlineStyle?: Property.OutlineStyle | undefined;
        /**
         * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **1.5** | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline-width
         */
        outlineWidth?: Property.OutlineWidth<TLength> | undefined;
        /**
         * **Syntax**: `auto | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **56** | **66**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor
         */
        overflowAnchor?: Property.OverflowAnchor | undefined;
        /**
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **69**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block
         */
        overflowBlock?: Property.OverflowBlock | undefined;
        /**
         * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.
         *
         * **Syntax**: `padding-box | content-box`
         *
         * **Initial value**: `padding-box`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **29**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Mozilla/Gecko/Chrome/CSS/overflow-clip-box
         */
        overflowClipBox?: Property.OverflowClipBox | undefined;
        /**
         * **Syntax**: `<visual-box> || <length [0,∞]>`
         *
         * **Initial value**: `0px`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **90** |   No    |   No   | **90** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin
         */
        overflowClipMargin?: Property.OverflowClipMargin<TLength> | undefined;
        /**
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **69**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline
         */
        overflowInline?: Property.OverflowInline | undefined;
        /**
         * The `**overflow-wrap**` CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.
         *
         * **Syntax**: `normal | break-word | anywhere`
         *
         * **Initial value**: `normal`
         *
         * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |
         * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |
         * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |
         * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap
         */
        overflowWrap?: Property.OverflowWrap | undefined;
        /**
         * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.
         *
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  | **3.5** | **3**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x
         */
        overflowX?: Property.OverflowX | undefined;
        /**
         * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.
         *
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  | **3.5** | **3**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y
         */
        overflowY?: Property.OverflowY | undefined;
        /**
         * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.
         *
         * **Syntax**: `contain | none | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **77** | **73**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block
         */
        overscrollBehaviorBlock?: Property.OverscrollBehaviorBlock | undefined;
        /**
         * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.
         *
         * **Syntax**: `contain | none | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **77** | **73**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline
         */
        overscrollBehaviorInline?: Property.OverscrollBehaviorInline | undefined;
        /**
         * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.
         *
         * **Syntax**: `contain | none | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **63** | **59**  |   No   | **18** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x
         */
        overscrollBehaviorX?: Property.OverscrollBehaviorX | undefined;
        /**
         * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.
         *
         * **Syntax**: `contain | none | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **63** | **59**  |   No   | **18** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y
         */
        overscrollBehaviorY?: Property.OverscrollBehaviorY | undefined;
        /**
         * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-block
         */
        paddingBlock?: Property.PaddingBlock<TLength> | undefined;
        /**
         * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end
         */
        paddingBlockEnd?: Property.PaddingBlockEnd<TLength> | undefined;
        /**
         * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start
         */
        paddingBlockStart?: Property.PaddingBlockStart<TLength> | undefined;
        /**
         * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.
         *
         * **Syntax**: `<length> | <percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom
         */
        paddingBottom?: Property.PaddingBottom<TLength> | undefined;
        /**
         * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline
         */
        paddingInline?: Property.PaddingInline<TLength> | undefined;
        /**
         * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         *
         * |          Chrome           |        Firefox         |          Safari           |  Edge  | IE  |
         * | :-----------------------: | :--------------------: | :-----------------------: | :----: | :-: |
         * |          **69**           |         **41**         |         **12.1**          | **79** | No  |
         * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end
         */
        paddingInlineEnd?: Property.PaddingInlineEnd<TLength> | undefined;
        /**
         * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         *
         * |           Chrome            |         Firefox          |           Safari            |  Edge  | IE  |
         * | :-------------------------: | :----------------------: | :-------------------------: | :----: | :-: |
         * |           **69**            |          **41**          |          **12.1**           | **79** | No  |
         * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start
         */
        paddingInlineStart?: Property.PaddingInlineStart<TLength> | undefined;
        /**
         * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.
         *
         * **Syntax**: `<length> | <percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-left
         */
        paddingLeft?: Property.PaddingLeft<TLength> | undefined;
        /**
         * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.
         *
         * **Syntax**: `<length> | <percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-right
         */
        paddingRight?: Property.PaddingRight<TLength> | undefined;
        /**
         * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.
         *
         * **Syntax**: `<length> | <percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-top
         */
        paddingTop?: Property.PaddingTop<TLength> | undefined;
        /**
         * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.
         *
         * **Syntax**: `auto | always | avoid | left | right | recto | verso`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after
         */
        pageBreakAfter?: Property.PageBreakAfter | undefined;
        /**
         * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.
         *
         * **Syntax**: `auto | always | avoid | left | right | recto | verso`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before
         */
        pageBreakBefore?: Property.PageBreakBefore | undefined;
        /**
         * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.
         *
         * **Syntax**: `auto | avoid`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **19**  | **1.3** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside
         */
        pageBreakInside?: Property.PageBreakInside | undefined;
        /**
         * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.
         *
         * **Syntax**: `normal | [ fill || stroke || markers ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **35** | **60**  | **8**  | **17** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/paint-order
         */
        paintOrder?: Property.PaintOrder | undefined;
        /**
         * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.
         *
         * **Syntax**: `none | <length>`
         *
         * **Initial value**: `none`
         *
         * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |
         * | :------: | :------: | :-----: | :----: | :----: |
         * |  **36**  |  **16**  |  **9**  | **12** | **10** |
         * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/perspective
         */
        perspective?: Property.Perspective<TLength> | undefined;
        /**
         * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         *
         * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |
         * | :------: | :------: | :-----: | :----: | :----: |
         * |  **36**  |  **16**  |  **9**  | **12** | **10** |
         * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin
         */
        perspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;
        /**
         * The `**place-content**` CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.
         *
         * **Syntax**: `<'align-content'> <'justify-content'>?`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **59** | **45**  | **9**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/place-content
         */
        placeContent?: Property.PlaceContent | undefined;
        /**
         * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.
         *
         * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **1**  | **1.5** | **4**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events
         */
        pointerEvents?: Property.PointerEvents | undefined;
        /**
         * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.
         *
         * **Syntax**: `static | relative | absolute | sticky | fixed`
         *
         * **Initial value**: `static`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/position
         */
        position?: Property.Position | undefined;
        /**
         * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.
         *
         * **Syntax**: `none | auto | [ <string> <string> ]+`
         *
         * **Initial value**: depends on user agent
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **11** | **1.5** | **9**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/quotes
         */
        quotes?: Property.Quotes | undefined;
        /**
         * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.
         *
         * **Syntax**: `none | both | horizontal | vertical | block | inline`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **1**  |  **4**  | **3**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/resize
         */
        resize?: Property.Resize | undefined;
        /**
         * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/right
         */
        right?: Property.Right<TLength> | undefined;
        /**
         * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.
         *
         * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * |   No   | **72**  | **14.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/rotate
         */
        rotate?: Property.Rotate | undefined;
        /**
         * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.
         *
         * **Syntax**: `normal | <length-percentage>`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **84** | **63**  | **14.1** | **84** | No  |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * |       Chrome        |       Firefox       |        Safari         |  Edge  | IE  |
         * | :-----------------: | :-----------------: | :-------------------: | :----: | :-: |
         * |       **66**        |       **61**        |        **12**         | **16** | No  |
         * | 57 _(grid-row-gap)_ | 52 _(grid-row-gap)_ | 10.1 _(grid-row-gap)_ |        |     |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/row-gap
         */
        rowGap?: Property.RowGap<TLength> | undefined;
        /**
         * The `**ruby-align**` CSS property defines the distribution of the different ruby elements over the base.
         *
         * **Syntax**: `start | center | space-between | space-around`
         *
         * **Initial value**: `space-around`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **38**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align
         */
        rubyAlign?: Property.RubyAlign | undefined;
        /**
         * **Syntax**: `separate | collapse | auto`
         *
         * **Initial value**: `separate`
         */
        rubyMerge?: Property.RubyMerge | undefined;
        /**
         * The `**ruby-position**` CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (`over`), under it (`under`), or between the characters, on their right side (`inter-character`).
         *
         * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`
         *
         * **Initial value**: `alternate`
         *
         * | Chrome  | Firefox |    Safari     | Edge  | IE  |
         * | :-----: | :-----: | :-----------: | :---: | :-: |
         * | **84**  | **38**  | **6.1** _-x-_ | 12-79 | No  |
         * | 1 _-x-_ |         |               |       |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position
         */
        rubyPosition?: Property.RubyPosition | undefined;
        /**
         * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.
         *
         * **Syntax**: `none | <number>{1,3}`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * |   No   | **72**  | **14.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scale
         */
        scale?: Property.Scale | undefined;
        /**
         * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.
         *
         * **Syntax**: `auto | smooth`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **61** | **36**  |  n/a   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior
         */
        scrollBehavior?: Property.ScrollBehavior | undefined;
        /**
         * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.
         *
         * **Syntax**: `<length>{1,4}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |          Safari           |  Edge  | IE  |
         * | :----: | :-----: | :-----------------------: | :----: | :-: |
         * | **69** | **90**  |         **14.1**          | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin
         */
        scrollMargin?: Property.ScrollMargin<TLength> | undefined;
        /**
         * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.
         *
         * **Syntax**: `<length>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block
         */
        scrollMarginBlock?: Property.ScrollMarginBlock<TLength> | undefined;
        /**
         * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end
         */
        scrollMarginBlockEnd?: Property.ScrollMarginBlockEnd<TLength> | undefined;
        /**
         * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start
         */
        scrollMarginBlockStart?: Property.ScrollMarginBlockStart<TLength> | undefined;
        /**
         * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |              Safari              |  Edge  | IE  |
         * | :----: | :-----: | :------------------------------: | :----: | :-: |
         * | **69** | **68**  |             **14.1**             | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-bottom)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom
         */
        scrollMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;
        /**
         * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.
         *
         * **Syntax**: `<length>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline
         */
        scrollMarginInline?: Property.ScrollMarginInline<TLength> | undefined;
        /**
         * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end
         */
        scrollMarginInlineEnd?: Property.ScrollMarginInlineEnd<TLength> | undefined;
        /**
         * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start
         */
        scrollMarginInlineStart?: Property.ScrollMarginInlineStart<TLength> | undefined;
        /**
         * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |             Safari             |  Edge  | IE  |
         * | :----: | :-----: | :----------------------------: | :----: | :-: |
         * | **69** | **68**  |            **14.1**            | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-left)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left
         */
        scrollMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;
        /**
         * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |             Safari              |  Edge  | IE  |
         * | :----: | :-----: | :-----------------------------: | :----: | :-: |
         * | **69** | **68**  |            **14.1**             | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-right)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right
         */
        scrollMarginRight?: Property.ScrollMarginRight<TLength> | undefined;
        /**
         * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |            Safari             |  Edge  | IE  |
         * | :----: | :-----: | :---------------------------: | :----: | :-: |
         * | **69** | **68**  |           **14.1**            | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-top)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top
         */
        scrollMarginTop?: Property.ScrollMarginTop<TLength> | undefined;
        /**
         * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.
         *
         * **Syntax**: `[ auto | <length-percentage> ]{1,4}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding
         */
        scrollPadding?: Property.ScrollPadding<TLength> | undefined;
        /**
         * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.
         *
         * **Syntax**: `[ auto | <length-percentage> ]{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block
         */
        scrollPaddingBlock?: Property.ScrollPaddingBlock<TLength> | undefined;
        /**
         * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end
         */
        scrollPaddingBlockEnd?: Property.ScrollPaddingBlockEnd<TLength> | undefined;
        /**
         * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start
         */
        scrollPaddingBlockStart?: Property.ScrollPaddingBlockStart<TLength> | undefined;
        /**
         * The `scroll-padding-bottom` property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom
         */
        scrollPaddingBottom?: Property.ScrollPaddingBottom<TLength> | undefined;
        /**
         * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.
         *
         * **Syntax**: `[ auto | <length-percentage> ]{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline
         */
        scrollPaddingInline?: Property.ScrollPaddingInline<TLength> | undefined;
        /**
         * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end
         */
        scrollPaddingInlineEnd?: Property.ScrollPaddingInlineEnd<TLength> | undefined;
        /**
         * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start
         */
        scrollPaddingInlineStart?: Property.ScrollPaddingInlineStart<TLength> | undefined;
        /**
         * The `scroll-padding-left` property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left
         */
        scrollPaddingLeft?: Property.ScrollPaddingLeft<TLength> | undefined;
        /**
         * The `scroll-padding-right` property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right
         */
        scrollPaddingRight?: Property.ScrollPaddingRight<TLength> | undefined;
        /**
         * The **`scroll-padding-top`** property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top
         */
        scrollPaddingTop?: Property.ScrollPaddingTop<TLength> | undefined;
        /**
         * The `scroll-snap-align` property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.
         *
         * **Syntax**: `[ none | start | end | center ]{1,2}`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **11** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align
         */
        scrollSnapAlign?: Property.ScrollSnapAlign | undefined;
        /**
         * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.
         *
         * **Syntax**: `<length>{1,4}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |          Safari           |  Edge  | IE  |
         * | :----: | :-----: | :-----------------------: | :----: | :-: |
         * | **69** |  68-90  |         **14.1**          | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin
         */
        scrollSnapMargin?: Property.ScrollMargin<TLength> | undefined;
        /**
         * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |              Safari              |  Edge  | IE  |
         * | :----: | :-----: | :------------------------------: | :----: | :-: |
         * | **69** | **68**  |             **14.1**             | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-bottom)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom
         */
        scrollSnapMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;
        /**
         * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |             Safari             |  Edge  | IE  |
         * | :----: | :-----: | :----------------------------: | :----: | :-: |
         * | **69** | **68**  |            **14.1**            | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-left)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left
         */
        scrollSnapMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;
        /**
         * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |             Safari              |  Edge  | IE  |
         * | :----: | :-----: | :-----------------------------: | :----: | :-: |
         * | **69** | **68**  |            **14.1**             | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-right)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right
         */
        scrollSnapMarginRight?: Property.ScrollMarginRight<TLength> | undefined;
        /**
         * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |            Safari             |  Edge  | IE  |
         * | :----: | :-----: | :---------------------------: | :----: | :-: |
         * | **69** | **68**  |           **14.1**            | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-top)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top
         */
        scrollSnapMarginTop?: Property.ScrollMarginTop<TLength> | undefined;
        /**
         * The **`scroll-snap-stop`** CSS property defines whether the scroll container is allowed to "pass over" possible snap positions.
         *
         * **Syntax**: `normal | always`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **75** |   No    | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop
         */
        scrollSnapStop?: Property.ScrollSnapStop | undefined;
        /**
         * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.
         *
         * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari  |  Edge  |      IE      |
         * | :----: | :-----: | :-----: | :----: | :----------: |
         * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |
         * |        |         | 9 _-x-_ |        |              |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type
         */
        scrollSnapType?: Property.ScrollSnapType | undefined;
        /**
         * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.
         *
         * **Syntax**: `auto | <color>{2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **64**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color
         */
        scrollbarColor?: Property.ScrollbarColor | undefined;
        /**
         * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.
         *
         * **Syntax**: `auto | stable && both-edges?`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **94** |   No    |   No   | **94** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter
         */
        scrollbarGutter?: Property.ScrollbarGutter | undefined;
        /**
         * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element’s scrollbars when they are shown.
         *
         * **Syntax**: `auto | thin | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **64**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width
         */
        scrollbarWidth?: Property.ScrollbarWidth | undefined;
        /**
         * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.
         *
         * **Syntax**: `<alpha-value>`
         *
         * **Initial value**: `0.0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **37** | **62**  | **10.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold
         */
        shapeImageThreshold?: Property.ShapeImageThreshold | undefined;
        /**
         * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **37** | **62**  | **10.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin
         */
        shapeMargin?: Property.ShapeMargin<TLength> | undefined;
        /**
         * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.
         *
         * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **37** | **62**  | **10.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside
         */
        shapeOutside?: Property.ShapeOutside | undefined;
        /**
         * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).
         *
         * **Syntax**: `<integer> | <length>`
         *
         * **Initial value**: `8`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **21** | **91**  | **7**  | **79** | No  |
         * |        | 4 _-x-_ |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/tab-size
         */
        tabSize?: Property.TabSize<TLength> | undefined;
        /**
         * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.
         *
         * **Syntax**: `auto | fixed`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **14** |  **1**  | **1**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/table-layout
         */
        tableLayout?: Property.TableLayout | undefined;
        /**
         * The **`text-align`** CSS property sets the horizontal alignment of a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.
         *
         * **Syntax**: `start | end | left | right | center | justify | match-parent`
         *
         * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-align
         */
        textAlign?: Property.TextAlign | undefined;
        /**
         * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.
         *
         * **Syntax**: `auto | start | end | left | right | center | justify`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **47** | **49**  |   No   | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last
         */
        textAlignLast?: Property.TextAlignLast | undefined;
        /**
         * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
         *
         * **Syntax**: `none | all | [ digits <integer>? ]`
         *
         * **Initial value**: `none`
         *
         * |           Chrome           | Firefox |              Safari              | Edge  |                   IE                   |
         * | :------------------------: | :-----: | :------------------------------: | :---: | :------------------------------------: |
         * |           **48**           | **48**  | **5.1** _(-webkit-text-combine)_ | 15-79 | **11** _(-ms-text-combine-horizontal)_ |
         * | 9 _(-webkit-text-combine)_ |         |                                  |       |                                        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright
         */
        textCombineUpright?: Property.TextCombineUpright | undefined;
        /**
         * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **36**  | **12.1** | **79** | No  |
         * |        |         | 8 _-x-_  |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color
         */
        textDecorationColor?: Property.TextDecorationColor | undefined;
        /**
         * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.
         *
         * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **36**  | **12.1** | **79** | No  |
         * |        |         | 8 _-x-_  |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line
         */
        textDecorationLine?: Property.TextDecorationLine | undefined;
        /**
         * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.
         *
         * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`
         *
         * **Initial value**: `objects`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * | 57-64  |   No    | **12.1** |  No  | No  |
         * |        |         | 7 _-x-_  |      |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip
         */
        textDecorationSkip?: Property.TextDecorationSkip | undefined;
        /**
         * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.
         *
         * **Syntax**: `auto | all | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **64** | **70**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink
         */
        textDecorationSkipInk?: Property.TextDecorationSkipInk | undefined;
        /**
         * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.
         *
         * **Syntax**: `solid | double | dotted | dashed | wavy`
         *
         * **Initial value**: `solid`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **36**  | **12.1** | **79** | No  |
         * |        |         | 8 _-x-_  |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style
         */
        textDecorationStyle?: Property.TextDecorationStyle | undefined;
        /**
         * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.
         *
         * **Syntax**: `auto | from-font | <length> | <percentage> `
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **89** | **70**  | **12.1** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness
         */
        textDecorationThickness?: Property.TextDecorationThickness<TLength> | undefined;
        /**
         * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.
         *
         * **Syntax**: `auto | from-font | <length> | <percentage> `
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  | Edge  | IE  |
         * | :----: | :-----: | :------: | :---: | :-: |
         * | 87-89  | **70**  | **12.1** | 87-89 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness
         */
        textDecorationWidth?: Property.TextDecorationThickness<TLength> | undefined;
        /**
         * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * |    Chrome    | Firefox | Safari |     Edge     | IE  |
         * | :----------: | :-----: | :----: | :----------: | :-: |
         * | **25** _-x-_ | **46**  | **7**  | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color
         */
        textEmphasisColor?: Property.TextEmphasisColor | undefined;
        /**
         * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.
         *
         * **Syntax**: `[ over | under ] && [ right | left ]`
         *
         * **Initial value**: `over right`
         *
         * |    Chrome    | Firefox | Safari |     Edge     | IE  |
         * | :----------: | :-----: | :----: | :----------: | :-: |
         * | **25** _-x-_ | **46**  | **7**  | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position
         */
        textEmphasisPosition?: Property.TextEmphasisPosition | undefined;
        /**
         * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.
         *
         * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`
         *
         * **Initial value**: `none`
         *
         * |    Chrome    | Firefox | Safari |     Edge     | IE  |
         * | :----------: | :-----: | :----: | :----------: | :-: |
         * | **25** _-x-_ | **46**  | **7**  | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style
         */
        textEmphasisStyle?: Property.TextEmphasisStyle | undefined;
        /**
         * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.
         *
         * **Syntax**: `<length-percentage> && hanging? && each-line?`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-indent
         */
        textIndent?: Property.TextIndent<TLength> | undefined;
        /**
         * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.
         *
         * **Syntax**: `auto | inter-character | inter-word | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * |  n/a   | **55**  |   No   | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-justify
         */
        textJustify?: Property.TextJustify | undefined;
        /**
         * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.
         *
         * **Syntax**: `mixed | upright | sideways`
         *
         * **Initial value**: `mixed`
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  | IE  |
         * | :------: | :-----: | :-------: | :----: | :-: |
         * |  **48**  | **41**  |  **14**   | **79** | No  |
         * | 11 _-x-_ |         | 5.1 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation
         */
        textOrientation?: Property.TextOrientation | undefined;
        /**
         * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.
         *
         * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`
         *
         * **Initial value**: `clip`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **7**  | **1.3** | **12** | **6** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow
         */
        textOverflow?: Property.TextOverflow | undefined;
        /**
         * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.
         *
         * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **4**  |  **1**  | **5**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering
         */
        textRendering?: Property.TextRendering | undefined;
        /**
         * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.
         *
         * **Syntax**: `none | <shadow-t>#`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE   |
         * | :----: | :-----: | :-----: | :----: | :----: |
         * | **2**  | **3.5** | **1.1** | **12** | **10** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow
         */
        textShadow?: Property.TextShadow | undefined;
        /**
         * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.
         *
         * **Syntax**: `none | auto | <percentage>`
         *
         * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **54** |   No    |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust
         */
        textSizeAdjust?: Property.TextSizeAdjust | undefined;
        /**
         * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.
         *
         * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-transform
         */
        textTransform?: Property.TextTransform | undefined;
        /**
         * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.
         *
         * **Syntax**: `auto | <length> | <percentage> `
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **70**  | **12.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset
         */
        textUnderlineOffset?: Property.TextUnderlineOffset<TLength> | undefined;
        /**
         * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.
         *
         * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :------: | :----: | :---: |
         * | **33** | **74**  | **12.1** | **12** | **6** |
         * |        |         | 9 _-x-_  |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position
         */
        textUnderlinePosition?: Property.TextUnderlinePosition | undefined;
        /**
         * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/top
         */
        top?: Property.Top<TLength> | undefined;
        /**
         * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).
         *
         * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |    IE    |
         * | :----: | :-----: | :----: | :----: | :------: |
         * | **36** | **52**  | **13** | **12** |  **11**  |
         * |        |         |        |        | 10 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/touch-action
         */
        touchAction?: Property.TouchAction | undefined;
        /**
         * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
         *
         * **Syntax**: `none | <transform-list>`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |
         * | :-----: | :-----: | :-------: | :----: | :-----: |
         * | **36**  | **16**  |   **9**   | **12** | **10**  |
         * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transform
         */
        transform?: Property.Transform | undefined;
        /**
         * The **`transform-box`** CSS property defines the layout box to which the `transform` and `transform-origin` properties relate.
         *
         * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`
         *
         * **Initial value**: `view-box`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **64** | **55**  | **11** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transform-box
         */
        transformBox?: Property.TransformBox | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         *
         * | Chrome  |  Firefox  | Safari  |  Edge  |   IE    |
         * | :-----: | :-------: | :-----: | :----: | :-----: |
         * | **36**  |  **16**   |  **9**  | **12** | **10**  |
         * | 1 _-x-_ | 3.5 _-x-_ | 2 _-x-_ |        | 9 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin
         */
        transformOrigin?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.
         *
         * **Syntax**: `flat | preserve-3d`
         *
         * **Initial value**: `flat`
         *
         * |  Chrome  | Firefox  | Safari  |  Edge  | IE  |
         * | :------: | :------: | :-----: | :----: | :-: |
         * |  **36**  |  **16**  |  **9**  | **12** | No  |
         * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transform-style
         */
        transformStyle?: Property.TransformStyle | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **26**  | **16**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay
         */
        transitionDelay?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **26**  | **16**  |   **9**   | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration
         */
        transitionDuration?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **26**  | **16**  |   **9**   | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition-property
         */
        transitionProperty?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **26**  | **16**  |   **9**   | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function
         */
        transitionTimingFunction?: Property.TransitionTimingFunction | undefined;
        /**
         * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.
         *
         * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * |   No   | **72**  | **14.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/translate
         */
        translate?: Property.Translate<TLength> | undefined;
        /**
         * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.
         *
         * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE    |
         * | :----: | :-----: | :-----: | :----: | :-----: |
         * | **2**  |  **1**  | **1.3** | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi
         */
        unicodeBidi?: Property.UnicodeBidi | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `auto | text | none | contain | all`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |
         * | :-----: | :-----: | :---------: | :------: | :----------: |
         * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |
         * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/user-select
         */
        userSelect?: Property.UserSelect | undefined;
        /**
         * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.
         *
         * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`
         *
         * **Initial value**: `baseline`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align
         */
        verticalAlign?: Property.VerticalAlign<TLength> | undefined;
        /**
         * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.
         *
         * **Syntax**: `visible | hidden | collapse`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/visibility
         */
        visibility?: Property.Visibility | undefined;
        /**
         * The **`white-space`** CSS property sets how white space inside an element is handled.
         *
         * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/white-space
         */
        whiteSpace?: Property.WhiteSpace | undefined;
        /**
         * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `2`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **25** |   No    | **1.3** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/widows
         */
        widows?: Property.Widows | undefined;
        /**
         * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.
         *
         * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/width
         */
        width?: Property.Width<TLength> | undefined;
        /**
         * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.
         *
         * **Syntax**: `auto | <animateable-feature>#`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **36** | **36**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/will-change
         */
        willChange?: Property.WillChange | undefined;
        /**
         * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.
         *
         * **Syntax**: `normal | break-all | keep-all | break-word`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  | **15**  | **3**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/word-break
         */
        wordBreak?: Property.WordBreak | undefined;
        /**
         * The **`word-spacing`** CSS property sets the length of space between words and between tags.
         *
         * **Syntax**: `normal | <length>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **6** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing
         */
        wordSpacing?: Property.WordSpacing<TLength> | undefined;
        /**
         * The `**overflow-wrap**` CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.
         *
         * **Syntax**: `normal | break-word`
         *
         * **Initial value**: `normal`
         */
        wordWrap?: Property.WordWrap | undefined;
        /**
         * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).
         *
         * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`
         *
         * **Initial value**: `horizontal-tb`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |
         * | :-----: | :-----: | :-------: | :----: | :---: |
         * | **48**  | **41**  | **10.1**  | **12** | **9** |
         * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode
         */
        writingMode?: Property.WritingMode | undefined;
        /**
         * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.
         *
         * **Syntax**: `auto | <integer>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/z-index
         */
        zIndex?: Property.ZIndex | undefined;
        /**
         * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.
         *
         * **Syntax**: `normal | reset | <number> | <percentage>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE    |
         * | :----: | :-----: | :-----: | :----: | :-----: |
         * | **1**  |   No    | **3.1** | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/zoom
         */
        zoom?: Property.Zoom | undefined;
    }
    export interface StandardShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * The `**all**` shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another stylesheet origin.
         *
         * **Syntax**: `initial | inherit | unset | revert`
         *
         * **Initial value**: There is no practical initial value for it.
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **37** | **27**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/all
         */
        all?: Property.All | undefined;
        /**
         * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
         *
         * **Syntax**: `<single-animation>#`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation
         */
        animation?: Property.Animation<TTime> | undefined;
        /**
         * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.
         *
         * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background
         */
        background?: Property.Background<TLength> | undefined;
        /**
         * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.
         *
         * **Syntax**: `<bg-position>#`
         *
         * **Initial value**: `0% 0%`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-position
         */
        backgroundPosition?: Property.BackgroundPosition<TLength> | undefined;
        /**
         * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border
         */
        border?: Property.Border<TLength> | undefined;
        /**
         * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block
         */
        borderBlock?: Property.BorderBlock<TLength> | undefined;
        /**
         * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end
         */
        borderBlockEnd?: Property.BorderBlockEnd<TLength> | undefined;
        /**
         * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start
         */
        borderBlockStart?: Property.BorderBlockStart<TLength> | undefined;
        /**
         * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom
         */
        borderBottom?: Property.BorderBottom<TLength> | undefined;
        /**
         * The **`border-color`** shorthand CSS property sets the color of an element's border.
         *
         * **Syntax**: `<color>{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-color
         */
        borderColor?: Property.BorderColor | undefined;
        /**
         * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.
         *
         * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
         *
         * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |
         * | :-----: | :-------: | :-----: | :----: | :----: |
         * | **16**  |  **15**   |  **6**  | **12** | **11** |
         * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image
         */
        borderImage?: Property.BorderImage | undefined;
        /**
         * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline
         */
        borderInline?: Property.BorderInline<TLength> | undefined;
        /**
         * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end
         */
        borderInlineEnd?: Property.BorderInlineEnd<TLength> | undefined;
        /**
         * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start
         */
        borderInlineStart?: Property.BorderInlineStart<TLength> | undefined;
        /**
         * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-left
         */
        borderLeft?: Property.BorderLeft<TLength> | undefined;
        /**
         * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.
         *
         * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-radius
         */
        borderRadius?: Property.BorderRadius<TLength> | undefined;
        /**
         * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-right
         */
        borderRight?: Property.BorderRight<TLength> | undefined;
        /**
         * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.
         *
         * **Syntax**: `<line-style>{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-style
         */
        borderStyle?: Property.BorderStyle | undefined;
        /**
         * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top
         */
        borderTop?: Property.BorderTop<TLength> | undefined;
        /**
         * The **`border-width`** shorthand CSS property sets the width of an element's border.
         *
         * **Syntax**: `<line-width>{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-width
         */
        borderWidth?: Property.BorderWidth<TLength> | undefined;
        /**
         * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-rule
         */
        columnRule?: Property.ColumnRule<TLength> | undefined;
        /**
         * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.
         *
         * **Syntax**: `<'column-width'> || <'column-count'>`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE   |
         * | :----: | :-----: | :-----: | :----: | :----: |
         * | **50** | **52**  |  **9**  | **12** | **10** |
         * |        |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/columns
         */
        columns?: Property.Columns<TLength> | undefined;
        /**
         * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.
         *
         * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |
         * | :------: | :-----: | :-----: | :----: | :------: |
         * |  **29**  | **20**  |  **9**  | **12** |  **11**  |
         * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex
         */
        flex?: Property.Flex<TLength> | undefined;
        /**
         * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.
         *
         * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **29**  | **28**  |  **9**  | **12** | **11** |
         * | 21 _-x-_ |         | 7 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow
         */
        flexFlow?: Property.FlexFlow | undefined;
        /**
         * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.
         *
         * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font
         */
        font?: Property.Font | undefined;
        /**
         * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.
         *
         * **Syntax**: `<'row-gap'> <'column-gap'>?`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **84** | **63**  | **14.1** | **84** | No  |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * |     Chrome      |     Firefox     |      Safari       |  Edge  | IE  |
         * | :-------------: | :-------------: | :---------------: | :----: | :-: |
         * |     **66**      |     **61**      |      **12**       | **16** | No  |
         * | 57 _(grid-gap)_ | 52 _(grid-gap)_ | 10.1 _(grid-gap)_ |        |     |
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **66** | **61**  |   No   | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/gap
         */
        gap?: Property.Gap<TLength> | undefined;
        /**
         * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.
         *
         * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid
         */
        grid?: Property.Grid | undefined;
        /**
         * The **`grid-area`** CSS shorthand property specifies a grid item’s size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.
         *
         * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-area
         */
        gridArea?: Property.GridArea | undefined;
        /**
         * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.
         *
         * **Syntax**: `<grid-line> [ / <grid-line> ]?`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-column
         */
        gridColumn?: Property.GridColumn | undefined;
        /**
         * The **`grid-row`** CSS shorthand property specifies a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.
         *
         * **Syntax**: `<grid-line> [ / <grid-line> ]?`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-row
         */
        gridRow?: Property.GridRow | undefined;
        /**
         * The **`grid-template`** CSS property is a shorthand property for defining grid columns, rows, and areas.
         *
         * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template
         */
        gridTemplate?: Property.GridTemplate | undefined;
        /**
         * **Syntax**: `none | <integer>`
         *
         * **Initial value**: `none`
         */
        lineClamp?: Property.LineClamp | undefined;
        /**
         * The **`list-style`** CSS shorthand property allows you set all the list style properties at once.
         *
         * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/list-style
         */
        listStyle?: Property.ListStyle | undefined;
        /**
         * The **`margin`** CSS property sets the margin area on all four sides of an element. It is a shorthand for `margin-top`, `margin-right`, `margin-bottom`, and `margin-left`.
         *
         * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin
         */
        margin?: Property.Margin<TLength> | undefined;
        /**
         * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.
         *
         * **Syntax**: `<mask-layer>#`
         *
         * | Chrome | Firefox | Safari  | Edge  | IE  |
         * | :----: | :-----: | :-----: | :---: | :-: |
         * | **1**  |  **2**  | **3.1** | 12-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask
         */
        mask?: Property.Mask<TLength> | undefined;
        /**
         * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.
         *
         * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`
         *
         * |              Chrome              | Firefox |               Safari               |               Edge                | IE  |
         * | :------------------------------: | :-----: | :--------------------------------: | :-------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image)_ |   No    | **3.1** _(-webkit-mask-box-image)_ | **79** _(-webkit-mask-box-image)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border
         */
        maskBorder?: Property.MaskBorder | undefined;
        /**
         * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.
         *
         * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`
         *
         * |    Chrome     | Firefox | Safari |  Edge  | IE  |
         * | :-----------: | :-----: | :----: | :----: | :-: |
         * |    **55**     | **72**  |   No   | **79** | No  |
         * | 46 _(motion)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset
         */
        motion?: Property.Offset<TLength> | undefined;
        /**
         * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.
         *
         * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`
         *
         * |    Chrome     | Firefox | Safari |  Edge  | IE  |
         * | :-----------: | :-----: | :----: | :----: | :-: |
         * |    **55**     | **72**  |   No   | **79** | No  |
         * | 46 _(motion)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset
         */
        offset?: Property.Offset<TLength> | undefined;
        /**
         * The **`outline`** CSS shorthand property set all the outline properties in a single declaration.
         *
         * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **1.5** | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline
         */
        outline?: Property.Outline<TLength> | undefined;
        /**
         * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.
         *
         * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow
         */
        overflow?: Property.Overflow | undefined;
        /**
         * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.
         *
         * **Syntax**: `[ contain | none | auto ]{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **63** | **59**  |   No   | **18** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior
         */
        overscrollBehavior?: Property.OverscrollBehavior | undefined;
        /**
         * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.
         *
         * **Syntax**: `[ <length> | <percentage> ]{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding
         */
        padding?: Property.Padding<TLength> | undefined;
        /**
         * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.
         *
         * **Syntax**: `<'align-items'> <'justify-items'>?`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **59** | **45**  | **11** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/place-items
         */
        placeItems?: Property.PlaceItems | undefined;
        /**
         * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.
         *
         * **Syntax**: `<'align-self'> <'justify-self'>?`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **59** | **45**  | **11** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/place-self
         */
        placeSelf?: Property.PlaceSelf | undefined;
        /**
         * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.
         *
         * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration
         */
        textDecoration?: Property.TextDecoration<TLength> | undefined;
        /**
         * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.
         *
         * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`
         *
         * |    Chrome    | Firefox | Safari |     Edge     | IE  |
         * | :----------: | :-----: | :----: | :----------: | :-: |
         * | **25** _-x-_ | **46**  | **7**  | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis
         */
        textEmphasis?: Property.TextEmphasis | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **26**  | **16**  |   **9**   | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition
         */
        transition?: Property.Transition<TTime> | undefined;
    }
    export interface StandardProperties<TLength = (string & {}) | 0, TTime = string & {}> extends StandardLonghandProperties<TLength, TTime>, StandardShorthandProperties<TLength, TTime> {
    }
    export interface VendorLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        MozAnimationDelay?: Property.AnimationDelay<TTime> | undefined;
        /**
         * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
         *
         * **Syntax**: `<single-animation-direction>#`
         *
         * **Initial value**: `normal`
         */
        MozAnimationDirection?: Property.AnimationDirection | undefined;
        /**
         * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        MozAnimationDuration?: Property.AnimationDuration<TTime> | undefined;
        /**
         * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
         *
         * **Syntax**: `<single-animation-fill-mode>#`
         *
         * **Initial value**: `none`
         */
        MozAnimationFillMode?: Property.AnimationFillMode | undefined;
        /**
         * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.
         *
         * **Syntax**: `<single-animation-iteration-count>#`
         *
         * **Initial value**: `1`
         */
        MozAnimationIterationCount?: Property.AnimationIterationCount | undefined;
        /**
         * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules describing the animation or animations to apply to the element.
         *
         * **Syntax**: `[ none | <keyframes-name> ]#`
         *
         * **Initial value**: `none`
         */
        MozAnimationName?: Property.AnimationName | undefined;
        /**
         * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
         *
         * **Syntax**: `<single-animation-play-state>#`
         *
         * **Initial value**: `running`
         */
        MozAnimationPlayState?: Property.AnimationPlayState | undefined;
        /**
         * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        MozAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;
        /**
         * The `**appearance**` CSS property is used to display an element using platform-native styling, based on the operating system's theme. The **`-moz-appearance`** and **`-webkit-appearance`** properties are non-standard versions of this property, used (respectively) by Gecko (Firefox) and by WebKit-based (e.g., Safari) and Blink-based (e.g., Chrome, Opera) browsers to achieve the same thing. Note that Firefox and Edge also support **`-webkit-appearance`**, for compatibility reasons.
         *
         * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`
         *
         * **Initial value**: `none` (but this value is overridden in the user agent CSS)
         */
        MozAppearance?: Property.MozAppearance | undefined;
        /**
         * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
         *
         * **Syntax**: `visible | hidden`
         *
         * **Initial value**: `visible`
         */
        MozBackfaceVisibility?: Property.BackfaceVisibility | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.
         *
         * **Syntax**: `<color>+ | none`
         *
         * **Initial value**: `none`
         */
        MozBorderBottomColors?: Property.MozBorderBottomColors | undefined;
        /**
         * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         */
        MozBorderEndColor?: Property.BorderInlineEndColor | undefined;
        /**
         * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         */
        MozBorderEndStyle?: Property.BorderInlineEndStyle | undefined;
        /**
         * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         */
        MozBorderEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.
         *
         * **Syntax**: `<color>+ | none`
         *
         * **Initial value**: `none`
         */
        MozBorderLeftColors?: Property.MozBorderLeftColors | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.
         *
         * **Syntax**: `<color>+ | none`
         *
         * **Initial value**: `none`
         */
        MozBorderRightColors?: Property.MozBorderRightColors | undefined;
        /**
         * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         */
        MozBorderStartColor?: Property.BorderInlineStartColor | undefined;
        /**
         * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         */
        MozBorderStartStyle?: Property.BorderInlineStartStyle | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.
         *
         * **Syntax**: `<color>+ | none`
         *
         * **Initial value**: `none`
         */
        MozBorderTopColors?: Property.MozBorderTopColors | undefined;
        /**
         * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.
         *
         * **Syntax**: `content-box | border-box`
         *
         * **Initial value**: `content-box`
         */
        MozBoxSizing?: Property.BoxSizing | undefined;
        /**
         * The **`column-count`** CSS property breaks an element's content into the specified number of columns.
         *
         * **Syntax**: `<integer> | auto`
         *
         * **Initial value**: `auto`
         */
        MozColumnCount?: Property.ColumnCount | undefined;
        /**
         * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.
         *
         * **Syntax**: `auto | balance | balance-all`
         *
         * **Initial value**: `balance`
         */
        MozColumnFill?: Property.ColumnFill | undefined;
        /**
         * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
         *
         * **Syntax**: `normal | <length-percentage>`
         *
         * **Initial value**: `normal`
         */
        MozColumnGap?: Property.ColumnGap<TLength> | undefined;
        /**
         * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        MozColumnRuleColor?: Property.ColumnRuleColor | undefined;
        /**
         * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-style'>`
         *
         * **Initial value**: `none`
         */
        MozColumnRuleStyle?: Property.ColumnRuleStyle | undefined;
        /**
         * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-width'>`
         *
         * **Initial value**: `medium`
         */
        MozColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;
        /**
         * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
         *
         * **Syntax**: `<length> | auto`
         *
         * **Initial value**: `auto`
         */
        MozColumnWidth?: Property.ColumnWidth<TLength> | undefined;
        /**
         * The `**-moz-context-properties**` property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.
         *
         * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`
         *
         * **Initial value**: `none`
         */
        MozContextProperties?: Property.MozContextProperties | undefined;
        /**
         * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.
         *
         * **Syntax**: `normal | <feature-tag-value>#`
         *
         * **Initial value**: `normal`
         */
        MozFontFeatureSettings?: Property.FontFeatureSettings | undefined;
        /**
         * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.
         *
         * **Syntax**: `normal | <string>`
         *
         * **Initial value**: `normal`
         */
        MozFontLanguageOverride?: Property.FontLanguageOverride | undefined;
        /**
         * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
         *
         * **Syntax**: `none | manual | auto`
         *
         * **Initial value**: `manual`
         */
        MozHyphens?: Property.Hyphens | undefined;
        /**
         * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.
         *
         * **Syntax**: `<shape> | auto`
         *
         * **Initial value**: `auto`
         */
        MozImageRegion?: Property.MozImageRegion | undefined;
        /**
         * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         */
        MozMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;
        /**
         * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         */
        MozMarginStart?: Property.MarginInlineStart<TLength> | undefined;
        /**
         * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.
         *
         * **Syntax**: `inline | block | horizontal | vertical`
         *
         * **Initial value**: `inline`
         */
        MozOrient?: Property.MozOrient | undefined;
        /**
         * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.
         *
         * **Syntax**: `auto | never | always | <absolute-size> | <length>`
         *
         * **Initial value**: `auto`
         */
        MozOsxFontSmoothing?: Property.FontSmooth<TLength> | undefined;
        /**
         * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         */
        MozPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;
        /**
         * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         */
        MozPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;
        /**
         * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.
         *
         * **Syntax**: `none | <length>`
         *
         * **Initial value**: `none`
         */
        MozPerspective?: Property.Perspective<TLength> | undefined;
        /**
         * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         */
        MozPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;
        /**
         * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.
         *
         * **Syntax**: `ignore | stretch-to-fit`
         *
         * **Initial value**: `stretch-to-fit`
         */
        MozStackSizing?: Property.MozStackSizing | undefined;
        /**
         * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).
         *
         * **Syntax**: `<integer> | <length>`
         *
         * **Initial value**: `8`
         */
        MozTabSize?: Property.TabSize<TLength> | undefined;
        /**
         * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.
         *
         * **Syntax**: `none | blink`
         *
         * **Initial value**: `none`
         */
        MozTextBlink?: Property.MozTextBlink | undefined;
        /**
         * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.
         *
         * **Syntax**: `none | auto | <percentage>`
         *
         * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).
         */
        MozTextSizeAdjust?: Property.TextSizeAdjust | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         */
        MozTransformOrigin?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.
         *
         * **Syntax**: `flat | preserve-3d`
         *
         * **Initial value**: `flat`
         */
        MozTransformStyle?: Property.TransformStyle | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        MozTransitionDelay?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        MozTransitionDuration?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         */
        MozTransitionProperty?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        MozTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;
        /**
         * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.
         *
         * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`
         *
         * **Initial value**: `none`
         */
        MozUserFocus?: Property.MozUserFocus | undefined;
        /**
         * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.
         *
         * **Syntax**: `read-only | read-write | write-only`
         *
         * **Initial value**: `read-only`
         */
        MozUserModify?: Property.MozUserModify | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `auto | text | none | contain | all`
         *
         * **Initial value**: `auto`
         */
        MozUserSelect?: Property.UserSelect | undefined;
        /**
         * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.
         *
         * **Syntax**: `drag | no-drag`
         *
         * **Initial value**: `drag`
         */
        MozWindowDragging?: Property.MozWindowDragging | undefined;
        /**
         * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.
         *
         * **Syntax**: `default | menu | tooltip | sheet | none`
         *
         * **Initial value**: `default`
         */
        MozWindowShadow?: Property.MozWindowShadow | undefined;
        /**
         * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.
         *
         * **Syntax**: `false | true`
         *
         * **Initial value**: `false`
         */
        msAccelerator?: Property.MsAccelerator | undefined;
        /**
         * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
         *
         * **Initial value**: `auto`
         */
        msAlignSelf?: Property.AlignSelf | undefined;
        /**
         * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.
         *
         * **Syntax**: `tb | rl | bt | lr`
         *
         * **Initial value**: `tb`
         */
        msBlockProgression?: Property.MsBlockProgression | undefined;
        /**
         * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.
         *
         * **Syntax**: `none | chained`
         *
         * **Initial value**: `none`
         */
        msContentZoomChaining?: Property.MsContentZoomChaining | undefined;
        /**
         * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.
         *
         * **Syntax**: `<percentage>`
         *
         * **Initial value**: `400%`
         */
        msContentZoomLimitMax?: Property.MsContentZoomLimitMax | undefined;
        /**
         * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.
         *
         * **Syntax**: `<percentage>`
         *
         * **Initial value**: `100%`
         */
        msContentZoomLimitMin?: Property.MsContentZoomLimitMin | undefined;
        /**
         * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.
         *
         * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`
         *
         * **Initial value**: `snapInterval(0%, 100%)`
         */
        msContentZoomSnapPoints?: Property.MsContentZoomSnapPoints | undefined;
        /**
         * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.
         *
         * **Syntax**: `none | proximity | mandatory`
         *
         * **Initial value**: `none`
         */
        msContentZoomSnapType?: Property.MsContentZoomSnapType | undefined;
        /**
         * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.
         *
         * **Syntax**: `none | zoom`
         *
         * **Initial value**: zoom for the top level element, none for all other elements
         */
        msContentZooming?: Property.MsContentZooming | undefined;
        /**
         * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.
         *
         * **Syntax**: `<string>`
         *
         * **Initial value**: "" (the empty string)
         */
        msFilter?: Property.MsFilter | undefined;
        /**
         * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
         *
         * **Syntax**: `row | row-reverse | column | column-reverse`
         *
         * **Initial value**: `row`
         */
        msFlexDirection?: Property.FlexDirection | undefined;
        /**
         * The **`flex-grow`** CSS property sets the flex grow factor of a flex item main size.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         */
        msFlexPositive?: Property.FlexGrow | undefined;
        /**
         * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.
         *
         * **Syntax**: `[ none | <custom-ident> ]#`
         *
         * **Initial value**: `none`
         */
        msFlowFrom?: Property.MsFlowFrom | undefined;
        /**
         * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.
         *
         * **Syntax**: `[ none | <custom-ident> ]#`
         *
         * **Initial value**: `none`
         */
        msFlowInto?: Property.MsFlowInto | undefined;
        /**
         * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.
         *
         * **Syntax**: `none | <track-list> | <auto-track-list>`
         *
         * **Initial value**: `none`
         */
        msGridColumns?: Property.MsGridColumns<TLength> | undefined;
        /**
         * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.
         *
         * **Syntax**: `none | <track-list> | <auto-track-list>`
         *
         * **Initial value**: `none`
         */
        msGridRows?: Property.MsGridRows<TLength> | undefined;
        /**
         * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.
         *
         * **Syntax**: `auto | none`
         *
         * **Initial value**: `auto`
         */
        msHighContrastAdjust?: Property.MsHighContrastAdjust | undefined;
        /**
         * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.
         *
         * **Syntax**: `auto | <integer>{1,3}`
         *
         * **Initial value**: `auto`
         */
        msHyphenateLimitChars?: Property.MsHyphenateLimitChars | undefined;
        /**
         * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.
         *
         * **Syntax**: `no-limit | <integer>`
         *
         * **Initial value**: `no-limit`
         */
        msHyphenateLimitLines?: Property.MsHyphenateLimitLines | undefined;
        /**
         * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.
         *
         * **Syntax**: `<percentage> | <length>`
         *
         * **Initial value**: `0`
         */
        msHyphenateLimitZone?: Property.MsHyphenateLimitZone<TLength> | undefined;
        /**
         * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
         *
         * **Syntax**: `none | manual | auto`
         *
         * **Initial value**: `manual`
         */
        msHyphens?: Property.Hyphens | undefined;
        /**
         * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.
         *
         * **Syntax**: `auto | after`
         *
         * **Initial value**: `auto`
         */
        msImeAlign?: Property.MsImeAlign | undefined;
        /**
         * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`
         *
         * **Initial value**: `auto`
         */
        msJustifySelf?: Property.JustifySelf | undefined;
        /**
         * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
         *
         * **Syntax**: `auto | loose | normal | strict | anywhere`
         *
         * **Initial value**: `auto`
         */
        msLineBreak?: Property.LineBreak | undefined;
        /**
         * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `0`
         */
        msOrder?: Property.Order | undefined;
        /**
         * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.
         *
         * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`
         *
         * **Initial value**: `auto`
         */
        msOverflowStyle?: Property.MsOverflowStyle | undefined;
        /**
         * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.
         *
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `visible`
         */
        msOverflowX?: Property.OverflowX | undefined;
        /**
         * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.
         *
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `visible`
         */
        msOverflowY?: Property.OverflowY | undefined;
        /**
         * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.
         *
         * **Syntax**: `chained | none`
         *
         * **Initial value**: `chained`
         */
        msScrollChaining?: Property.MsScrollChaining | undefined;
        /**
         * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.
         *
         * **Syntax**: `auto | <length>`
         *
         * **Initial value**: `auto`
         */
        msScrollLimitXMax?: Property.MsScrollLimitXMax<TLength> | undefined;
        /**
         * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         */
        msScrollLimitXMin?: Property.MsScrollLimitXMin<TLength> | undefined;
        /**
         * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.
         *
         * **Syntax**: `auto | <length>`
         *
         * **Initial value**: `auto`
         */
        msScrollLimitYMax?: Property.MsScrollLimitYMax<TLength> | undefined;
        /**
         * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         */
        msScrollLimitYMin?: Property.MsScrollLimitYMin<TLength> | undefined;
        /**
         * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.
         *
         * **Syntax**: `none | railed`
         *
         * **Initial value**: `railed`
         */
        msScrollRails?: Property.MsScrollRails | undefined;
        /**
         * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.
         *
         * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`
         *
         * **Initial value**: `snapInterval(0px, 100%)`
         */
        msScrollSnapPointsX?: Property.MsScrollSnapPointsX | undefined;
        /**
         * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.
         *
         * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`
         *
         * **Initial value**: `snapInterval(0px, 100%)`
         */
        msScrollSnapPointsY?: Property.MsScrollSnapPointsY | undefined;
        /**
         * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.
         *
         * **Syntax**: `none | proximity | mandatory`
         *
         * **Initial value**: `none`
         */
        msScrollSnapType?: Property.MsScrollSnapType | undefined;
        /**
         * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.
         *
         * **Syntax**: `none | vertical-to-horizontal`
         *
         * **Initial value**: `none`
         */
        msScrollTranslation?: Property.MsScrollTranslation | undefined;
        /**
         * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: depends on user agent
         */
        msScrollbar3dlightColor?: Property.MsScrollbar3dlightColor | undefined;
        /**
         * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ButtonText`
         */
        msScrollbarArrowColor?: Property.MsScrollbarArrowColor | undefined;
        /**
         * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: depends on user agent
         */
        msScrollbarBaseColor?: Property.MsScrollbarBaseColor | undefined;
        /**
         * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ThreeDDarkShadow`
         */
        msScrollbarDarkshadowColor?: Property.MsScrollbarDarkshadowColor | undefined;
        /**
         * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ThreeDFace`
         */
        msScrollbarFaceColor?: Property.MsScrollbarFaceColor | undefined;
        /**
         * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ThreeDHighlight`
         */
        msScrollbarHighlightColor?: Property.MsScrollbarHighlightColor | undefined;
        /**
         * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ThreeDDarkShadow`
         */
        msScrollbarShadowColor?: Property.MsScrollbarShadowColor | undefined;
        /**
         * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.
         *
         * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`
         *
         * **Initial value**: `none`
         */
        msTextAutospace?: Property.MsTextAutospace | undefined;
        /**
         * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
         *
         * **Syntax**: `none | all | [ digits <integer>? ]`
         *
         * **Initial value**: `none`
         */
        msTextCombineHorizontal?: Property.TextCombineUpright | undefined;
        /**
         * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.
         *
         * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`
         *
         * **Initial value**: `clip`
         */
        msTextOverflow?: Property.TextOverflow | undefined;
        /**
         * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).
         *
         * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`
         *
         * **Initial value**: `auto`
         */
        msTouchAction?: Property.TouchAction | undefined;
        /**
         * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.
         *
         * **Syntax**: `grippers | none`
         *
         * **Initial value**: `grippers`
         */
        msTouchSelect?: Property.MsTouchSelect | undefined;
        /**
         * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
         *
         * **Syntax**: `none | <transform-list>`
         *
         * **Initial value**: `none`
         */
        msTransform?: Property.Transform | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         */
        msTransformOrigin?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        msTransitionDelay?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        msTransitionDuration?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         */
        msTransitionProperty?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        msTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `none | element | text`
         *
         * **Initial value**: `text`
         */
        msUserSelect?: Property.MsUserSelect | undefined;
        /**
         * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.
         *
         * **Syntax**: `normal | break-all | keep-all | break-word`
         *
         * **Initial value**: `normal`
         */
        msWordBreak?: Property.WordBreak | undefined;
        /**
         * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.
         *
         * **Syntax**: `auto | both | start | end | maximum | clear`
         *
         * **Initial value**: `auto`
         */
        msWrapFlow?: Property.MsWrapFlow | undefined;
        /**
         * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         */
        msWrapMargin?: Property.MsWrapMargin<TLength> | undefined;
        /**
         * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.
         *
         * **Syntax**: `wrap | none`
         *
         * **Initial value**: `wrap`
         */
        msWrapThrough?: Property.MsWrapThrough | undefined;
        /**
         * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).
         *
         * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`
         *
         * **Initial value**: `horizontal-tb`
         */
        msWritingMode?: Property.WritingMode | undefined;
        /**
         * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.
         *
         * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`
         *
         * **Initial value**: `normal`
         */
        WebkitAlignContent?: Property.AlignContent | undefined;
        /**
         * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.
         *
         * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`
         *
         * **Initial value**: `normal`
         */
        WebkitAlignItems?: Property.AlignItems | undefined;
        /**
         * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
         *
         * **Initial value**: `auto`
         */
        WebkitAlignSelf?: Property.AlignSelf | undefined;
        /**
         * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        WebkitAnimationDelay?: Property.AnimationDelay<TTime> | undefined;
        /**
         * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
         *
         * **Syntax**: `<single-animation-direction>#`
         *
         * **Initial value**: `normal`
         */
        WebkitAnimationDirection?: Property.AnimationDirection | undefined;
        /**
         * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        WebkitAnimationDuration?: Property.AnimationDuration<TTime> | undefined;
        /**
         * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
         *
         * **Syntax**: `<single-animation-fill-mode>#`
         *
         * **Initial value**: `none`
         */
        WebkitAnimationFillMode?: Property.AnimationFillMode | undefined;
        /**
         * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.
         *
         * **Syntax**: `<single-animation-iteration-count>#`
         *
         * **Initial value**: `1`
         */
        WebkitAnimationIterationCount?: Property.AnimationIterationCount | undefined;
        /**
         * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules describing the animation or animations to apply to the element.
         *
         * **Syntax**: `[ none | <keyframes-name> ]#`
         *
         * **Initial value**: `none`
         */
        WebkitAnimationName?: Property.AnimationName | undefined;
        /**
         * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
         *
         * **Syntax**: `<single-animation-play-state>#`
         *
         * **Initial value**: `running`
         */
        WebkitAnimationPlayState?: Property.AnimationPlayState | undefined;
        /**
         * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        WebkitAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;
        /**
         * The `**appearance**` CSS property is used to display an element using platform-native styling, based on the operating system's theme. The **`-moz-appearance`** and **`-webkit-appearance`** properties are non-standard versions of this property, used (respectively) by Gecko (Firefox) and by WebKit-based (e.g., Safari) and Blink-based (e.g., Chrome, Opera) browsers to achieve the same thing. Note that Firefox and Edge also support **`-webkit-appearance`**, for compatibility reasons.
         *
         * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`
         *
         * **Initial value**: `none` (but this value is overridden in the user agent CSS)
         */
        WebkitAppearance?: Property.WebkitAppearance | undefined;
        /**
         * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.
         *
         * **Syntax**: `none | <filter-function-list>`
         *
         * **Initial value**: `none`
         */
        WebkitBackdropFilter?: Property.BackdropFilter | undefined;
        /**
         * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
         *
         * **Syntax**: `visible | hidden`
         *
         * **Initial value**: `visible`
         */
        WebkitBackfaceVisibility?: Property.BackfaceVisibility | undefined;
        /**
         * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `border-box`
         */
        WebkitBackgroundClip?: Property.BackgroundClip | undefined;
        /**
         * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `padding-box`
         */
        WebkitBackgroundOrigin?: Property.BackgroundOrigin | undefined;
        /**
         * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         */
        WebkitBackgroundSize?: Property.BackgroundSize<TLength> | undefined;
        /**
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        WebkitBorderBeforeColor?: Property.WebkitBorderBeforeColor | undefined;
        /**
         * **Syntax**: `<'border-style'>`
         *
         * **Initial value**: `none`
         */
        WebkitBorderBeforeStyle?: Property.WebkitBorderBeforeStyle | undefined;
        /**
         * **Syntax**: `<'border-width'>`
         *
         * **Initial value**: `medium`
         */
        WebkitBorderBeforeWidth?: Property.WebkitBorderBeforeWidth<TLength> | undefined;
        /**
         * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         */
        WebkitBorderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;
        /**
         * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         */
        WebkitBorderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;
        /**
         * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.
         *
         * **Syntax**: `<number-percentage>{1,4} && fill?`
         *
         * **Initial value**: `100%`
         */
        WebkitBorderImageSlice?: Property.BorderImageSlice | undefined;
        /**
         * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         */
        WebkitBorderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;
        /**
         * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         */
        WebkitBorderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;
        /**
         * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
         *
         * **Syntax**: `slice | clone`
         *
         * **Initial value**: `slice`
         */
        WebkitBoxDecorationBreak?: Property.BoxDecorationBreak | undefined;
        /**
         * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.
         *
         * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`
         *
         * **Initial value**: `none`
         */
        WebkitBoxReflect?: Property.WebkitBoxReflect<TLength> | undefined;
        /**
         * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.
         *
         * **Syntax**: `none | <shadow>#`
         *
         * **Initial value**: `none`
         */
        WebkitBoxShadow?: Property.BoxShadow | undefined;
        /**
         * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.
         *
         * **Syntax**: `content-box | border-box`
         *
         * **Initial value**: `content-box`
         */
        WebkitBoxSizing?: Property.BoxSizing | undefined;
        /**
         * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.
         *
         * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`
         *
         * **Initial value**: `none`
         */
        WebkitClipPath?: Property.ClipPath | undefined;
        /**
         * The **`column-count`** CSS property breaks an element's content into the specified number of columns.
         *
         * **Syntax**: `<integer> | auto`
         *
         * **Initial value**: `auto`
         */
        WebkitColumnCount?: Property.ColumnCount | undefined;
        /**
         * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.
         *
         * **Syntax**: `auto | balance | balance-all`
         *
         * **Initial value**: `balance`
         */
        WebkitColumnFill?: Property.ColumnFill | undefined;
        /**
         * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
         *
         * **Syntax**: `normal | <length-percentage>`
         *
         * **Initial value**: `normal`
         */
        WebkitColumnGap?: Property.ColumnGap<TLength> | undefined;
        /**
         * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        WebkitColumnRuleColor?: Property.ColumnRuleColor | undefined;
        /**
         * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-style'>`
         *
         * **Initial value**: `none`
         */
        WebkitColumnRuleStyle?: Property.ColumnRuleStyle | undefined;
        /**
         * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-width'>`
         *
         * **Initial value**: `medium`
         */
        WebkitColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;
        /**
         * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.
         *
         * **Syntax**: `none | all`
         *
         * **Initial value**: `none`
         */
        WebkitColumnSpan?: Property.ColumnSpan | undefined;
        /**
         * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
         *
         * **Syntax**: `<length> | auto`
         *
         * **Initial value**: `auto`
         */
        WebkitColumnWidth?: Property.ColumnWidth<TLength> | undefined;
        /**
         * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.
         *
         * **Syntax**: `none | <filter-function-list>`
         *
         * **Initial value**: `none`
         */
        WebkitFilter?: Property.Filter | undefined;
        /**
         * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.
         *
         * **Syntax**: `content | <'width'>`
         *
         * **Initial value**: `auto`
         */
        WebkitFlexBasis?: Property.FlexBasis<TLength> | undefined;
        /**
         * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
         *
         * **Syntax**: `row | row-reverse | column | column-reverse`
         *
         * **Initial value**: `row`
         */
        WebkitFlexDirection?: Property.FlexDirection | undefined;
        /**
         * The **`flex-grow`** CSS property sets the flex grow factor of a flex item main size.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         */
        WebkitFlexGrow?: Property.FlexGrow | undefined;
        /**
         * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `1`
         */
        WebkitFlexShrink?: Property.FlexShrink | undefined;
        /**
         * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.
         *
         * **Syntax**: `nowrap | wrap | wrap-reverse`
         *
         * **Initial value**: `nowrap`
         */
        WebkitFlexWrap?: Property.FlexWrap | undefined;
        /**
         * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.
         *
         * **Syntax**: `normal | <feature-tag-value>#`
         *
         * **Initial value**: `normal`
         */
        WebkitFontFeatureSettings?: Property.FontFeatureSettings | undefined;
        /**
         * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.
         *
         * **Syntax**: `auto | normal | none`
         *
         * **Initial value**: `auto`
         */
        WebkitFontKerning?: Property.FontKerning | undefined;
        /**
         * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.
         *
         * **Syntax**: `auto | never | always | <absolute-size> | <length>`
         *
         * **Initial value**: `auto`
         */
        WebkitFontSmoothing?: Property.FontSmooth<TLength> | undefined;
        /**
         * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.
         *
         * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`
         *
         * **Initial value**: `normal`
         */
        WebkitFontVariantLigatures?: Property.FontVariantLigatures | undefined;
        /**
         * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
         *
         * **Syntax**: `none | manual | auto`
         *
         * **Initial value**: `manual`
         */
        WebkitHyphens?: Property.Hyphens | undefined;
        /**
         * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.
         *
         * **Syntax**: `normal | [ <number> <integer>? ]`
         *
         * **Initial value**: `normal`
         */
        WebkitInitialLetter?: Property.InitialLetter | undefined;
        /**
         * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.
         *
         * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`
         *
         * **Initial value**: `normal`
         */
        WebkitJustifyContent?: Property.JustifyContent | undefined;
        /**
         * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
         *
         * **Syntax**: `auto | loose | normal | strict | anywhere`
         *
         * **Initial value**: `auto`
         */
        WebkitLineBreak?: Property.LineBreak | undefined;
        /**
         * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block container to the specified number of lines.
         *
         * **Syntax**: `none | <integer>`
         *
         * **Initial value**: `none`
         */
        WebkitLineClamp?: Property.WebkitLineClamp | undefined;
        /**
         * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         */
        WebkitMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;
        /**
         * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         */
        WebkitMarginStart?: Property.MarginInlineStart<TLength> | undefined;
        /**
         * If a `-webkit-mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.
         *
         * **Syntax**: `<attachment>#`
         *
         * **Initial value**: `scroll`
         */
        WebkitMaskAttachment?: Property.WebkitMaskAttachment | undefined;
        /**
         * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.
         *
         * **Syntax**: `[ <length> | <number> ]{1,4}`
         *
         * **Initial value**: `0`
         */
        WebkitMaskBoxImageOutset?: Property.MaskBorderOutset<TLength> | undefined;
        /**
         * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.
         *
         * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`
         *
         * **Initial value**: `stretch`
         */
        WebkitMaskBoxImageRepeat?: Property.MaskBorderRepeat | undefined;
        /**
         * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.
         *
         * **Syntax**: `<number-percentage>{1,4} fill?`
         *
         * **Initial value**: `0`
         */
        WebkitMaskBoxImageSlice?: Property.MaskBorderSlice | undefined;
        /**
         * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.
         *
         * **Syntax**: `none | <image>`
         *
         * **Initial value**: `none`
         */
        WebkitMaskBoxImageSource?: Property.MaskBorderSource | undefined;
        /**
         * The **`mask-border-width`** CSS property sets the width of an element's mask border.
         *
         * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`
         *
         * **Initial value**: `auto`
         */
        WebkitMaskBoxImageWidth?: Property.MaskBorderWidth<TLength> | undefined;
        /**
         * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.
         *
         * **Syntax**: `[ <box> | border | padding | content | text ]#`
         *
         * **Initial value**: `border`
         */
        WebkitMaskClip?: Property.WebkitMaskClip | undefined;
        /**
         * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.
         *
         * **Syntax**: `<composite-style>#`
         *
         * **Initial value**: `source-over`
         */
        WebkitMaskComposite?: Property.WebkitMaskComposite | undefined;
        /**
         * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.
         *
         * **Syntax**: `<mask-reference>#`
         *
         * **Initial value**: `none`
         */
        WebkitMaskImage?: Property.WebkitMaskImage | undefined;
        /**
         * The **`mask-origin`** CSS property sets the origin of a mask.
         *
         * **Syntax**: `[ <box> | border | padding | content ]#`
         *
         * **Initial value**: `padding`
         */
        WebkitMaskOrigin?: Property.WebkitMaskOrigin | undefined;
        /**
         * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.
         *
         * **Syntax**: `<position>#`
         *
         * **Initial value**: `0% 0%`
         */
        WebkitMaskPosition?: Property.WebkitMaskPosition<TLength> | undefined;
        /**
         * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right ]#`
         *
         * **Initial value**: `0%`
         */
        WebkitMaskPositionX?: Property.WebkitMaskPositionX<TLength> | undefined;
        /**
         * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.
         *
         * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`
         *
         * **Initial value**: `0%`
         */
        WebkitMaskPositionY?: Property.WebkitMaskPositionY<TLength> | undefined;
        /**
         * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.
         *
         * **Syntax**: `<repeat-style>#`
         *
         * **Initial value**: `repeat`
         */
        WebkitMaskRepeat?: Property.WebkitMaskRepeat | undefined;
        /**
         * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.
         *
         * **Syntax**: `repeat | no-repeat | space | round`
         *
         * **Initial value**: `repeat`
         */
        WebkitMaskRepeatX?: Property.WebkitMaskRepeatX | undefined;
        /**
         * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.
         *
         * **Syntax**: `repeat | no-repeat | space | round`
         *
         * **Initial value**: `repeat`
         */
        WebkitMaskRepeatY?: Property.WebkitMaskRepeatY | undefined;
        /**
         * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         */
        WebkitMaskSize?: Property.WebkitMaskSize<TLength> | undefined;
        /**
         * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'max-width'>`
         *
         * **Initial value**: `0`
         */
        WebkitMaxInlineSize?: Property.MaxInlineSize<TLength> | undefined;
        /**
         * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `0`
         */
        WebkitOrder?: Property.Order | undefined;
        /**
         * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.
         *
         * **Syntax**: `auto | touch`
         *
         * **Initial value**: `auto`
         */
        WebkitOverflowScrolling?: Property.WebkitOverflowScrolling | undefined;
        /**
         * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         */
        WebkitPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;
        /**
         * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         */
        WebkitPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;
        /**
         * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.
         *
         * **Syntax**: `none | <length>`
         *
         * **Initial value**: `none`
         */
        WebkitPerspective?: Property.Perspective<TLength> | undefined;
        /**
         * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         */
        WebkitPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;
        /**
         * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.
         *
         * **Syntax**: `economy | exact`
         *
         * **Initial value**: `economy`
         */
        WebkitPrintColorAdjust?: Property.ColorAdjust | undefined;
        /**
         * The `**ruby-position**` CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (`over`), under it (`under`), or between the characters, on their right side (`inter-character`).
         *
         * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`
         *
         * **Initial value**: `alternate`
         */
        WebkitRubyPosition?: Property.RubyPosition | undefined;
        /**
         * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.
         *
         * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`
         *
         * **Initial value**: `none`
         */
        WebkitScrollSnapType?: Property.ScrollSnapType | undefined;
        /**
         * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         */
        WebkitShapeMargin?: Property.ShapeMargin<TLength> | undefined;
        /**
         * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `black`
         */
        WebkitTapHighlightColor?: Property.WebkitTapHighlightColor | undefined;
        /**
         * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
         *
         * **Syntax**: `none | all | [ digits <integer>? ]`
         *
         * **Initial value**: `none`
         */
        WebkitTextCombine?: Property.TextCombineUpright | undefined;
        /**
         * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        WebkitTextDecorationColor?: Property.TextDecorationColor | undefined;
        /**
         * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.
         *
         * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`
         *
         * **Initial value**: `none`
         */
        WebkitTextDecorationLine?: Property.TextDecorationLine | undefined;
        /**
         * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.
         *
         * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`
         *
         * **Initial value**: `objects`
         */
        WebkitTextDecorationSkip?: Property.TextDecorationSkip | undefined;
        /**
         * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.
         *
         * **Syntax**: `solid | double | dotted | dashed | wavy`
         *
         * **Initial value**: `solid`
         */
        WebkitTextDecorationStyle?: Property.TextDecorationStyle | undefined;
        /**
         * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        WebkitTextEmphasisColor?: Property.TextEmphasisColor | undefined;
        /**
         * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.
         *
         * **Syntax**: `[ over | under ] && [ right | left ]`
         *
         * **Initial value**: `over right`
         */
        WebkitTextEmphasisPosition?: Property.TextEmphasisPosition | undefined;
        /**
         * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.
         *
         * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`
         *
         * **Initial value**: `none`
         */
        WebkitTextEmphasisStyle?: Property.TextEmphasisStyle | undefined;
        /**
         * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        WebkitTextFillColor?: Property.WebkitTextFillColor | undefined;
        /**
         * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.
         *
         * **Syntax**: `mixed | upright | sideways`
         *
         * **Initial value**: `mixed`
         */
        WebkitTextOrientation?: Property.TextOrientation | undefined;
        /**
         * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.
         *
         * **Syntax**: `none | auto | <percentage>`
         *
         * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).
         */
        WebkitTextSizeAdjust?: Property.TextSizeAdjust | undefined;
        /**
         * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        WebkitTextStrokeColor?: Property.WebkitTextStrokeColor | undefined;
        /**
         * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         */
        WebkitTextStrokeWidth?: Property.WebkitTextStrokeWidth<TLength> | undefined;
        /**
         * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.
         *
         * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`
         *
         * **Initial value**: `auto`
         */
        WebkitTextUnderlinePosition?: Property.TextUnderlinePosition | undefined;
        /**
         * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.
         *
         * **Syntax**: `default | none`
         *
         * **Initial value**: `default`
         */
        WebkitTouchCallout?: Property.WebkitTouchCallout | undefined;
        /**
         * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
         *
         * **Syntax**: `none | <transform-list>`
         *
         * **Initial value**: `none`
         */
        WebkitTransform?: Property.Transform | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         */
        WebkitTransformOrigin?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.
         *
         * **Syntax**: `flat | preserve-3d`
         *
         * **Initial value**: `flat`
         */
        WebkitTransformStyle?: Property.TransformStyle | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        WebkitTransitionDelay?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        WebkitTransitionDuration?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         */
        WebkitTransitionProperty?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        WebkitTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;
        /**
         * **Syntax**: `read-only | read-write | read-write-plaintext-only`
         *
         * **Initial value**: `read-only`
         */
        WebkitUserModify?: Property.WebkitUserModify | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `auto | text | none | contain | all`
         *
         * **Initial value**: `auto`
         */
        WebkitUserSelect?: Property.UserSelect | undefined;
        /**
         * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).
         *
         * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`
         *
         * **Initial value**: `horizontal-tb`
         */
        WebkitWritingMode?: Property.WritingMode | undefined;
    }
    export interface VendorShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
         *
         * **Syntax**: `<single-animation>#`
         */
        MozAnimation?: Property.Animation<TTime> | undefined;
        /**
         * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.
         *
         * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
         */
        MozBorderImage?: Property.BorderImage | undefined;
        /**
         * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`
         */
        MozColumnRule?: Property.ColumnRule<TLength> | undefined;
        /**
         * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.
         *
         * **Syntax**: `<'column-width'> || <'column-count'>`
         */
        MozColumns?: Property.Columns<TLength> | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         */
        MozTransition?: Property.Transition<TTime> | undefined;
        /**
         * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.
         *
         * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`
         */
        msContentZoomLimit?: Property.MsContentZoomLimit | undefined;
        /**
         * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.
         *
         * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`
         */
        msContentZoomSnap?: Property.MsContentZoomSnap | undefined;
        /**
         * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.
         *
         * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`
         */
        msFlex?: Property.Flex<TLength> | undefined;
        /**
         * The **\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.
         *
         * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`
         */
        msScrollLimit?: Property.MsScrollLimit | undefined;
        /**
         * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.
         *
         * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`
         */
        msScrollSnapX?: Property.MsScrollSnapX | undefined;
        /**
         * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.
         *
         * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`
         */
        msScrollSnapY?: Property.MsScrollSnapY | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         */
        msTransition?: Property.Transition<TTime> | undefined;
        /**
         * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
         *
         * **Syntax**: `<single-animation>#`
         */
        WebkitAnimation?: Property.Animation<TTime> | undefined;
        /**
         * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-width'> || <'border-style'> || <color>`
         */
        WebkitBorderBefore?: Property.WebkitBorderBefore<TLength> | undefined;
        /**
         * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.
         *
         * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
         */
        WebkitBorderImage?: Property.BorderImage | undefined;
        /**
         * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.
         *
         * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`
         */
        WebkitBorderRadius?: Property.BorderRadius<TLength> | undefined;
        /**
         * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`
         */
        WebkitColumnRule?: Property.ColumnRule<TLength> | undefined;
        /**
         * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.
         *
         * **Syntax**: `<'column-width'> || <'column-count'>`
         */
        WebkitColumns?: Property.Columns<TLength> | undefined;
        /**
         * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.
         *
         * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`
         */
        WebkitFlex?: Property.Flex<TLength> | undefined;
        /**
         * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.
         *
         * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`
         */
        WebkitFlexFlow?: Property.FlexFlow | undefined;
        /**
         * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.
         *
         * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`
         */
        WebkitMask?: Property.WebkitMask<TLength> | undefined;
        /**
         * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.
         *
         * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`
         */
        WebkitMaskBoxImage?: Property.MaskBorder | undefined;
        /**
         * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.
         *
         * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`
         */
        WebkitTextEmphasis?: Property.TextEmphasis | undefined;
        /**
         * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.
         *
         * **Syntax**: `<length> || <color>`
         */
        WebkitTextStroke?: Property.WebkitTextStroke<TLength> | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         */
        WebkitTransition?: Property.Transition<TTime> | undefined;
    }
    export interface VendorProperties<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandProperties<TLength, TTime>, VendorShorthandProperties<TLength, TTime> {
    }
    export interface ObsoleteProperties<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.
         *
         * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`
         *
         * **Initial value**: `center`
         *
         * @deprecated
         */
        azimuth?: Property.Azimuth | undefined;
        /**
         * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | baseline | stretch`
         *
         * **Initial value**: `stretch`
         *
         * @deprecated
         */
        boxAlign?: Property.BoxAlign | undefined;
        /**
         * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
         *
         * **Syntax**: `normal | reverse | inherit`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        boxDirection?: Property.BoxDirection | undefined;
        /**
         * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        boxFlex?: Property.BoxFlex | undefined;
        /**
         * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        boxFlexGroup?: Property.BoxFlexGroup | undefined;
        /**
         * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).
         *
         * **Syntax**: `single | multiple`
         *
         * **Initial value**: `single`
         *
         * @deprecated
         */
        boxLines?: Property.BoxLines | undefined;
        /**
         * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        boxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;
        /**
         * This is a property of the original CSS Flexible Box Layout Module draft, and has been replaced by a newer standard. See flexbox for information about the current standard.
         *
         * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
         *
         * **Initial value**: `inline-axis` (`horizontal` in XUL)
         *
         * @deprecated
         */
        boxOrient?: Property.BoxOrient | undefined;
        /**
         * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | justify`
         *
         * **Initial value**: `start`
         *
         * @deprecated
         */
        boxPack?: Property.BoxPack | undefined;
        /**
         * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.
         *
         * **Syntax**: `<shape> | auto`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        clip?: Property.Clip | undefined;
        /**
         * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.
         *
         * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        fontVariantAlternates?: Property.FontVariantAlternates | undefined;
        /**
         * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        gridColumnGap?: Property.GridColumnGap<TLength> | undefined;
        /**
         * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.
         *
         * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`
         *
         * @deprecated
         */
        gridGap?: Property.GridGap<TLength> | undefined;
        /**
         * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        gridRowGap?: Property.GridRowGap<TLength> | undefined;
        /**
         * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.
         *
         * **Syntax**: `auto | normal | active | inactive | disabled`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        imeMode?: Property.ImeMode | undefined;
        /**
         * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>{1,2}`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        offsetBlock?: Property.InsetBlock<TLength> | undefined;
        /**
         * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        offsetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;
        /**
         * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        offsetBlockStart?: Property.InsetBlockStart<TLength> | undefined;
        /**
         * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>{1,2}`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        offsetInline?: Property.InsetInline<TLength> | undefined;
        /**
         * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        offsetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;
        /**
         * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        offsetInlineStart?: Property.InsetInlineStart<TLength> | undefined;
        /**
         * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.
         *
         * **Syntax**: `none | <position>#`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        scrollSnapCoordinate?: Property.ScrollSnapCoordinate<TLength> | undefined;
        /**
         * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `0px 0px`
         *
         * @deprecated
         */
        scrollSnapDestination?: Property.ScrollSnapDestination<TLength> | undefined;
        /**
         * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.
         *
         * **Syntax**: `none | repeat( <length-percentage> )`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        scrollSnapPointsX?: Property.ScrollSnapPointsX | undefined;
        /**
         * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.
         *
         * **Syntax**: `none | repeat( <length-percentage> )`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        scrollSnapPointsY?: Property.ScrollSnapPointsY | undefined;
        /**
         * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.
         *
         * **Syntax**: `none | mandatory | proximity`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        scrollSnapTypeX?: Property.ScrollSnapTypeX | undefined;
        /**
         * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.
         *
         * **Syntax**: `none | mandatory | proximity`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        scrollSnapTypeY?: Property.ScrollSnapTypeY | undefined;
        /**
         * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `Scrollbar`
         *
         * @deprecated
         */
        scrollbarTrackColor?: Property.MsScrollbarTrackColor | undefined;
        /**
         * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | baseline | stretch`
         *
         * **Initial value**: `stretch`
         *
         * @deprecated
         */
        KhtmlBoxAlign?: Property.BoxAlign | undefined;
        /**
         * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
         *
         * **Syntax**: `normal | reverse | inherit`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        KhtmlBoxDirection?: Property.BoxDirection | undefined;
        /**
         * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        KhtmlBoxFlex?: Property.BoxFlex | undefined;
        /**
         * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        KhtmlBoxFlexGroup?: Property.BoxFlexGroup | undefined;
        /**
         * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).
         *
         * **Syntax**: `single | multiple`
         *
         * **Initial value**: `single`
         *
         * @deprecated
         */
        KhtmlBoxLines?: Property.BoxLines | undefined;
        /**
         * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        KhtmlBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;
        /**
         * This is a property of the original CSS Flexible Box Layout Module draft, and has been replaced by a newer standard. See flexbox for information about the current standard.
         *
         * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
         *
         * **Initial value**: `inline-axis` (`horizontal` in XUL)
         *
         * @deprecated
         */
        KhtmlBoxOrient?: Property.BoxOrient | undefined;
        /**
         * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | justify`
         *
         * **Initial value**: `start`
         *
         * @deprecated
         */
        KhtmlBoxPack?: Property.BoxPack | undefined;
        /**
         * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
         *
         * **Syntax**: `auto | loose | normal | strict | anywhere`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        KhtmlLineBreak?: Property.LineBreak | undefined;
        /**
         * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.
         *
         * **Syntax**: `<alpha-value>`
         *
         * **Initial value**: `1.0`
         *
         * @deprecated
         */
        KhtmlOpacity?: Property.Opacity | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `auto | text | none | contain | all`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        KhtmlUserSelect?: Property.UserSelect | undefined;
        /**
         * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `border-box`
         *
         * @deprecated
         */
        MozBackgroundClip?: Property.BackgroundClip | undefined;
        /**
         * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
         *
         * **Syntax**: `slice | clone`
         *
         * **Initial value**: `slice`
         *
         * @deprecated
         */
        MozBackgroundInlinePolicy?: Property.BoxDecorationBreak | undefined;
        /**
         * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `padding-box`
         *
         * @deprecated
         */
        MozBackgroundOrigin?: Property.BackgroundOrigin | undefined;
        /**
         * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         *
         * @deprecated
         */
        MozBackgroundSize?: Property.BackgroundSize<TLength> | undefined;
        /**
         * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.
         *
         * **Syntax**: `<url> | none`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        MozBinding?: Property.MozBinding | undefined;
        /**
         * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.
         *
         * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`
         *
         * @deprecated
         */
        MozBorderRadius?: Property.BorderRadius<TLength> | undefined;
        /**
         * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozBorderRadiusBottomleft?: Property.BorderBottomLeftRadius<TLength> | undefined;
        /**
         * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozBorderRadiusBottomright?: Property.BorderBottomRightRadius<TLength> | undefined;
        /**
         * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozBorderRadiusTopleft?: Property.BorderTopLeftRadius<TLength> | undefined;
        /**
         * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozBorderRadiusTopright?: Property.BorderTopRightRadius<TLength> | undefined;
        /**
         * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | baseline | stretch`
         *
         * **Initial value**: `stretch`
         *
         * @deprecated
         */
        MozBoxAlign?: Property.BoxAlign | undefined;
        /**
         * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
         *
         * **Syntax**: `normal | reverse | inherit`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        MozBoxDirection?: Property.BoxDirection | undefined;
        /**
         * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozBoxFlex?: Property.BoxFlex | undefined;
        /**
         * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        MozBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;
        /**
         * This is a property of the original CSS Flexible Box Layout Module draft, and has been replaced by a newer standard. See flexbox for information about the current standard.
         *
         * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
         *
         * **Initial value**: `inline-axis` (`horizontal` in XUL)
         *
         * @deprecated
         */
        MozBoxOrient?: Property.BoxOrient | undefined;
        /**
         * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | justify`
         *
         * **Initial value**: `start`
         *
         * @deprecated
         */
        MozBoxPack?: Property.BoxPack | undefined;
        /**
         * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.
         *
         * **Syntax**: `none | <shadow>#`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        MozBoxShadow?: Property.BoxShadow | undefined;
        /**
         * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.
         *
         * **Syntax**: `border-box | content-box | margin-box | padding-box`
         *
         * **Initial value**: `content-box`
         *
         * @deprecated
         */
        MozFloatEdge?: Property.MozFloatEdge | undefined;
        /**
         * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.
         *
         * **Syntax**: `0 | 1`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozForceBrokenImageIcon?: Property.MozForceBrokenImageIcon | undefined;
        /**
         * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.
         *
         * **Syntax**: `<alpha-value>`
         *
         * **Initial value**: `1.0`
         *
         * @deprecated
         */
        MozOpacity?: Property.Opacity | undefined;
        /**
         * The **`outline`** CSS shorthand property set all the outline properties in a single declaration.
         *
         * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`
         *
         * @deprecated
         */
        MozOutline?: Property.Outline<TLength> | undefined;
        /**
         * The **`outline-color`** CSS property sets the color of an element's outline.
         *
         * **Syntax**: `<color> | invert`
         *
         * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other
         *
         * @deprecated
         */
        MozOutlineColor?: Property.OutlineColor | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.
         *
         * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`
         *
         * @deprecated
         */
        MozOutlineRadius?: Property.MozOutlineRadius<TLength> | undefined;
        /**
         * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.
         *
         * **Syntax**: `<outline-radius>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozOutlineRadiusBottomleft?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;
        /**
         * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.
         *
         * **Syntax**: `<outline-radius>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozOutlineRadiusBottomright?: Property.MozOutlineRadiusBottomright<TLength> | undefined;
        /**
         * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.
         *
         * **Syntax**: `<outline-radius>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozOutlineRadiusTopleft?: Property.MozOutlineRadiusTopleft<TLength> | undefined;
        /**
         * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.
         *
         * **Syntax**: `<outline-radius>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        MozOutlineRadiusTopright?: Property.MozOutlineRadiusTopright<TLength> | undefined;
        /**
         * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
         *
         * **Syntax**: `auto | <'border-style'>`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        MozOutlineStyle?: Property.OutlineStyle | undefined;
        /**
         * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * @deprecated
         */
        MozOutlineWidth?: Property.OutlineWidth<TLength> | undefined;
        /**
         * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.
         *
         * **Syntax**: `auto | start | end | left | right | center | justify`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        MozTextAlignLast?: Property.TextAlignLast | undefined;
        /**
         * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * @deprecated
         */
        MozTextDecorationColor?: Property.TextDecorationColor | undefined;
        /**
         * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.
         *
         * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        MozTextDecorationLine?: Property.TextDecorationLine | undefined;
        /**
         * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.
         *
         * **Syntax**: `solid | double | dotted | dashed | wavy`
         *
         * **Initial value**: `solid`
         *
         * @deprecated
         */
        MozTextDecorationStyle?: Property.TextDecorationStyle | undefined;
        /**
         * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.
         *
         * **Syntax**: `auto | none | enabled | disabled`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        MozUserInput?: Property.MozUserInput | undefined;
        /**
         * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.
         *
         * **Syntax**: `auto | normal | active | inactive | disabled`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        msImeMode?: Property.ImeMode | undefined;
        /**
         * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `Scrollbar`
         *
         * @deprecated
         */
        msScrollbarTrackColor?: Property.MsScrollbarTrackColor | undefined;
        /**
         * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
         *
         * **Syntax**: `<single-animation>#`
         *
         * @deprecated
         */
        OAnimation?: Property.Animation<TTime> | undefined;
        /**
         * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * @deprecated
         */
        OAnimationDelay?: Property.AnimationDelay<TTime> | undefined;
        /**
         * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
         *
         * **Syntax**: `<single-animation-direction>#`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        OAnimationDirection?: Property.AnimationDirection | undefined;
        /**
         * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * @deprecated
         */
        OAnimationDuration?: Property.AnimationDuration<TTime> | undefined;
        /**
         * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
         *
         * **Syntax**: `<single-animation-fill-mode>#`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        OAnimationFillMode?: Property.AnimationFillMode | undefined;
        /**
         * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.
         *
         * **Syntax**: `<single-animation-iteration-count>#`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        OAnimationIterationCount?: Property.AnimationIterationCount | undefined;
        /**
         * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules describing the animation or animations to apply to the element.
         *
         * **Syntax**: `[ none | <keyframes-name> ]#`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        OAnimationName?: Property.AnimationName | undefined;
        /**
         * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
         *
         * **Syntax**: `<single-animation-play-state>#`
         *
         * **Initial value**: `running`
         *
         * @deprecated
         */
        OAnimationPlayState?: Property.AnimationPlayState | undefined;
        /**
         * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         *
         * @deprecated
         */
        OAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;
        /**
         * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         *
         * @deprecated
         */
        OBackgroundSize?: Property.BackgroundSize<TLength> | undefined;
        /**
         * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.
         *
         * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
         *
         * @deprecated
         */
        OBorderImage?: Property.BorderImage | undefined;
        /**
         * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.
         *
         * **Syntax**: `fill | contain | cover | none | scale-down`
         *
         * **Initial value**: `fill`
         *
         * @deprecated
         */
        OObjectFit?: Property.ObjectFit | undefined;
        /**
         * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         *
         * @deprecated
         */
        OObjectPosition?: Property.ObjectPosition<TLength> | undefined;
        /**
         * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).
         *
         * **Syntax**: `<integer> | <length>`
         *
         * **Initial value**: `8`
         *
         * @deprecated
         */
        OTabSize?: Property.TabSize<TLength> | undefined;
        /**
         * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.
         *
         * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`
         *
         * **Initial value**: `clip`
         *
         * @deprecated
         */
        OTextOverflow?: Property.TextOverflow | undefined;
        /**
         * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
         *
         * **Syntax**: `none | <transform-list>`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        OTransform?: Property.Transform | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         *
         * @deprecated
         */
        OTransformOrigin?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         *
         * @deprecated
         */
        OTransition?: Property.Transition<TTime> | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * @deprecated
         */
        OTransitionDelay?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * @deprecated
         */
        OTransitionDuration?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         *
         * @deprecated
         */
        OTransitionProperty?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         *
         * @deprecated
         */
        OTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;
        /**
         * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | baseline | stretch`
         *
         * **Initial value**: `stretch`
         *
         * @deprecated
         */
        WebkitBoxAlign?: Property.BoxAlign | undefined;
        /**
         * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
         *
         * **Syntax**: `normal | reverse | inherit`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        WebkitBoxDirection?: Property.BoxDirection | undefined;
        /**
         * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        WebkitBoxFlex?: Property.BoxFlex | undefined;
        /**
         * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        WebkitBoxFlexGroup?: Property.BoxFlexGroup | undefined;
        /**
         * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).
         *
         * **Syntax**: `single | multiple`
         *
         * **Initial value**: `single`
         *
         * @deprecated
         */
        WebkitBoxLines?: Property.BoxLines | undefined;
        /**
         * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        WebkitBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;
        /**
         * This is a property of the original CSS Flexible Box Layout Module draft, and has been replaced by a newer standard. See flexbox for information about the current standard.
         *
         * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
         *
         * **Initial value**: `inline-axis` (`horizontal` in XUL)
         *
         * @deprecated
         */
        WebkitBoxOrient?: Property.BoxOrient | undefined;
        /**
         * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | justify`
         *
         * **Initial value**: `start`
         *
         * @deprecated
         */
        WebkitBoxPack?: Property.BoxPack | undefined;
        /**
         * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.
         *
         * **Syntax**: `none | repeat( <length-percentage> )`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        WebkitScrollSnapPointsX?: Property.ScrollSnapPointsX | undefined;
        /**
         * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.
         *
         * **Syntax**: `none | repeat( <length-percentage> )`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        WebkitScrollSnapPointsY?: Property.ScrollSnapPointsY | undefined;
    }
    export interface SvgProperties<TLength = (string & {}) | 0, TTime = string & {}> {
        alignmentBaseline?: Property.AlignmentBaseline | undefined;
        baselineShift?: Property.BaselineShift<TLength> | undefined;
        clip?: Property.Clip | undefined;
        clipPath?: Property.ClipPath | undefined;
        clipRule?: Property.ClipRule | undefined;
        color?: Property.Color | undefined;
        colorInterpolation?: Property.ColorInterpolation | undefined;
        colorRendering?: Property.ColorRendering | undefined;
        cursor?: Property.Cursor | undefined;
        direction?: Property.Direction | undefined;
        display?: Property.Display | undefined;
        dominantBaseline?: Property.DominantBaseline | undefined;
        fill?: Property.Fill | undefined;
        fillOpacity?: Property.FillOpacity | undefined;
        fillRule?: Property.FillRule | undefined;
        filter?: Property.Filter | undefined;
        floodColor?: Property.FloodColor | undefined;
        floodOpacity?: Property.FloodOpacity | undefined;
        font?: Property.Font | undefined;
        fontFamily?: Property.FontFamily | undefined;
        fontSize?: Property.FontSize<TLength> | undefined;
        fontSizeAdjust?: Property.FontSizeAdjust | undefined;
        fontStretch?: Property.FontStretch | undefined;
        fontStyle?: Property.FontStyle | undefined;
        fontVariant?: Property.FontVariant | undefined;
        fontWeight?: Property.FontWeight | undefined;
        glyphOrientationVertical?: Property.GlyphOrientationVertical | undefined;
        imageRendering?: Property.ImageRendering | undefined;
        letterSpacing?: Property.LetterSpacing<TLength> | undefined;
        lightingColor?: Property.LightingColor | undefined;
        lineHeight?: Property.LineHeight<TLength> | undefined;
        marker?: Property.Marker | undefined;
        markerEnd?: Property.MarkerEnd | undefined;
        markerMid?: Property.MarkerMid | undefined;
        markerStart?: Property.MarkerStart | undefined;
        mask?: Property.Mask<TLength> | undefined;
        opacity?: Property.Opacity | undefined;
        overflow?: Property.Overflow | undefined;
        paintOrder?: Property.PaintOrder | undefined;
        pointerEvents?: Property.PointerEvents | undefined;
        shapeRendering?: Property.ShapeRendering | undefined;
        stopColor?: Property.StopColor | undefined;
        stopOpacity?: Property.StopOpacity | undefined;
        stroke?: Property.Stroke | undefined;
        strokeDasharray?: Property.StrokeDasharray<TLength> | undefined;
        strokeDashoffset?: Property.StrokeDashoffset<TLength> | undefined;
        strokeLinecap?: Property.StrokeLinecap | undefined;
        strokeLinejoin?: Property.StrokeLinejoin | undefined;
        strokeMiterlimit?: Property.StrokeMiterlimit | undefined;
        strokeOpacity?: Property.StrokeOpacity | undefined;
        strokeWidth?: Property.StrokeWidth<TLength> | undefined;
        textAnchor?: Property.TextAnchor | undefined;
        textDecoration?: Property.TextDecoration<TLength> | undefined;
        textRendering?: Property.TextRendering | undefined;
        unicodeBidi?: Property.UnicodeBidi | undefined;
        vectorEffect?: Property.VectorEffect | undefined;
        visibility?: Property.Visibility | undefined;
        whiteSpace?: Property.WhiteSpace | undefined;
        wordSpacing?: Property.WordSpacing<TLength> | undefined;
        writingMode?: Property.WritingMode | undefined;
    }
    export interface Properties<TLength = (string & {}) | 0, TTime = string & {}> extends StandardProperties<TLength, TTime>, VendorProperties<TLength, TTime>, ObsoleteProperties<TLength, TTime>, SvgProperties<TLength, TTime> {
    }
    export interface StandardLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * The **`accent-color`** CSS property sets the color of the elements accent. An accent appears in elements such as `<input>` of `type="checkbox"`, or `type="radio"`.
         *
         * **Syntax**: `auto | <color>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **93** | **92**  |   No   | **93** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/accent-color
         */
        "accent-color"?: Property.AccentColor | undefined;
        /**
         * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.
         *
         * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **29**  | **28**  |  **9**  | **12** | **11** |
         * | 21 _-x-_ |         | 7 _-x-_ |        |        |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/align-content
         */
        "align-content"?: Property.AlignContent | undefined;
        /**
         * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.
         *
         * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **52**  | **20**  |  **9**  | **12** | **11** |
         * | 21 _-x-_ |         | 7 _-x-_ |        |        |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/align-items
         */
        "align-items"?: Property.AlignItems | undefined;
        /**
         * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :------: | :-----: | :-------: | :----: | :----: |
         * |  **36**  | **20**  |   **9**   | **12** | **11** |
         * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  |      IE      |
         * | :----: | :-----: | :------: | :----: | :----------: |
         * | **57** | **52**  | **10.1** | **16** | **10** _-x-_ |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/align-self
         */
        "align-self"?: Property.AlignSelf | undefined;
        /**
         * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.
         *
         * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   |   n/a   |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks
         */
        "align-tracks"?: Property.AlignTracks | undefined;
        /**
         * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay
         */
        "animation-delay"?: Property.AnimationDelay<TTime> | undefined;
        /**
         * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
         *
         * **Syntax**: `<single-animation-direction>#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction
         */
        "animation-direction"?: Property.AnimationDirection | undefined;
        /**
         * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration
         */
        "animation-duration"?: Property.AnimationDuration<TTime> | undefined;
        /**
         * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
         *
         * **Syntax**: `<single-animation-fill-mode>#`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode
         */
        "animation-fill-mode"?: Property.AnimationFillMode | undefined;
        /**
         * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.
         *
         * **Syntax**: `<single-animation-iteration-count>#`
         *
         * **Initial value**: `1`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count
         */
        "animation-iteration-count"?: Property.AnimationIterationCount | undefined;
        /**
         * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules describing the animation or animations to apply to the element.
         *
         * **Syntax**: `[ none | <keyframes-name> ]#`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-name
         */
        "animation-name"?: Property.AnimationName | undefined;
        /**
         * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
         *
         * **Syntax**: `<single-animation-play-state>#`
         *
         * **Initial value**: `running`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state
         */
        "animation-play-state"?: Property.AnimationPlayState | undefined;
        /**
         * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function
         */
        "animation-timing-function"?: Property.AnimationTimingFunction | undefined;
        /**
         * The `**appearance**` CSS property is used to display an element using platform-native styling, based on the operating system's theme. The **`-moz-appearance`** and **`-webkit-appearance`** properties are non-standard versions of this property, used (respectively) by Gecko (Firefox) and by WebKit-based (e.g., Safari) and Blink-based (e.g., Chrome, Opera) browsers to achieve the same thing. Note that Firefox and Edge also support **`-webkit-appearance`**, for compatibility reasons.
         *
         * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox |   Safari    |   Edge   | IE  |
         * | :-----: | :-----: | :---------: | :------: | :-: |
         * | **84**  | **80**  | **3** _-x-_ |  **84**  | No  |
         * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/appearance
         */
        appearance?: Property.Appearance | undefined;
        /**
         * The **`aspect-ratio`**  CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.
         *
         * **Syntax**: `auto | <ratio>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **88** | **89**  | **15** | **88** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio
         */
        "aspect-ratio"?: Property.AspectRatio | undefined;
        /**
         * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.
         *
         * **Syntax**: `none | <filter-function-list>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |   Safari    |  Edge  | IE  |
         * | :----: | :-----: | :---------: | :----: | :-: |
         * | **76** |   n/a   | **9** _-x-_ | **17** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter
         */
        "backdrop-filter"?: Property.BackdropFilter | undefined;
        /**
         * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
         *
         * **Syntax**: `visible | hidden`
         *
         * **Initial value**: `visible`
         *
         * |  Chrome  | Firefox  |    Safari     |  Edge  |   IE   |
         * | :------: | :------: | :-----------: | :----: | :----: |
         * |  **36**  |  **16**  | **5.1** _-x-_ | **12** | **10** |
         * | 12 _-x-_ | 10 _-x-_ |               |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility
         */
        "backface-visibility"?: Property.BackfaceVisibility | undefined;
        /**
         * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.
         *
         * **Syntax**: `<attachment>#`
         *
         * **Initial value**: `scroll`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment
         */
        "background-attachment"?: Property.BackgroundAttachment | undefined;
        /**
         * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.
         *
         * **Syntax**: `<blend-mode>#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **35** | **30**  | **8**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode
         */
        "background-blend-mode"?: Property.BackgroundBlendMode | undefined;
        /**
         * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `border-box`
         *
         * | Chrome | Firefox |   Safari    |  Edge  |  IE   |
         * | :----: | :-----: | :---------: | :----: | :---: |
         * | **1**  |  **4**  | **3** _-x-_ | **12** | **9** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-clip
         */
        "background-clip"?: Property.BackgroundClip | undefined;
        /**
         * The **`background-color`** CSS property sets the background color of an element.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `transparent`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-color
         */
        "background-color"?: Property.BackgroundColor | undefined;
        /**
         * The **`background-image`** CSS property sets one or more background images on an element.
         *
         * **Syntax**: `<bg-image>#`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-image
         */
        "background-image"?: Property.BackgroundImage | undefined;
        /**
         * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `padding-box`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **4**  | **3**  | **12** | **9** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-origin
         */
        "background-origin"?: Property.BackgroundOrigin | undefined;
        /**
         * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.
         *
         * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`
         *
         * **Initial value**: `left`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  | **49**  | **1**  | **12** | **6** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x
         */
        "background-position-x"?: Property.BackgroundPositionX<TLength> | undefined;
        /**
         * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.
         *
         * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`
         *
         * **Initial value**: `top`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  | **49**  | **1**  | **12** | **6** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y
         */
        "background-position-y"?: Property.BackgroundPositionY<TLength> | undefined;
        /**
         * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.
         *
         * **Syntax**: `<repeat-style>#`
         *
         * **Initial value**: `repeat`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat
         */
        "background-repeat"?: Property.BackgroundRepeat | undefined;
        /**
         * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **3**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-size
         */
        "background-size"?: Property.BackgroundSize<TLength> | undefined;
        /**
         * **Syntax**: `clip | ellipsis | <string>`
         *
         * **Initial value**: `clip`
         */
        "block-overflow"?: Property.BlockOverflow | undefined;
        /**
         * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'width'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/block-size
         */
        "block-size"?: Property.BlockSize<TLength> | undefined;
        /**
         * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>{1,2}`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color
         */
        "border-block-color"?: Property.BorderBlockColor | undefined;
        /**
         * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color
         */
        "border-block-end-color"?: Property.BorderBlockEndColor | undefined;
        /**
         * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style
         */
        "border-block-end-style"?: Property.BorderBlockEndStyle | undefined;
        /**
         * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width
         */
        "border-block-end-width"?: Property.BorderBlockEndWidth<TLength> | undefined;
        /**
         * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color
         */
        "border-block-start-color"?: Property.BorderBlockStartColor | undefined;
        /**
         * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style
         */
        "border-block-start-style"?: Property.BorderBlockStartStyle | undefined;
        /**
         * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width
         */
        "border-block-start-width"?: Property.BorderBlockStartWidth<TLength> | undefined;
        /**
         * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style
         */
        "border-block-style"?: Property.BorderBlockStyle | undefined;
        /**
         * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width
         */
        "border-block-width"?: Property.BorderBlockWidth<TLength> | undefined;
        /**
         * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color
         */
        "border-bottom-color"?: Property.BorderBottomColor | undefined;
        /**
         * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius
         */
        "border-bottom-left-radius"?: Property.BorderBottomLeftRadius<TLength> | undefined;
        /**
         * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius
         */
        "border-bottom-right-radius"?: Property.BorderBottomRightRadius<TLength> | undefined;
        /**
         * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.
         *
         * **Syntax**: `<line-style>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style
         */
        "border-bottom-style"?: Property.BorderBottomStyle | undefined;
        /**
         * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width
         */
        "border-bottom-width"?: Property.BorderBottomWidth<TLength> | undefined;
        /**
         * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.
         *
         * **Syntax**: `collapse | separate`
         *
         * **Initial value**: `separate`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse
         */
        "border-collapse"?: Property.BorderCollapse | undefined;
        /**
         * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **89** | **66**  | **15** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius
         */
        "border-end-end-radius"?: Property.BorderEndEndRadius<TLength> | undefined;
        /**
         * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **89** | **66**  | **15** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius
         */
        "border-end-start-radius"?: Property.BorderEndStartRadius<TLength> | undefined;
        /**
         * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.
         *
         * **Syntax**: `[ <length> | <number> ]{1,4}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **15**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset
         */
        "border-image-outset"?: Property.BorderImageOutset<TLength> | undefined;
        /**
         * The **`border-image-repeat`** CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.
         *
         * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`
         *
         * **Initial value**: `stretch`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **15**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat
         */
        "border-image-repeat"?: Property.BorderImageRepeat | undefined;
        /**
         * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.
         *
         * **Syntax**: `<number-percentage>{1,4} && fill?`
         *
         * **Initial value**: `100%`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **15**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice
         */
        "border-image-slice"?: Property.BorderImageSlice | undefined;
        /**
         * The **`border-image-source`** CSS property sets the source image used to create an element's border image.
         *
         * **Syntax**: `none | <image>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **15**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source
         */
        "border-image-source"?: Property.BorderImageSource | undefined;
        /**
         * The **`border-image-width`** CSS property sets the width of an element's border image.
         *
         * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`
         *
         * **Initial value**: `1`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **15** | **13**  | **6**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width
         */
        "border-image-width"?: Property.BorderImageWidth<TLength> | undefined;
        /**
         * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>{1,2}`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color
         */
        "border-inline-color"?: Property.BorderInlineColor | undefined;
        /**
         * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |
         * | :----: | :-------------------------: | :------: | :----: | :-: |
         * | **69** |           **41**            | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-end-color)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color
         */
        "border-inline-end-color"?: Property.BorderInlineEndColor | undefined;
        /**
         * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |
         * | :----: | :-------------------------: | :------: | :----: | :-: |
         * | **69** |           **41**            | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-end-style)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style
         */
        "border-inline-end-style"?: Property.BorderInlineEndStyle | undefined;
        /**
         * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |
         * | :----: | :-------------------------: | :------: | :----: | :-: |
         * | **69** |           **41**            | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-end-width)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width
         */
        "border-inline-end-width"?: Property.BorderInlineEndWidth<TLength> | undefined;
        /**
         * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |
         * | :----: | :---------------------------: | :------: | :----: | :-: |
         * | **69** |            **41**             | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-start-color)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color
         */
        "border-inline-start-color"?: Property.BorderInlineStartColor | undefined;
        /**
         * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |
         * | :----: | :---------------------------: | :------: | :----: | :-: |
         * | **69** |            **41**             | **12.1** | **79** | No  |
         * |        | 3 _(-moz-border-start-style)_ |          |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style
         */
        "border-inline-start-style"?: Property.BorderInlineStartStyle | undefined;
        /**
         * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width
         */
        "border-inline-start-width"?: Property.BorderInlineStartWidth<TLength> | undefined;
        /**
         * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style
         */
        "border-inline-style"?: Property.BorderInlineStyle | undefined;
        /**
         * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width
         */
        "border-inline-width"?: Property.BorderInlineWidth<TLength> | undefined;
        /**
         * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color
         */
        "border-left-color"?: Property.BorderLeftColor | undefined;
        /**
         * The **`border-left-style`** CSS property sets the line style of an element's left `border`.
         *
         * **Syntax**: `<line-style>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style
         */
        "border-left-style"?: Property.BorderLeftStyle | undefined;
        /**
         * The **`border-left-width`** CSS property sets the width of the left border of an element.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width
         */
        "border-left-width"?: Property.BorderLeftWidth<TLength> | undefined;
        /**
         * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color
         */
        "border-right-color"?: Property.BorderRightColor | undefined;
        /**
         * The **`border-right-style`** CSS property sets the line style of an element's right `border`.
         *
         * **Syntax**: `<line-style>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style
         */
        "border-right-style"?: Property.BorderRightStyle | undefined;
        /**
         * The **`border-right-width`** CSS property sets the width of the right border of an element.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width
         */
        "border-right-width"?: Property.BorderRightWidth<TLength> | undefined;
        /**
         * The **`border-spacing`** CSS property sets the distance between the borders of adjacent `<table>` cells. This property applies only when `border-collapse` is `separate`.
         *
         * **Syntax**: `<length> <length>?`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing
         */
        "border-spacing"?: Property.BorderSpacing<TLength> | undefined;
        /**
         * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **89** | **66**  | **15** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius
         */
        "border-start-end-radius"?: Property.BorderStartEndRadius<TLength> | undefined;
        /**
         * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **89** | **66**  | **15** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius
         */
        "border-start-start-radius"?: Property.BorderStartStartRadius<TLength> | undefined;
        /**
         * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color
         */
        "border-top-color"?: Property.BorderTopColor | undefined;
        /**
         * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius
         */
        "border-top-left-radius"?: Property.BorderTopLeftRadius<TLength> | undefined;
        /**
         * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius
         */
        "border-top-right-radius"?: Property.BorderTopRightRadius<TLength> | undefined;
        /**
         * The **`border-top-style`** CSS property sets the line style of an element's top `border`.
         *
         * **Syntax**: `<line-style>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style
         */
        "border-top-style"?: Property.BorderTopStyle | undefined;
        /**
         * The **`border-top-width`** CSS property sets the width of the top border of an element.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width
         */
        "border-top-width"?: Property.BorderTopWidth<TLength> | undefined;
        /**
         * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/bottom
         */
        bottom?: Property.Bottom<TLength> | undefined;
        /**
         * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
         *
         * **Syntax**: `slice | clone`
         *
         * **Initial value**: `slice`
         *
         * |    Chrome    | Firefox |   Safari    |     Edge     | IE  |
         * | :----------: | :-----: | :---------: | :----------: | :-: |
         * | **22** _-x-_ | **32**  | **7** _-x-_ | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break
         */
        "box-decoration-break"?: Property.BoxDecorationBreak | undefined;
        /**
         * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.
         *
         * **Syntax**: `none | <shadow>#`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * | **10**  |  **4**  | **5.1** | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow
         */
        "box-shadow"?: Property.BoxShadow | undefined;
        /**
         * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.
         *
         * **Syntax**: `content-box | border-box`
         *
         * **Initial value**: `content-box`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * | **10**  | **29**  | **5.1** | **12** | **8** |
         * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing
         */
        "box-sizing"?: Property.BoxSizing | undefined;
        /**
         * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.
         *
         * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  |   No   | **12** | **10** |
         *
         * ---
         *
         * _Supported in Paged Media_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  | **10** | **12** | **10** |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/break-after
         */
        "break-after"?: Property.BreakAfter | undefined;
        /**
         * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.
         *
         * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  |   No   | **12** | **10** |
         *
         * ---
         *
         * _Supported in Paged Media_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  | **10** | **12** | **10** |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/break-before
         */
        "break-before"?: Property.BreakBefore | undefined;
        /**
         * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.
         *
         * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  | **10** | **12** | **10** |
         *
         * ---
         *
         * _Supported in Paged Media_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **50** | **65**  | **10** | **12** | **10** |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/break-inside
         */
        "break-inside"?: Property.BreakInside | undefined;
        /**
         * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.
         *
         * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`
         *
         * **Initial value**: `top`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/caption-side
         */
        "caption-side"?: Property.CaptionSide | undefined;
        /**
         * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.
         *
         * **Syntax**: `auto | <color>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **53**  | **11.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/caret-color
         */
        "caret-color"?: Property.CaretColor | undefined;
        /**
         * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.
         *
         * **Syntax**: `none | left | right | both | inline-start | inline-end`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/clear
         */
        clear?: Property.Clear | undefined;
        /**
         * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.
         *
         * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`
         *
         * **Initial value**: `none`
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :------: | :-----: | :-------: | :----: | :----: |
         * |  **55**  | **3.5** |  **9.1**  | **12** | **10** |
         * | 23 _-x-_ |         | 6.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/clip-path
         */
        "clip-path"?: Property.ClipPath | undefined;
        /**
         * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `<currentcolor>` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: Varies from one browser to another
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/color
         */
        color?: Property.Color | undefined;
        /**
         * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.
         *
         * **Syntax**: `economy | exact`
         *
         * **Initial value**: `economy`
         *
         * |                Chrome                 | Firefox |                Safari                |                 Edge                  | IE  |
         * | :-----------------------------------: | :-----: | :----------------------------------: | :-----------------------------------: | :-: |
         * | **49** _(-webkit-print-color-adjust)_ | **48**  | **6** _(-webkit-print-color-adjust)_ | **79** _(-webkit-print-color-adjust)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/color-adjust
         */
        "color-adjust"?: Property.ColorAdjust | undefined;
        /**
         * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.
         *
         * **Syntax**: `normal | [ light | dark | <custom-ident> ]+`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **81** |   No    | **13** | **81** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme
         */
        "color-scheme"?: Property.ColorScheme | undefined;
        /**
         * The **`column-count`** CSS property breaks an element's content into the specified number of columns.
         *
         * **Syntax**: `<integer> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-count
         */
        "column-count"?: Property.ColumnCount | undefined;
        /**
         * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.
         *
         * **Syntax**: `auto | balance | balance-all`
         *
         * **Initial value**: `balance`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE   |
         * | :----: | :-----: | :-----: | :----: | :----: |
         * | **50** | **52**  |  **9**  | **12** | **10** |
         * |        |         | 8 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-fill
         */
        "column-fill"?: Property.ColumnFill | undefined;
        /**
         * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
         *
         * **Syntax**: `normal | <length-percentage>`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **84** | **63**  | **14.1** | **84** | No  |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * |         Chrome         |        Firefox         |          Safari          |  Edge  | IE  |
         * | :--------------------: | :--------------------: | :----------------------: | :----: | :-: |
         * |         **66**         |         **61**         |          **12**          | **16** | No  |
         * | 57 _(grid-column-gap)_ | 52 _(grid-column-gap)_ | 10.1 _(grid-column-gap)_ |        |     |
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  | **10**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-gap
         */
        "column-gap"?: Property.ColumnGap<TLength> | undefined;
        /**
         * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color
         */
        "column-rule-color"?: Property.ColumnRuleColor | undefined;
        /**
         * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style
         */
        "column-rule-style"?: Property.ColumnRuleStyle | undefined;
        /**
         * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-width'>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width
         */
        "column-rule-width"?: Property.ColumnRuleWidth<TLength> | undefined;
        /**
         * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.
         *
         * **Syntax**: `none | all`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **50**  | **71**  |   **9**   | **12** | **10** |
         * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-span
         */
        "column-span"?: Property.ColumnSpan | undefined;
        /**
         * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
         *
         * **Syntax**: `<length> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **50**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-width
         */
        "column-width"?: Property.ColumnWidth<TLength> | undefined;
        /**
         * The **`contain`** CSS property allows an author to indicate that an element and its contents are, as much as possible, _independent_ of the rest of the document tree. This allows the browser to recalculate layout, style, paint, size, or any combination of them for a limited area of the DOM and not the entire page, leading to obvious performance benefits.
         *
         * **Syntax**: `none | strict | content | [ size || layout || style || paint ]`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **52** | **69**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/contain
         */
        contain?: Property.Contain | undefined;
        /**
         * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**_._
         *
         * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/content
         */
        content?: Property.Content | undefined;
        /**
         * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. Basically it enables the user agent to skip an element's rendering work, including layout and painting, until it is needed, makes the initial page load much faster.
         *
         * **Syntax**: `visible | auto | hidden`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **85** |   No    |   No   | **85** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility
         */
        "content-visibility"?: Property.ContentVisibility | undefined;
        /**
         * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.
         *
         * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **2**  |  **1**  | **3**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment
         */
        "counter-increment"?: Property.CounterIncrement | undefined;
        /**
         * The **`counter-reset`** CSS property resets a CSS counter to a given value.
         *
         * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **2**  |  **1**  | **3**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset
         */
        "counter-reset"?: Property.CounterReset | undefined;
        /**
         * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.
         *
         * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **85** | **68**  |   No   | **85** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/counter-set
         */
        "counter-set"?: Property.CounterSet | undefined;
        /**
         * The **`cursor`** CSS property sets the type of mouse cursor, if any, to show when the mouse pointer is over an element.
         *
         * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/cursor
         */
        cursor?: Property.Cursor | undefined;
        /**
         * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).
         *
         * **Syntax**: `ltr | rtl`
         *
         * **Initial value**: `ltr`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **2**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/direction
         */
        direction?: Property.Direction | undefined;
        /**
         * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.
         *
         * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`
         *
         * **Initial value**: `inline`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/display
         */
        display?: Property.Display | undefined;
        /**
         * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.
         *
         * **Syntax**: `show | hide`
         *
         * **Initial value**: `show`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells
         */
        "empty-cells"?: Property.EmptyCells | undefined;
        /**
         * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.
         *
         * **Syntax**: `none | <filter-function-list>`
         *
         * **Initial value**: `none`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  | IE  |
         * | :------: | :-----: | :-----: | :----: | :-: |
         * |  **53**  | **35**  | **9.1** | **12** | No  |
         * | 18 _-x-_ |         | 6 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/filter
         */
        filter?: Property.Filter | undefined;
        /**
         * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.
         *
         * **Syntax**: `content | <'width'>`
         *
         * **Initial value**: `auto`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **29**  | **22**  |  **9**  | **12** | **11** |
         * | 22 _-x-_ |         | 7 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis
         */
        "flex-basis"?: Property.FlexBasis<TLength> | undefined;
        /**
         * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
         *
         * **Syntax**: `row | row-reverse | column | column-reverse`
         *
         * **Initial value**: `row`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |
         * | :------: | :-----: | :-----: | :----: | :------: |
         * |  **29**  | **20**  |  **9**  | **12** |  **11**  |
         * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction
         */
        "flex-direction"?: Property.FlexDirection | undefined;
        /**
         * The **`flex-grow`** CSS property sets the flex grow factor of a flex item main size.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |
         * | :------: | :-----: | :-----: | :----: | :----------------------: |
         * |  **29**  | **20**  |  **9**  | **12** |          **11**          |
         * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow
         */
        "flex-grow"?: Property.FlexGrow | undefined;
        /**
         * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `1`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **29**  | **20**  |  **9**  | **12** | **10** |
         * | 22 _-x-_ |         | 8 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink
         */
        "flex-shrink"?: Property.FlexShrink | undefined;
        /**
         * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.
         *
         * **Syntax**: `nowrap | wrap | wrap-reverse`
         *
         * **Initial value**: `nowrap`
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :------: | :-----: | :-------: | :----: | :----: |
         * |  **29**  | **28**  |   **9**   | **12** | **11** |
         * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap
         */
        "flex-wrap"?: Property.FlexWrap | undefined;
        /**
         * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).
         *
         * **Syntax**: `left | right | none | inline-start | inline-end`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/float
         */
        float?: Property.Float | undefined;
        /**
         * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.
         *
         * **Syntax**: `[ <family-name> | <generic-family> ]#`
         *
         * **Initial value**: depends on user agent
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-family
         */
        "font-family"?: Property.FontFamily | undefined;
        /**
         * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.
         *
         * **Syntax**: `normal | <feature-tag-value>#`
         *
         * **Initial value**: `normal`
         *
         * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |
         * | :------: | :------: | :-----: | :----: | :----: |
         * |  **48**  |  **34**  | **9.1** | **15** | **10** |
         * | 16 _-x-_ | 15 _-x-_ |         |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings
         */
        "font-feature-settings"?: Property.FontFeatureSettings | undefined;
        /**
         * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.
         *
         * **Syntax**: `auto | normal | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **33** | **32**  |  **9**  | **79** | No  |
         * |        |         | 6 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning
         */
        "font-kerning"?: Property.FontKerning | undefined;
        /**
         * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.
         *
         * **Syntax**: `normal | <string>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **34**  |   No   |  No  | No  |
         * |        | 4 _-x-_ |        |      |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override
         */
        "font-language-override"?: Property.FontLanguageOverride | undefined;
        /**
         * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.
         *
         * **Syntax**: `auto | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **79** | **62**  | **11** | **17** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing
         */
        "font-optical-sizing"?: Property.FontOpticalSizing | undefined;
        /**
         * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.
         *
         * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-size
         */
        "font-size"?: Property.FontSize<TLength> | undefined;
        /**
         * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).
         *
         * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |  n/a   |  **1**  |   No   | n/a  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust
         */
        "font-size-adjust"?: Property.FontSizeAdjust | undefined;
        /**
         * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.
         *
         * **Syntax**: `auto | never | always | <absolute-size> | <length>`
         *
         * **Initial value**: `auto`
         *
         * |              Chrome              |              Firefox               |              Safari              |               Edge                | IE  |
         * | :------------------------------: | :--------------------------------: | :------------------------------: | :-------------------------------: | :-: |
         * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | **79** _(-webkit-font-smoothing)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth
         */
        "font-smooth"?: Property.FontSmooth<TLength> | undefined;
        /**
         * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.
         *
         * **Syntax**: `<font-stretch-absolute>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **60** |  **9**  | **11** | **12** | **9** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch
         */
        "font-stretch"?: Property.FontStretch | undefined;
        /**
         * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.
         *
         * **Syntax**: `normal | italic | oblique <angle>?`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-style
         */
        "font-style"?: Property.FontStyle | undefined;
        /**
         * The **`font-synthesis`** CSS property controls which missing typefaces, bold or italic, may be synthesized by the browser.
         *
         * **Syntax**: `none | [ weight || style || small-caps ]`
         *
         * **Initial value**: `weight style`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **34**  | **9**  |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis
         */
        "font-synthesis"?: Property.FontSynthesis | undefined;
        /**
         * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.
         *
         * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant
         */
        "font-variant"?: Property.FontVariant | undefined;
        /**
         * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.
         *
         * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **52** | **34**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps
         */
        "font-variant-caps"?: Property.FontVariantCaps | undefined;
        /**
         * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.
         *
         * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **63** | **34**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian
         */
        "font-variant-east-asian"?: Property.FontVariantEastAsian | undefined;
        /**
         * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.
         *
         * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`
         *
         * **Initial value**: `normal`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  | IE  |
         * | :------: | :-----: | :-----: | :----: | :-: |
         * |  **34**  | **34**  | **9.1** | **79** | No  |
         * | 31 _-x-_ |         | 7 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures
         */
        "font-variant-ligatures"?: Property.FontVariantLigatures | undefined;
        /**
         * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.
         *
         * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **52** | **34**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric
         */
        "font-variant-numeric"?: Property.FontVariantNumeric | undefined;
        /**
         * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.
         *
         * **Syntax**: `normal | sub | super`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  | Edge | IE  |
         * | :----: | :-----: | :-----: | :--: | :-: |
         * |   No   | **34**  | **9.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position
         */
        "font-variant-position"?: Property.FontVariantPosition | undefined;
        /**
         * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.
         *
         * **Syntax**: `normal | [ <string> <number> ]#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **62** | **62**  | **11** | **17** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings
         */
        "font-variation-settings"?: Property.FontVariationSettings | undefined;
        /**
         * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.
         *
         * **Syntax**: `<font-weight-absolute> | bolder | lighter`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **2**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font-weight
         */
        "font-weight"?: Property.FontWeight | undefined;
        /**
         * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.
         *
         * **Syntax**: `auto | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |              Edge               |                 IE                  |
         * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |
         * | **89** |   No    |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |
         * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust
         */
        "forced-color-adjust"?: Property.ForcedColorAdjust | undefined;
        /**
         * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.
         *
         * **Syntax**: `<track-size>+`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |             IE              |
         * | :----: | :-----: | :------: | :----: | :-------------------------: |
         * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns
         */
        "grid-auto-columns"?: Property.GridAutoColumns<TLength> | undefined;
        /**
         * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.
         *
         * **Syntax**: `[ row | column ] || dense`
         *
         * **Initial value**: `row`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow
         */
        "grid-auto-flow"?: Property.GridAutoFlow | undefined;
        /**
         * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.
         *
         * **Syntax**: `<track-size>+`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |            IE            |
         * | :----: | :-----: | :------: | :----: | :----------------------: |
         * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows
         */
        "grid-auto-rows"?: Property.GridAutoRows<TLength> | undefined;
        /**
         * The **`grid-column-end`** CSS property specifies a grid item’s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.
         *
         * **Syntax**: `<grid-line>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end
         */
        "grid-column-end"?: Property.GridColumnEnd | undefined;
        /**
         * The **`grid-column-start`** CSS property specifies a grid item’s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.
         *
         * **Syntax**: `<grid-line>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start
         */
        "grid-column-start"?: Property.GridColumnStart | undefined;
        /**
         * The **`grid-row-end`** CSS property specifies a grid item’s end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.
         *
         * **Syntax**: `<grid-line>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end
         */
        "grid-row-end"?: Property.GridRowEnd | undefined;
        /**
         * The **`grid-row-start`** CSS property specifies a grid item’s start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.
         *
         * **Syntax**: `<grid-line>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start
         */
        "grid-row-start"?: Property.GridRowStart | undefined;
        /**
         * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.
         *
         * **Syntax**: `none | <string>+`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas
         */
        "grid-template-areas"?: Property.GridTemplateAreas | undefined;
        /**
         * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.
         *
         * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |             IE              |
         * | :----: | :-----: | :------: | :----: | :-------------------------: |
         * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns
         */
        "grid-template-columns"?: Property.GridTemplateColumns<TLength> | undefined;
        /**
         * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.
         *
         * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |            IE            |
         * | :----: | :-----: | :------: | :----: | :----------------------: |
         * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows
         */
        "grid-template-rows"?: Property.GridTemplateRows<TLength> | undefined;
        /**
         * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.
         *
         * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   |   No    | **10** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation
         */
        "hanging-punctuation"?: Property.HangingPunctuation | undefined;
        /**
         * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.
         *
         * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/height
         */
        height?: Property.Height<TLength> | undefined;
        /**
         * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
         *
         * **Syntax**: `none | manual | auto`
         *
         * **Initial value**: `manual`
         *
         * |  Chrome  | Firefox |    Safari     |  Edge  |      IE      |
         * | :------: | :-----: | :-----------: | :----: | :----------: |
         * |  **55**  | **43**  | **5.1** _-x-_ | **79** | **10** _-x-_ |
         * | 13 _-x-_ | 6 _-x-_ |               |        |              |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/hyphens
         */
        hyphens?: Property.Hyphens | undefined;
        /**
         * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image. It should _not_ be used for any other orientation adjustments; instead, the `transform` property should be used with the `rotate` `<transform-function>`.
         *
         * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`
         *
         * **Initial value**: `from-image`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **81** | **26**  | **13.1** | **81** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation
         */
        "image-orientation"?: Property.ImageOrientation | undefined;
        /**
         * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.
         *
         * **Syntax**: `auto | crisp-edges | pixelated`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **13** | **3.6** | **6**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering
         */
        "image-rendering"?: Property.ImageRendering | undefined;
        /**
         * **Syntax**: `[ from-image || <resolution> ] && snap?`
         *
         * **Initial value**: `1dppx`
         */
        "image-resolution"?: Property.ImageResolution | undefined;
        /**
         * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.
         *
         * **Syntax**: `normal | [ <number> <integer>? ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox |   Safari    | Edge | IE  |
         * | :----: | :-----: | :---------: | :--: | :-: |
         * |   No   |   No    | **9** _-x-_ |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter
         */
        "initial-letter"?: Property.InitialLetter | undefined;
        /**
         * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'width'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inline-size
         */
        "inline-size"?: Property.InlineSize<TLength> | undefined;
        /**
         * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.
         *
         * **Syntax**: `<'top'>{1,4}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset
         */
        inset?: Property.Inset<TLength> | undefined;
        /**
         * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-block
         */
        "inset-block"?: Property.InsetBlock<TLength> | undefined;
        /**
         * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end
         */
        "inset-block-end"?: Property.InsetBlockEnd<TLength> | undefined;
        /**
         * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start
         */
        "inset-block-start"?: Property.InsetBlockStart<TLength> | undefined;
        /**
         * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline
         */
        "inset-inline"?: Property.InsetInline<TLength> | undefined;
        /**
         * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end
         */
        "inset-inline-end"?: Property.InsetInlineEnd<TLength> | undefined;
        /**
         * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **63**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start
         */
        "inset-inline-start"?: Property.InsetInlineStart<TLength> | undefined;
        /**
         * The **`isolation`** CSS property determines whether an element must create a new stacking context.
         *
         * **Syntax**: `auto | isolate`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **41** | **36**  | **8**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/isolation
         */
        isolation?: Property.Isolation | undefined;
        /**
         * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.
         *
         * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :------: | :-----: | :-------: | :----: | :----: |
         * |  **52**  | **20**  |   **9**   | **12** | **11** |
         * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/justify-content
         */
        "justify-content"?: Property.JustifyContent | undefined;
        /**
         * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.
         *
         * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`
         *
         * **Initial value**: `legacy`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **52** | **20**  | **9**  | **12** | **11** |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **45**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/justify-items
         */
        "justify-items"?: Property.JustifyItems | undefined;
        /**
         * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`
         *
         * **Initial value**: `auto`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **45**  | **10.1** | **16** | No  |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  |      IE      |
         * | :----: | :-----: | :------: | :----: | :----------: |
         * | **57** | **45**  | **10.1** | **16** | **10** _-x-_ |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/justify-self
         */
        "justify-self"?: Property.JustifySelf | undefined;
        /**
         * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.
         *
         * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   |   n/a   |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks
         */
        "justify-tracks"?: Property.JustifyTracks | undefined;
        /**
         * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/left
         */
        left?: Property.Left<TLength> | undefined;
        /**
         * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.
         *
         * **Syntax**: `normal | <length>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing
         */
        "letter-spacing"?: Property.LetterSpacing<TLength> | undefined;
        /**
         * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
         *
         * **Syntax**: `auto | loose | normal | strict | anywhere`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE    |
         * | :-----: | :-----: | :-----: | :----: | :-----: |
         * | **58**  | **69**  | **11**  | **14** | **5.5** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |         |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/line-break
         */
        "line-break"?: Property.LineBreak | undefined;
        /**
         * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.
         *
         * **Syntax**: `normal | <number> | <length> | <percentage>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/line-height
         */
        "line-height"?: Property.LineHeight<TLength> | undefined;
        /**
         * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |  n/a   |   No    |   No   | n/a  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step
         */
        "line-height-step"?: Property.LineHeightStep<TLength> | undefined;
        /**
         * The **`list-style-image`** CSS property sets an image to be used as the list item marker.
         *
         * **Syntax**: `<image> | none`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image
         */
        "list-style-image"?: Property.ListStyleImage | undefined;
        /**
         * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.
         *
         * **Syntax**: `inside | outside`
         *
         * **Initial value**: `outside`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position
         */
        "list-style-position"?: Property.ListStylePosition | undefined;
        /**
         * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.
         *
         * **Syntax**: `<counter-style> | <string> | none`
         *
         * **Initial value**: `disc`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type
         */
        "list-style-type"?: Property.ListStyleType | undefined;
        /**
         * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'margin-left'>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-block
         */
        "margin-block"?: Property.MarginBlock<TLength> | undefined;
        /**
         * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end
         */
        "margin-block-end"?: Property.MarginBlockEnd<TLength> | undefined;
        /**
         * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start
         */
        "margin-block-start"?: Property.MarginBlockStart<TLength> | undefined;
        /**
         * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom
         */
        "margin-bottom"?: Property.MarginBottom<TLength> | undefined;
        /**
         * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'margin-left'>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline
         */
        "margin-inline"?: Property.MarginInline<TLength> | undefined;
        /**
         * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         *
         * |          Chrome          |        Firefox        |          Safari          |  Edge  | IE  |
         * | :----------------------: | :-------------------: | :----------------------: | :----: | :-: |
         * |          **69**          |        **41**         |         **12.1**         | **79** | No  |
         * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end
         */
        "margin-inline-end"?: Property.MarginInlineEnd<TLength> | undefined;
        /**
         * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         *
         * |           Chrome           |         Firefox         |           Safari           |  Edge  | IE  |
         * | :------------------------: | :---------------------: | :------------------------: | :----: | :-: |
         * |           **69**           |         **41**          |          **12.1**          | **79** | No  |
         * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start
         */
        "margin-inline-start"?: Property.MarginInlineStart<TLength> | undefined;
        /**
         * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-left
         */
        "margin-left"?: Property.MarginLeft<TLength> | undefined;
        /**
         * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-right
         */
        "margin-right"?: Property.MarginRight<TLength> | undefined;
        /**
         * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin-top
         */
        "margin-top"?: Property.MarginTop<TLength> | undefined;
        /**
         * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.
         *
         * **Syntax**: `luminance | alpha`
         *
         * **Initial value**: `alpha`
         */
        "mask-border-mode"?: Property.MaskBorderMode | undefined;
        /**
         * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.
         *
         * **Syntax**: `[ <length> | <number> ]{1,4}`
         *
         * **Initial value**: `0`
         *
         * |                 Chrome                  | Firefox |                  Safari                   |                   Edge                   | IE  |
         * | :-------------------------------------: | :-----: | :---------------------------------------: | :--------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-outset)_ |   No    | **3.1** _(-webkit-mask-box-image-outset)_ | **79** _(-webkit-mask-box-image-outset)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset
         */
        "mask-border-outset"?: Property.MaskBorderOutset<TLength> | undefined;
        /**
         * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.
         *
         * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`
         *
         * **Initial value**: `stretch`
         *
         * |                 Chrome                  | Firefox |                  Safari                   |                   Edge                   | IE  |
         * | :-------------------------------------: | :-----: | :---------------------------------------: | :--------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-repeat)_ |   No    | **3.1** _(-webkit-mask-box-image-repeat)_ | **79** _(-webkit-mask-box-image-repeat)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat
         */
        "mask-border-repeat"?: Property.MaskBorderRepeat | undefined;
        /**
         * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.
         *
         * **Syntax**: `<number-percentage>{1,4} fill?`
         *
         * **Initial value**: `0`
         *
         * |                 Chrome                 | Firefox |                  Safari                  |                  Edge                   | IE  |
         * | :------------------------------------: | :-----: | :--------------------------------------: | :-------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-slice)_ |   No    | **3.1** _(-webkit-mask-box-image-slice)_ | **79** _(-webkit-mask-box-image-slice)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice
         */
        "mask-border-slice"?: Property.MaskBorderSlice | undefined;
        /**
         * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.
         *
         * **Syntax**: `none | <image>`
         *
         * **Initial value**: `none`
         *
         * |                 Chrome                  | Firefox |                  Safari                   |                   Edge                   | IE  |
         * | :-------------------------------------: | :-----: | :---------------------------------------: | :--------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-source)_ |   No    | **3.1** _(-webkit-mask-box-image-source)_ | **79** _(-webkit-mask-box-image-source)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source
         */
        "mask-border-source"?: Property.MaskBorderSource | undefined;
        /**
         * The **`mask-border-width`** CSS property sets the width of an element's mask border.
         *
         * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`
         *
         * **Initial value**: `auto`
         *
         * |                 Chrome                 | Firefox |                  Safari                  |                  Edge                   | IE  |
         * | :------------------------------------: | :-----: | :--------------------------------------: | :-------------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image-width)_ |   No    | **3.1** _(-webkit-mask-box-image-width)_ | **79** _(-webkit-mask-box-image-width)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width
         */
        "mask-border-width"?: Property.MaskBorderWidth<TLength> | undefined;
        /**
         * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.
         *
         * **Syntax**: `[ <geometry-box> | no-clip ]#`
         *
         * **Initial value**: `border-box`
         *
         * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |
         * | :---------: | :-----: | :---------: | :----------: | :-: |
         * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip
         */
        "mask-clip"?: Property.MaskClip | undefined;
        /**
         * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.
         *
         * **Syntax**: `<compositing-operator>#`
         *
         * **Initial value**: `add`
         *
         * | Chrome | Firefox | Safari | Edge  | IE  |
         * | :----: | :-----: | :----: | :---: | :-: |
         * |   No   | **53**  |   No   | 18-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite
         */
        "mask-composite"?: Property.MaskComposite | undefined;
        /**
         * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.
         *
         * **Syntax**: `<mask-reference>#`
         *
         * **Initial value**: `none`
         *
         * |   Chrome    | Firefox |   Safari    | Edge  | IE  |
         * | :---------: | :-----: | :---------: | :---: | :-: |
         * | **1** _-x-_ | **53**  | **4** _-x-_ | 16-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-image
         */
        "mask-image"?: Property.MaskImage | undefined;
        /**
         * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.
         *
         * **Syntax**: `<masking-mode>#`
         *
         * **Initial value**: `match-source`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **53**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode
         */
        "mask-mode"?: Property.MaskMode | undefined;
        /**
         * The **`mask-origin`** CSS property sets the origin of a mask.
         *
         * **Syntax**: `<geometry-box>#`
         *
         * **Initial value**: `border-box`
         *
         * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |
         * | :---------: | :-----: | :---------: | :----------: | :-: |
         * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin
         */
        "mask-origin"?: Property.MaskOrigin | undefined;
        /**
         * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.
         *
         * **Syntax**: `<position>#`
         *
         * **Initial value**: `center`
         *
         * |   Chrome    | Firefox |    Safari     | Edge  | IE  |
         * | :---------: | :-----: | :-----------: | :---: | :-: |
         * | **1** _-x-_ | **53**  | **3.1** _-x-_ | 18-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-position
         */
        "mask-position"?: Property.MaskPosition<TLength> | undefined;
        /**
         * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.
         *
         * **Syntax**: `<repeat-style>#`
         *
         * **Initial value**: `no-repeat`
         *
         * |   Chrome    | Firefox |    Safari     | Edge  | IE  |
         * | :---------: | :-----: | :-----------: | :---: | :-: |
         * | **1** _-x-_ | **53**  | **3.1** _-x-_ | 18-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat
         */
        "mask-repeat"?: Property.MaskRepeat | undefined;
        /**
         * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto`
         *
         * |   Chrome    | Firefox |   Safari    | Edge  | IE  |
         * | :---------: | :-----: | :---------: | :---: | :-: |
         * | **4** _-x-_ | **53**  | **4** _-x-_ | 18-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-size
         */
        "mask-size"?: Property.MaskSize<TLength> | undefined;
        /**
         * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.
         *
         * **Syntax**: `luminance | alpha`
         *
         * **Initial value**: `luminance`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **24** | **35**  | **7**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-type
         */
        "mask-type"?: Property.MaskType | undefined;
        /**
         * The `math-style` property indicates whether MathML equations should render with normal or compact height.
         *
         * **Syntax**: `normal | compact`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * |  n/a   |   n/a   | **14.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/math-style
         */
        "math-style"?: Property.MathStyle | undefined;
        /**
         * The `**max-block-size**` CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.
         *
         * **Syntax**: `<'max-width'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size
         */
        "max-block-size"?: Property.MaxBlockSize<TLength> | undefined;
        /**
         * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.
         *
         * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **18** |  **1**  | **1.3** | **12** | **7** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/max-height
         */
        "max-height"?: Property.MaxHeight<TLength> | undefined;
        /**
         * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'max-width'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |   Safari   |  Edge  | IE  |
         * | :----: | :-----: | :--------: | :----: | :-: |
         * | **57** | **41**  |  **12.1**  | **79** | No  |
         * |        |         | 10.1 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size
         */
        "max-inline-size"?: Property.MaxInlineSize<TLength> | undefined;
        /**
         * **Syntax**: `none | <integer>`
         *
         * **Initial value**: `none`
         */
        "max-lines"?: Property.MaxLines | undefined;
        /**
         * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.
         *
         * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **7** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/max-width
         */
        "max-width"?: Property.MaxWidth<TLength> | undefined;
        /**
         * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'min-width'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size
         */
        "min-block-size"?: Property.MinBlockSize<TLength> | undefined;
        /**
         * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.
         *
         * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **3**  | **1.3** | **12** | **7** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/min-height
         */
        "min-height"?: Property.MinHeight<TLength> | undefined;
        /**
         * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'min-width'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size
         */
        "min-inline-size"?: Property.MinInlineSize<TLength> | undefined;
        /**
         * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.
         *
         * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **7** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/min-width
         */
        "min-width"?: Property.MinWidth<TLength> | undefined;
        /**
         * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.
         *
         * **Syntax**: `<blend-mode>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **41** | **32**  | **8**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode
         */
        "mix-blend-mode"?: Property.MixBlendMode | undefined;
        /**
         * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **55**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-distance)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance
         */
        "motion-distance"?: Property.OffsetDistance<TLength> | undefined;
        /**
         * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.
         *
         * **Syntax**: `none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`
         *
         * **Initial value**: `none`
         *
         * |       Chrome       | Firefox | Safari |  Edge  | IE  |
         * | :----------------: | :-----: | :----: | :----: | :-: |
         * |       **55**       | **72**  |   No   | **79** | No  |
         * | 46 _(motion-path)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-path
         */
        "motion-path"?: Property.OffsetPath | undefined;
        /**
         * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.
         *
         * **Syntax**: `[ auto | reverse ] || <angle>`
         *
         * **Initial value**: `auto`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **56**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-rotation)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
         */
        "motion-rotation"?: Property.OffsetRotate | undefined;
        /**
         * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.
         *
         * **Syntax**: `fill | contain | cover | none | scale-down`
         *
         * **Initial value**: `fill`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **32** | **36**  | **10** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/object-fit
         */
        "object-fit"?: Property.ObjectFit | undefined;
        /**
         * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **32** | **36**  | **10** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/object-position
         */
        "object-position"?: Property.ObjectPosition<TLength> | undefined;
        /**
         * **Syntax**: `auto | <position>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **79** | **72**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor
         */
        "offset-anchor"?: Property.OffsetAnchor<TLength> | undefined;
        /**
         * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **55**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-distance)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance
         */
        "offset-distance"?: Property.OffsetDistance<TLength> | undefined;
        /**
         * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.
         *
         * **Syntax**: `none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`
         *
         * **Initial value**: `none`
         *
         * |       Chrome       | Firefox | Safari |  Edge  | IE  |
         * | :----------------: | :-----: | :----: | :----: | :-: |
         * |       **55**       | **72**  |   No   | **79** | No  |
         * | 46 _(motion-path)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-path
         */
        "offset-path"?: Property.OffsetPath | undefined;
        /**
         * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.
         *
         * **Syntax**: `[ auto | reverse ] || <angle>`
         *
         * **Initial value**: `auto`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **56**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-rotation)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
         */
        "offset-rotate"?: Property.OffsetRotate | undefined;
        /**
         * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.
         *
         * **Syntax**: `[ auto | reverse ] || <angle>`
         *
         * **Initial value**: `auto`
         *
         * |         Chrome         | Firefox | Safari |  Edge  | IE  |
         * | :--------------------: | :-----: | :----: | :----: | :-: |
         * |         **56**         | **72**  |   No   | **79** | No  |
         * | 46 _(motion-rotation)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
         */
        "offset-rotation"?: Property.OffsetRotate | undefined;
        /**
         * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.
         *
         * **Syntax**: `<alpha-value>`
         *
         * **Initial value**: `1.0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **2**  | **12** | **9** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/opacity
         */
        opacity?: Property.Opacity | undefined;
        /**
         * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `0`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |
         * | :------: | :-----: | :-----: | :----: | :------: |
         * |  **29**  | **20**  |  **9**  | **12** |  **11**  |
         * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/order
         */
        order?: Property.Order | undefined;
        /**
         * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `2`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **25** |   No    | **1.3** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/orphans
         */
        orphans?: Property.Orphans | undefined;
        /**
         * The **`outline-color`** CSS property sets the color of an element's outline.
         *
         * **Syntax**: `<color> | invert`
         *
         * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **1.5** | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline-color
         */
        "outline-color"?: Property.OutlineColor | undefined;
        /**
         * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **1**  | **1.5** | **1.2** | **15** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset
         */
        "outline-offset"?: Property.OutlineOffset<TLength> | undefined;
        /**
         * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
         *
         * **Syntax**: `auto | <'border-style'>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **1.5** | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline-style
         */
        "outline-style"?: Property.OutlineStyle | undefined;
        /**
         * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **1.5** | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline-width
         */
        "outline-width"?: Property.OutlineWidth<TLength> | undefined;
        /**
         * **Syntax**: `auto | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **56** | **66**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor
         */
        "overflow-anchor"?: Property.OverflowAnchor | undefined;
        /**
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **69**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block
         */
        "overflow-block"?: Property.OverflowBlock | undefined;
        /**
         * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.
         *
         * **Syntax**: `padding-box | content-box`
         *
         * **Initial value**: `padding-box`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **29**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Mozilla/Gecko/Chrome/CSS/overflow-clip-box
         */
        "overflow-clip-box"?: Property.OverflowClipBox | undefined;
        /**
         * **Syntax**: `<visual-box> || <length [0,∞]>`
         *
         * **Initial value**: `0px`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **90** |   No    |   No   | **90** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin
         */
        "overflow-clip-margin"?: Property.OverflowClipMargin<TLength> | undefined;
        /**
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **69**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline
         */
        "overflow-inline"?: Property.OverflowInline | undefined;
        /**
         * The `**overflow-wrap**` CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.
         *
         * **Syntax**: `normal | break-word | anywhere`
         *
         * **Initial value**: `normal`
         *
         * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |
         * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |
         * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |
         * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap
         */
        "overflow-wrap"?: Property.OverflowWrap | undefined;
        /**
         * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.
         *
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  | **3.5** | **3**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x
         */
        "overflow-x"?: Property.OverflowX | undefined;
        /**
         * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.
         *
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  | **3.5** | **3**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y
         */
        "overflow-y"?: Property.OverflowY | undefined;
        /**
         * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.
         *
         * **Syntax**: `contain | none | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **77** | **73**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block
         */
        "overscroll-behavior-block"?: Property.OverscrollBehaviorBlock | undefined;
        /**
         * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.
         *
         * **Syntax**: `contain | none | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **77** | **73**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline
         */
        "overscroll-behavior-inline"?: Property.OverscrollBehaviorInline | undefined;
        /**
         * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.
         *
         * **Syntax**: `contain | none | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **63** | **59**  |   No   | **18** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x
         */
        "overscroll-behavior-x"?: Property.OverscrollBehaviorX | undefined;
        /**
         * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.
         *
         * **Syntax**: `contain | none | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **63** | **59**  |   No   | **18** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y
         */
        "overscroll-behavior-y"?: Property.OverscrollBehaviorY | undefined;
        /**
         * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-block
         */
        "padding-block"?: Property.PaddingBlock<TLength> | undefined;
        /**
         * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end
         */
        "padding-block-end"?: Property.PaddingBlockEnd<TLength> | undefined;
        /**
         * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start
         */
        "padding-block-start"?: Property.PaddingBlockStart<TLength> | undefined;
        /**
         * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.
         *
         * **Syntax**: `<length> | <percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom
         */
        "padding-bottom"?: Property.PaddingBottom<TLength> | undefined;
        /**
         * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline
         */
        "padding-inline"?: Property.PaddingInline<TLength> | undefined;
        /**
         * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         *
         * |          Chrome           |        Firefox         |          Safari           |  Edge  | IE  |
         * | :-----------------------: | :--------------------: | :-----------------------: | :----: | :-: |
         * |          **69**           |         **41**         |         **12.1**          | **79** | No  |
         * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end
         */
        "padding-inline-end"?: Property.PaddingInlineEnd<TLength> | undefined;
        /**
         * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         *
         * |           Chrome            |         Firefox          |           Safari            |  Edge  | IE  |
         * | :-------------------------: | :----------------------: | :-------------------------: | :----: | :-: |
         * |           **69**            |          **41**          |          **12.1**           | **79** | No  |
         * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start
         */
        "padding-inline-start"?: Property.PaddingInlineStart<TLength> | undefined;
        /**
         * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.
         *
         * **Syntax**: `<length> | <percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-left
         */
        "padding-left"?: Property.PaddingLeft<TLength> | undefined;
        /**
         * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.
         *
         * **Syntax**: `<length> | <percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-right
         */
        "padding-right"?: Property.PaddingRight<TLength> | undefined;
        /**
         * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.
         *
         * **Syntax**: `<length> | <percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding-top
         */
        "padding-top"?: Property.PaddingTop<TLength> | undefined;
        /**
         * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.
         *
         * **Syntax**: `auto | always | avoid | left | right | recto | verso`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after
         */
        "page-break-after"?: Property.PageBreakAfter | undefined;
        /**
         * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.
         *
         * **Syntax**: `auto | always | avoid | left | right | recto | verso`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **1**  | **1.2** | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before
         */
        "page-break-before"?: Property.PageBreakBefore | undefined;
        /**
         * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.
         *
         * **Syntax**: `auto | avoid`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **19**  | **1.3** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside
         */
        "page-break-inside"?: Property.PageBreakInside | undefined;
        /**
         * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.
         *
         * **Syntax**: `normal | [ fill || stroke || markers ]`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **35** | **60**  | **8**  | **17** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/paint-order
         */
        "paint-order"?: Property.PaintOrder | undefined;
        /**
         * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.
         *
         * **Syntax**: `none | <length>`
         *
         * **Initial value**: `none`
         *
         * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |
         * | :------: | :------: | :-----: | :----: | :----: |
         * |  **36**  |  **16**  |  **9**  | **12** | **10** |
         * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/perspective
         */
        perspective?: Property.Perspective<TLength> | undefined;
        /**
         * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         *
         * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |
         * | :------: | :------: | :-----: | :----: | :----: |
         * |  **36**  |  **16**  |  **9**  | **12** | **10** |
         * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin
         */
        "perspective-origin"?: Property.PerspectiveOrigin<TLength> | undefined;
        /**
         * The `**place-content**` CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.
         *
         * **Syntax**: `<'align-content'> <'justify-content'>?`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **59** | **45**  | **9**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/place-content
         */
        "place-content"?: Property.PlaceContent | undefined;
        /**
         * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.
         *
         * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * | **1**  | **1.5** | **4**  | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events
         */
        "pointer-events"?: Property.PointerEvents | undefined;
        /**
         * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.
         *
         * **Syntax**: `static | relative | absolute | sticky | fixed`
         *
         * **Initial value**: `static`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/position
         */
        position?: Property.Position | undefined;
        /**
         * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.
         *
         * **Syntax**: `none | auto | [ <string> <string> ]+`
         *
         * **Initial value**: depends on user agent
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **11** | **1.5** | **9**  | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/quotes
         */
        quotes?: Property.Quotes | undefined;
        /**
         * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.
         *
         * **Syntax**: `none | both | horizontal | vertical | block | inline`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **1**  |  **4**  | **3**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/resize
         */
        resize?: Property.Resize | undefined;
        /**
         * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/right
         */
        right?: Property.Right<TLength> | undefined;
        /**
         * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.
         *
         * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * |   No   | **72**  | **14.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/rotate
         */
        rotate?: Property.Rotate | undefined;
        /**
         * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.
         *
         * **Syntax**: `normal | <length-percentage>`
         *
         * **Initial value**: `normal`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **84** | **63**  | **14.1** | **84** | No  |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * |       Chrome        |       Firefox       |        Safari         |  Edge  | IE  |
         * | :-----------------: | :-----------------: | :-------------------: | :----: | :-: |
         * |       **66**        |       **61**        |        **12**         | **16** | No  |
         * | 57 _(grid-row-gap)_ | 52 _(grid-row-gap)_ | 10.1 _(grid-row-gap)_ |        |     |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/row-gap
         */
        "row-gap"?: Property.RowGap<TLength> | undefined;
        /**
         * The `**ruby-align**` CSS property defines the distribution of the different ruby elements over the base.
         *
         * **Syntax**: `start | center | space-between | space-around`
         *
         * **Initial value**: `space-around`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **38**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align
         */
        "ruby-align"?: Property.RubyAlign | undefined;
        /**
         * **Syntax**: `separate | collapse | auto`
         *
         * **Initial value**: `separate`
         */
        "ruby-merge"?: Property.RubyMerge | undefined;
        /**
         * The `**ruby-position**` CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (`over`), under it (`under`), or between the characters, on their right side (`inter-character`).
         *
         * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`
         *
         * **Initial value**: `alternate`
         *
         * | Chrome  | Firefox |    Safari     | Edge  | IE  |
         * | :-----: | :-----: | :-----------: | :---: | :-: |
         * | **84**  | **38**  | **6.1** _-x-_ | 12-79 | No  |
         * | 1 _-x-_ |         |               |       |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position
         */
        "ruby-position"?: Property.RubyPosition | undefined;
        /**
         * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.
         *
         * **Syntax**: `none | <number>{1,3}`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * |   No   | **72**  | **14.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scale
         */
        scale?: Property.Scale | undefined;
        /**
         * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.
         *
         * **Syntax**: `auto | smooth`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **61** | **36**  |  n/a   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior
         */
        "scroll-behavior"?: Property.ScrollBehavior | undefined;
        /**
         * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.
         *
         * **Syntax**: `<length>{1,4}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |          Safari           |  Edge  | IE  |
         * | :----: | :-----: | :-----------------------: | :----: | :-: |
         * | **69** | **90**  |         **14.1**          | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin
         */
        "scroll-margin"?: Property.ScrollMargin<TLength> | undefined;
        /**
         * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.
         *
         * **Syntax**: `<length>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block
         */
        "scroll-margin-block"?: Property.ScrollMarginBlock<TLength> | undefined;
        /**
         * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end
         */
        "scroll-margin-block-end"?: Property.ScrollMarginBlockEnd<TLength> | undefined;
        /**
         * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start
         */
        "scroll-margin-block-start"?: Property.ScrollMarginBlockStart<TLength> | undefined;
        /**
         * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |              Safari              |  Edge  | IE  |
         * | :----: | :-----: | :------------------------------: | :----: | :-: |
         * | **69** | **68**  |             **14.1**             | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-bottom)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom
         */
        "scroll-margin-bottom"?: Property.ScrollMarginBottom<TLength> | undefined;
        /**
         * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.
         *
         * **Syntax**: `<length>{1,2}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline
         */
        "scroll-margin-inline"?: Property.ScrollMarginInline<TLength> | undefined;
        /**
         * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end
         */
        "scroll-margin-inline-end"?: Property.ScrollMarginInlineEnd<TLength> | undefined;
        /**
         * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start
         */
        "scroll-margin-inline-start"?: Property.ScrollMarginInlineStart<TLength> | undefined;
        /**
         * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |             Safari             |  Edge  | IE  |
         * | :----: | :-----: | :----------------------------: | :----: | :-: |
         * | **69** | **68**  |            **14.1**            | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-left)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left
         */
        "scroll-margin-left"?: Property.ScrollMarginLeft<TLength> | undefined;
        /**
         * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |             Safari              |  Edge  | IE  |
         * | :----: | :-----: | :-----------------------------: | :----: | :-: |
         * | **69** | **68**  |            **14.1**             | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-right)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right
         */
        "scroll-margin-right"?: Property.ScrollMarginRight<TLength> | undefined;
        /**
         * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |            Safari             |  Edge  | IE  |
         * | :----: | :-----: | :---------------------------: | :----: | :-: |
         * | **69** | **68**  |           **14.1**            | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-top)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top
         */
        "scroll-margin-top"?: Property.ScrollMarginTop<TLength> | undefined;
        /**
         * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.
         *
         * **Syntax**: `[ auto | <length-percentage> ]{1,4}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding
         */
        "scroll-padding"?: Property.ScrollPadding<TLength> | undefined;
        /**
         * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.
         *
         * **Syntax**: `[ auto | <length-percentage> ]{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block
         */
        "scroll-padding-block"?: Property.ScrollPaddingBlock<TLength> | undefined;
        /**
         * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end
         */
        "scroll-padding-block-end"?: Property.ScrollPaddingBlockEnd<TLength> | undefined;
        /**
         * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start
         */
        "scroll-padding-block-start"?: Property.ScrollPaddingBlockStart<TLength> | undefined;
        /**
         * The `scroll-padding-bottom` property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom
         */
        "scroll-padding-bottom"?: Property.ScrollPaddingBottom<TLength> | undefined;
        /**
         * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.
         *
         * **Syntax**: `[ auto | <length-percentage> ]{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline
         */
        "scroll-padding-inline"?: Property.ScrollPaddingInline<TLength> | undefined;
        /**
         * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end
         */
        "scroll-padding-inline-end"?: Property.ScrollPaddingInlineEnd<TLength> | undefined;
        /**
         * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start
         */
        "scroll-padding-inline-start"?: Property.ScrollPaddingInlineStart<TLength> | undefined;
        /**
         * The `scroll-padding-left` property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left
         */
        "scroll-padding-left"?: Property.ScrollPaddingLeft<TLength> | undefined;
        /**
         * The `scroll-padding-right` property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right
         */
        "scroll-padding-right"?: Property.ScrollPaddingRight<TLength> | undefined;
        /**
         * The **`scroll-padding-top`** property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
         *
         * **Syntax**: `auto | <length-percentage>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **68**  | **14.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top
         */
        "scroll-padding-top"?: Property.ScrollPaddingTop<TLength> | undefined;
        /**
         * The `scroll-snap-align` property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.
         *
         * **Syntax**: `[ none | start | end | center ]{1,2}`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **69** | **68**  | **11** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align
         */
        "scroll-snap-align"?: Property.ScrollSnapAlign | undefined;
        /**
         * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.
         *
         * **Syntax**: `<length>{1,4}`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |          Safari           |  Edge  | IE  |
         * | :----: | :-----: | :-----------------------: | :----: | :-: |
         * | **69** |  68-90  |         **14.1**          | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin
         */
        "scroll-snap-margin"?: Property.ScrollMargin<TLength> | undefined;
        /**
         * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |              Safari              |  Edge  | IE  |
         * | :----: | :-----: | :------------------------------: | :----: | :-: |
         * | **69** | **68**  |             **14.1**             | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-bottom)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom
         */
        "scroll-snap-margin-bottom"?: Property.ScrollMarginBottom<TLength> | undefined;
        /**
         * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |             Safari             |  Edge  | IE  |
         * | :----: | :-----: | :----------------------------: | :----: | :-: |
         * | **69** | **68**  |            **14.1**            | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-left)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left
         */
        "scroll-snap-margin-left"?: Property.ScrollMarginLeft<TLength> | undefined;
        /**
         * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |             Safari              |  Edge  | IE  |
         * | :----: | :-----: | :-----------------------------: | :----: | :-: |
         * | **69** | **68**  |            **14.1**             | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-right)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right
         */
        "scroll-snap-margin-right"?: Property.ScrollMarginRight<TLength> | undefined;
        /**
         * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |            Safari             |  Edge  | IE  |
         * | :----: | :-----: | :---------------------------: | :----: | :-: |
         * | **69** | **68**  |           **14.1**            | **79** | No  |
         * |        |         | 11 _(scroll-snap-margin-top)_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top
         */
        "scroll-snap-margin-top"?: Property.ScrollMarginTop<TLength> | undefined;
        /**
         * The **`scroll-snap-stop`** CSS property defines whether the scroll container is allowed to "pass over" possible snap positions.
         *
         * **Syntax**: `normal | always`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **75** |   No    | **15** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop
         */
        "scroll-snap-stop"?: Property.ScrollSnapStop | undefined;
        /**
         * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.
         *
         * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari  |  Edge  |      IE      |
         * | :----: | :-----: | :-----: | :----: | :----------: |
         * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |
         * |        |         | 9 _-x-_ |        |              |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type
         */
        "scroll-snap-type"?: Property.ScrollSnapType | undefined;
        /**
         * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.
         *
         * **Syntax**: `auto | <color>{2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **64**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color
         */
        "scrollbar-color"?: Property.ScrollbarColor | undefined;
        /**
         * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.
         *
         * **Syntax**: `auto | stable && both-edges?`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **94** |   No    |   No   | **94** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter
         */
        "scrollbar-gutter"?: Property.ScrollbarGutter | undefined;
        /**
         * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element’s scrollbars when they are shown.
         *
         * **Syntax**: `auto | thin | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari | Edge | IE  |
         * | :----: | :-----: | :----: | :--: | :-: |
         * |   No   | **64**  |   No   |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width
         */
        "scrollbar-width"?: Property.ScrollbarWidth | undefined;
        /**
         * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.
         *
         * **Syntax**: `<alpha-value>`
         *
         * **Initial value**: `0.0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **37** | **62**  | **10.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold
         */
        "shape-image-threshold"?: Property.ShapeImageThreshold | undefined;
        /**
         * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **37** | **62**  | **10.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin
         */
        "shape-margin"?: Property.ShapeMargin<TLength> | undefined;
        /**
         * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.
         *
         * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **37** | **62**  | **10.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside
         */
        "shape-outside"?: Property.ShapeOutside | undefined;
        /**
         * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).
         *
         * **Syntax**: `<integer> | <length>`
         *
         * **Initial value**: `8`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **21** | **91**  | **7**  | **79** | No  |
         * |        | 4 _-x-_ |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/tab-size
         */
        "tab-size"?: Property.TabSize<TLength> | undefined;
        /**
         * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.
         *
         * **Syntax**: `auto | fixed`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **14** |  **1**  | **1**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/table-layout
         */
        "table-layout"?: Property.TableLayout | undefined;
        /**
         * The **`text-align`** CSS property sets the horizontal alignment of a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.
         *
         * **Syntax**: `start | end | left | right | center | justify | match-parent`
         *
         * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-align
         */
        "text-align"?: Property.TextAlign | undefined;
        /**
         * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.
         *
         * **Syntax**: `auto | start | end | left | right | center | justify`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **47** | **49**  |   No   | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last
         */
        "text-align-last"?: Property.TextAlignLast | undefined;
        /**
         * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
         *
         * **Syntax**: `none | all | [ digits <integer>? ]`
         *
         * **Initial value**: `none`
         *
         * |           Chrome           | Firefox |              Safari              | Edge  |                   IE                   |
         * | :------------------------: | :-----: | :------------------------------: | :---: | :------------------------------------: |
         * |           **48**           | **48**  | **5.1** _(-webkit-text-combine)_ | 15-79 | **11** _(-ms-text-combine-horizontal)_ |
         * | 9 _(-webkit-text-combine)_ |         |                                  |       |                                        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright
         */
        "text-combine-upright"?: Property.TextCombineUpright | undefined;
        /**
         * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **36**  | **12.1** | **79** | No  |
         * |        |         | 8 _-x-_  |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color
         */
        "text-decoration-color"?: Property.TextDecorationColor | undefined;
        /**
         * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.
         *
         * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **36**  | **12.1** | **79** | No  |
         * |        |         | 8 _-x-_  |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line
         */
        "text-decoration-line"?: Property.TextDecorationLine | undefined;
        /**
         * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.
         *
         * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`
         *
         * **Initial value**: `objects`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * | 57-64  |   No    | **12.1** |  No  | No  |
         * |        |         | 7 _-x-_  |      |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip
         */
        "text-decoration-skip"?: Property.TextDecorationSkip | undefined;
        /**
         * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.
         *
         * **Syntax**: `auto | all | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **64** | **70**  |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink
         */
        "text-decoration-skip-ink"?: Property.TextDecorationSkipInk | undefined;
        /**
         * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.
         *
         * **Syntax**: `solid | double | dotted | dashed | wavy`
         *
         * **Initial value**: `solid`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **36**  | **12.1** | **79** | No  |
         * |        |         | 8 _-x-_  |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style
         */
        "text-decoration-style"?: Property.TextDecorationStyle | undefined;
        /**
         * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.
         *
         * **Syntax**: `auto | from-font | <length> | <percentage> `
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **89** | **70**  | **12.1** | **89** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness
         */
        "text-decoration-thickness"?: Property.TextDecorationThickness<TLength> | undefined;
        /**
         * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.
         *
         * **Syntax**: `auto | from-font | <length> | <percentage> `
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  | Edge  | IE  |
         * | :----: | :-----: | :------: | :---: | :-: |
         * | 87-89  | **70**  | **12.1** | 87-89 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness
         */
        "text-decoration-width"?: Property.TextDecorationThickness<TLength> | undefined;
        /**
         * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * |    Chrome    | Firefox | Safari |     Edge     | IE  |
         * | :----------: | :-----: | :----: | :----------: | :-: |
         * | **25** _-x-_ | **46**  | **7**  | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color
         */
        "text-emphasis-color"?: Property.TextEmphasisColor | undefined;
        /**
         * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.
         *
         * **Syntax**: `[ over | under ] && [ right | left ]`
         *
         * **Initial value**: `over right`
         *
         * |    Chrome    | Firefox | Safari |     Edge     | IE  |
         * | :----------: | :-----: | :----: | :----------: | :-: |
         * | **25** _-x-_ | **46**  | **7**  | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position
         */
        "text-emphasis-position"?: Property.TextEmphasisPosition | undefined;
        /**
         * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.
         *
         * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`
         *
         * **Initial value**: `none`
         *
         * |    Chrome    | Firefox | Safari |     Edge     | IE  |
         * | :----------: | :-----: | :----: | :----------: | :-: |
         * | **25** _-x-_ | **46**  | **7**  | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style
         */
        "text-emphasis-style"?: Property.TextEmphasisStyle | undefined;
        /**
         * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.
         *
         * **Syntax**: `<length-percentage> && hanging? && each-line?`
         *
         * **Initial value**: `0`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-indent
         */
        "text-indent"?: Property.TextIndent<TLength> | undefined;
        /**
         * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.
         *
         * **Syntax**: `auto | inter-character | inter-word | none`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE   |
         * | :----: | :-----: | :----: | :----: | :----: |
         * |  n/a   | **55**  |   No   | **12** | **11** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-justify
         */
        "text-justify"?: Property.TextJustify | undefined;
        /**
         * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.
         *
         * **Syntax**: `mixed | upright | sideways`
         *
         * **Initial value**: `mixed`
         *
         * |  Chrome  | Firefox |  Safari   |  Edge  | IE  |
         * | :------: | :-----: | :-------: | :----: | :-: |
         * |  **48**  | **41**  |  **14**   | **79** | No  |
         * | 11 _-x-_ |         | 5.1 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation
         */
        "text-orientation"?: Property.TextOrientation | undefined;
        /**
         * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.
         *
         * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`
         *
         * **Initial value**: `clip`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  |  **7**  | **1.3** | **12** | **6** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow
         */
        "text-overflow"?: Property.TextOverflow | undefined;
        /**
         * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.
         *
         * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **4**  |  **1**  | **5**  | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering
         */
        "text-rendering"?: Property.TextRendering | undefined;
        /**
         * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.
         *
         * **Syntax**: `none | <shadow-t>#`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE   |
         * | :----: | :-----: | :-----: | :----: | :----: |
         * | **2**  | **3.5** | **1.1** | **12** | **10** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow
         */
        "text-shadow"?: Property.TextShadow | undefined;
        /**
         * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.
         *
         * **Syntax**: `none | auto | <percentage>`
         *
         * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **54** |   No    |   No   | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust
         */
        "text-size-adjust"?: Property.TextSizeAdjust | undefined;
        /**
         * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.
         *
         * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-transform
         */
        "text-transform"?: Property.TextTransform | undefined;
        /**
         * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.
         *
         * **Syntax**: `auto | <length> | <percentage> `
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **70**  | **12.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset
         */
        "text-underline-offset"?: Property.TextUnderlineOffset<TLength> | undefined;
        /**
         * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.
         *
         * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox |  Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :------: | :----: | :---: |
         * | **33** | **74**  | **12.1** | **12** | **6** |
         * |        |         | 9 _-x-_  |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position
         */
        "text-underline-position"?: Property.TextUnderlinePosition | undefined;
        /**
         * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.
         *
         * **Syntax**: `<length> | <percentage> | auto`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/top
         */
        top?: Property.Top<TLength> | undefined;
        /**
         * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).
         *
         * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |    IE    |
         * | :----: | :-----: | :----: | :----: | :------: |
         * | **36** | **52**  | **13** | **12** |  **11**  |
         * |        |         |        |        | 10 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/touch-action
         */
        "touch-action"?: Property.TouchAction | undefined;
        /**
         * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
         *
         * **Syntax**: `none | <transform-list>`
         *
         * **Initial value**: `none`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |
         * | :-----: | :-----: | :-------: | :----: | :-----: |
         * | **36**  | **16**  |   **9**   | **12** | **10**  |
         * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transform
         */
        transform?: Property.Transform | undefined;
        /**
         * The **`transform-box`** CSS property defines the layout box to which the `transform` and `transform-origin` properties relate.
         *
         * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`
         *
         * **Initial value**: `view-box`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **64** | **55**  | **11** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transform-box
         */
        "transform-box"?: Property.TransformBox | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         *
         * | Chrome  |  Firefox  | Safari  |  Edge  |   IE    |
         * | :-----: | :-------: | :-----: | :----: | :-----: |
         * | **36**  |  **16**   |  **9**  | **12** | **10**  |
         * | 1 _-x-_ | 3.5 _-x-_ | 2 _-x-_ |        | 9 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin
         */
        "transform-origin"?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.
         *
         * **Syntax**: `flat | preserve-3d`
         *
         * **Initial value**: `flat`
         *
         * |  Chrome  | Firefox  | Safari  |  Edge  | IE  |
         * | :------: | :------: | :-----: | :----: | :-: |
         * |  **36**  |  **16**  |  **9**  | **12** | No  |
         * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transform-style
         */
        "transform-style"?: Property.TransformStyle | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **26**  | **16**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay
         */
        "transition-delay"?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **26**  | **16**  |   **9**   | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration
         */
        "transition-duration"?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **26**  | **16**  |   **9**   | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition-property
         */
        "transition-property"?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **26**  | **16**  |   **9**   | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function
         */
        "transition-timing-function"?: Property.TransitionTimingFunction | undefined;
        /**
         * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.
         *
         * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`
         *
         * **Initial value**: `none`
         *
         * | Chrome | Firefox |  Safari  | Edge | IE  |
         * | :----: | :-----: | :------: | :--: | :-: |
         * |   No   | **72**  | **14.1** |  No  | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/translate
         */
        translate?: Property.Translate<TLength> | undefined;
        /**
         * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.
         *
         * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE    |
         * | :----: | :-----: | :-----: | :----: | :-----: |
         * | **2**  |  **1**  | **1.3** | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi
         */
        "unicode-bidi"?: Property.UnicodeBidi | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `auto | text | none | contain | all`
         *
         * **Initial value**: `auto`
         *
         * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |
         * | :-----: | :-----: | :---------: | :------: | :----------: |
         * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |
         * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/user-select
         */
        "user-select"?: Property.UserSelect | undefined;
        /**
         * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.
         *
         * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`
         *
         * **Initial value**: `baseline`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align
         */
        "vertical-align"?: Property.VerticalAlign<TLength> | undefined;
        /**
         * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.
         *
         * **Syntax**: `visible | hidden | collapse`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/visibility
         */
        visibility?: Property.Visibility | undefined;
        /**
         * The **`white-space`** CSS property sets how white space inside an element is handled.
         *
         * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/white-space
         */
        "white-space"?: Property.WhiteSpace | undefined;
        /**
         * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `2`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **25** |   No    | **1.3** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/widows
         */
        widows?: Property.Widows | undefined;
        /**
         * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.
         *
         * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/width
         */
        width?: Property.Width<TLength> | undefined;
        /**
         * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.
         *
         * **Syntax**: `auto | <animateable-feature>#`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **36** | **36**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/will-change
         */
        "will-change"?: Property.WillChange | undefined;
        /**
         * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.
         *
         * **Syntax**: `normal | break-all | keep-all | break-word`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  | **15**  | **3**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/word-break
         */
        "word-break"?: Property.WordBreak | undefined;
        /**
         * The **`word-spacing`** CSS property sets the length of space between words and between tags.
         *
         * **Syntax**: `normal | <length>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **6** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing
         */
        "word-spacing"?: Property.WordSpacing<TLength> | undefined;
        /**
         * The `**overflow-wrap**` CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.
         *
         * **Syntax**: `normal | break-word`
         *
         * **Initial value**: `normal`
         */
        "word-wrap"?: Property.WordWrap | undefined;
        /**
         * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).
         *
         * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`
         *
         * **Initial value**: `horizontal-tb`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |
         * | :-----: | :-----: | :-------: | :----: | :---: |
         * | **48**  | **41**  | **10.1**  | **12** | **9** |
         * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode
         */
        "writing-mode"?: Property.WritingMode | undefined;
        /**
         * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.
         *
         * **Syntax**: `auto | <integer>`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/z-index
         */
        "z-index"?: Property.ZIndex | undefined;
        /**
         * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.
         *
         * **Syntax**: `normal | reset | <number> | <percentage>`
         *
         * **Initial value**: `normal`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE    |
         * | :----: | :-----: | :-----: | :----: | :-----: |
         * | **1**  |   No    | **3.1** | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/zoom
         */
        zoom?: Property.Zoom | undefined;
    }
    export interface StandardShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * The `**all**` shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another stylesheet origin.
         *
         * **Syntax**: `initial | inherit | unset | revert`
         *
         * **Initial value**: There is no practical initial value for it.
         *
         * | Chrome | Firefox | Safari  |  Edge  | IE  |
         * | :----: | :-----: | :-----: | :----: | :-: |
         * | **37** | **27**  | **9.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/all
         */
        all?: Property.All | undefined;
        /**
         * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
         *
         * **Syntax**: `<single-animation>#`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **43**  | **16**  |  **9**  | **12** | **10** |
         * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/animation
         */
        animation?: Property.Animation<TTime> | undefined;
        /**
         * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.
         *
         * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background
         */
        background?: Property.Background<TLength> | undefined;
        /**
         * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.
         *
         * **Syntax**: `<bg-position>#`
         *
         * **Initial value**: `0% 0%`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/background-position
         */
        "background-position"?: Property.BackgroundPosition<TLength> | undefined;
        /**
         * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border
         */
        border?: Property.Border<TLength> | undefined;
        /**
         * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block
         */
        "border-block"?: Property.BorderBlock<TLength> | undefined;
        /**
         * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end
         */
        "border-block-end"?: Property.BorderBlockEnd<TLength> | undefined;
        /**
         * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start
         */
        "border-block-start"?: Property.BorderBlockStart<TLength> | undefined;
        /**
         * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom
         */
        "border-bottom"?: Property.BorderBottom<TLength> | undefined;
        /**
         * The **`border-color`** shorthand CSS property sets the color of an element's border.
         *
         * **Syntax**: `<color>{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-color
         */
        "border-color"?: Property.BorderColor | undefined;
        /**
         * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.
         *
         * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
         *
         * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |
         * | :-----: | :-------: | :-----: | :----: | :----: |
         * | **16**  |  **15**   |  **6**  | **12** | **11** |
         * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-image
         */
        "border-image"?: Property.BorderImage | undefined;
        /**
         * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **87** | **66**  | **14.1** | **87** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline
         */
        "border-inline"?: Property.BorderInline<TLength> | undefined;
        /**
         * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end
         */
        "border-inline-end"?: Property.BorderInlineEnd<TLength> | undefined;
        /**
         * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **69** | **41**  | **12.1** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start
         */
        "border-inline-start"?: Property.BorderInlineStart<TLength> | undefined;
        /**
         * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-left
         */
        "border-left"?: Property.BorderLeft<TLength> | undefined;
        /**
         * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.
         *
         * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
         * | :-----: | :-----: | :-----: | :----: | :---: |
         * |  **4**  |  **4**  |  **5**  | **12** | **9** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |       |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-radius
         */
        "border-radius"?: Property.BorderRadius<TLength> | undefined;
        /**
         * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |   IE    |
         * | :----: | :-----: | :----: | :----: | :-----: |
         * | **1**  |  **1**  | **1**  | **12** | **5.5** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-right
         */
        "border-right"?: Property.BorderRight<TLength> | undefined;
        /**
         * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.
         *
         * **Syntax**: `<line-style>{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-style
         */
        "border-style"?: Property.BorderStyle | undefined;
        /**
         * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.
         *
         * **Syntax**: `<line-width> || <line-style> || <color>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-top
         */
        "border-top"?: Property.BorderTop<TLength> | undefined;
        /**
         * The **`border-width`** shorthand CSS property sets the width of an element's border.
         *
         * **Syntax**: `<line-width>{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/border-width
         */
        "border-width"?: Property.BorderWidth<TLength> | undefined;
        /**
         * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`
         *
         * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :-----: | :-----: | :-----: | :----: | :----: |
         * | **50**  | **52**  |  **9**  | **12** | **10** |
         * | 1 _-x-_ |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/column-rule
         */
        "column-rule"?: Property.ColumnRule<TLength> | undefined;
        /**
         * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.
         *
         * **Syntax**: `<'column-width'> || <'column-count'>`
         *
         * | Chrome | Firefox | Safari  |  Edge  |   IE   |
         * | :----: | :-----: | :-----: | :----: | :----: |
         * | **50** | **52**  |  **9**  | **12** | **10** |
         * |        |         | 3 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/columns
         */
        columns?: Property.Columns<TLength> | undefined;
        /**
         * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.
         *
         * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |
         * | :------: | :-----: | :-----: | :----: | :------: |
         * |  **29**  | **20**  |  **9**  | **12** |  **11**  |
         * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex
         */
        flex?: Property.Flex<TLength> | undefined;
        /**
         * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.
         *
         * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`
         *
         * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
         * | :------: | :-----: | :-----: | :----: | :----: |
         * |  **29**  | **28**  |  **9**  | **12** | **11** |
         * | 21 _-x-_ |         | 7 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow
         */
        "flex-flow"?: Property.FlexFlow | undefined;
        /**
         * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.
         *
         * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/font
         */
        font?: Property.Font | undefined;
        /**
         * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.
         *
         * **Syntax**: `<'row-gap'> <'column-gap'>?`
         *
         * ---
         *
         * _Supported in Flex Layout_
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **84** | **63**  | **14.1** | **84** | No  |
         *
         * ---
         *
         * _Supported in Grid Layout_
         *
         * |     Chrome      |     Firefox     |      Safari       |  Edge  | IE  |
         * | :-------------: | :-------------: | :---------------: | :----: | :-: |
         * |     **66**      |     **61**      |      **12**       | **16** | No  |
         * | 57 _(grid-gap)_ | 52 _(grid-gap)_ | 10.1 _(grid-gap)_ |        |     |
         *
         * ---
         *
         * _Supported in Multi-column Layout_
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **66** | **61**  |   No   | **16** | No  |
         *
         * ---
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/gap
         */
        gap?: Property.Gap<TLength> | undefined;
        /**
         * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.
         *
         * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid
         */
        grid?: Property.Grid | undefined;
        /**
         * The **`grid-area`** CSS shorthand property specifies a grid item’s size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.
         *
         * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-area
         */
        "grid-area"?: Property.GridArea | undefined;
        /**
         * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.
         *
         * **Syntax**: `<grid-line> [ / <grid-line> ]?`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-column
         */
        "grid-column"?: Property.GridColumn | undefined;
        /**
         * The **`grid-row`** CSS shorthand property specifies a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.
         *
         * **Syntax**: `<grid-line> [ / <grid-line> ]?`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-row
         */
        "grid-row"?: Property.GridRow | undefined;
        /**
         * The **`grid-template`** CSS property is a shorthand property for defining grid columns, rows, and areas.
         *
         * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`
         *
         * | Chrome | Firefox |  Safari  |  Edge  | IE  |
         * | :----: | :-----: | :------: | :----: | :-: |
         * | **57** | **52**  | **10.1** | **16** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/grid-template
         */
        "grid-template"?: Property.GridTemplate | undefined;
        /**
         * **Syntax**: `none | <integer>`
         *
         * **Initial value**: `none`
         */
        "line-clamp"?: Property.LineClamp | undefined;
        /**
         * The **`list-style`** CSS shorthand property allows you set all the list style properties at once.
         *
         * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/list-style
         */
        "list-style"?: Property.ListStyle | undefined;
        /**
         * The **`margin`** CSS property sets the margin area on all four sides of an element. It is a shorthand for `margin-top`, `margin-right`, `margin-bottom`, and `margin-left`.
         *
         * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/margin
         */
        margin?: Property.Margin<TLength> | undefined;
        /**
         * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.
         *
         * **Syntax**: `<mask-layer>#`
         *
         * | Chrome | Firefox | Safari  | Edge  | IE  |
         * | :----: | :-----: | :-----: | :---: | :-: |
         * | **1**  |  **2**  | **3.1** | 12-79 | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask
         */
        mask?: Property.Mask<TLength> | undefined;
        /**
         * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.
         *
         * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`
         *
         * |              Chrome              | Firefox |               Safari               |               Edge                | IE  |
         * | :------------------------------: | :-----: | :--------------------------------: | :-------------------------------: | :-: |
         * | **1** _(-webkit-mask-box-image)_ |   No    | **3.1** _(-webkit-mask-box-image)_ | **79** _(-webkit-mask-box-image)_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/mask-border
         */
        "mask-border"?: Property.MaskBorder | undefined;
        /**
         * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.
         *
         * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`
         *
         * |    Chrome     | Firefox | Safari |  Edge  | IE  |
         * | :-----------: | :-----: | :----: | :----: | :-: |
         * |    **55**     | **72**  |   No   | **79** | No  |
         * | 46 _(motion)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset
         */
        motion?: Property.Offset<TLength> | undefined;
        /**
         * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.
         *
         * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`
         *
         * |    Chrome     | Firefox | Safari |  Edge  | IE  |
         * | :-----------: | :-----: | :----: | :----: | :-: |
         * |    **55**     | **72**  |   No   | **79** | No  |
         * | 46 _(motion)_ |         |        |        |     |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/offset
         */
        offset?: Property.Offset<TLength> | undefined;
        /**
         * The **`outline`** CSS shorthand property set all the outline properties in a single declaration.
         *
         * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`
         *
         * | Chrome | Firefox | Safari  |  Edge  |  IE   |
         * | :----: | :-----: | :-----: | :----: | :---: |
         * | **1**  | **1.5** | **1.2** | **12** | **8** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/outline
         */
        outline?: Property.Outline<TLength> | undefined;
        /**
         * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.
         *
         * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`
         *
         * **Initial value**: `visible`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overflow
         */
        overflow?: Property.Overflow | undefined;
        /**
         * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.
         *
         * **Syntax**: `[ contain | none | auto ]{1,2}`
         *
         * **Initial value**: `auto`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **63** | **59**  |   No   | **18** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior
         */
        "overscroll-behavior"?: Property.OverscrollBehavior | undefined;
        /**
         * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.
         *
         * **Syntax**: `[ <length> | <percentage> ]{1,4}`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **4** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/padding
         */
        padding?: Property.Padding<TLength> | undefined;
        /**
         * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.
         *
         * **Syntax**: `<'align-items'> <'justify-items'>?`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **59** | **45**  | **11** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/place-items
         */
        "place-items"?: Property.PlaceItems | undefined;
        /**
         * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.
         *
         * **Syntax**: `<'align-self'> <'justify-self'>?`
         *
         * | Chrome | Firefox | Safari |  Edge  | IE  |
         * | :----: | :-----: | :----: | :----: | :-: |
         * | **59** | **45**  | **11** | **79** | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/place-self
         */
        "place-self"?: Property.PlaceSelf | undefined;
        /**
         * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.
         *
         * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`
         *
         * | Chrome | Firefox | Safari |  Edge  |  IE   |
         * | :----: | :-----: | :----: | :----: | :---: |
         * | **1**  |  **1**  | **1**  | **12** | **3** |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration
         */
        "text-decoration"?: Property.TextDecoration<TLength> | undefined;
        /**
         * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.
         *
         * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`
         *
         * |    Chrome    | Firefox | Safari |     Edge     | IE  |
         * | :----------: | :-----: | :----: | :----------: | :-: |
         * | **25** _-x-_ | **46**  | **7**  | **79** _-x-_ | No  |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis
         */
        "text-emphasis"?: Property.TextEmphasis | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         *
         * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
         * | :-----: | :-----: | :-------: | :----: | :----: |
         * | **26**  | **16**  |   **9**   | **12** | **10** |
         * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
         *
         * @see https://developer.mozilla.org/docs/Web/CSS/transition
         */
        transition?: Property.Transition<TTime> | undefined;
    }
    export interface StandardPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> extends StandardLonghandPropertiesHyphen<TLength, TTime>, StandardShorthandPropertiesHyphen<TLength, TTime> {
    }
    export interface VendorLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-moz-animation-delay"?: Property.AnimationDelay<TTime> | undefined;
        /**
         * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
         *
         * **Syntax**: `<single-animation-direction>#`
         *
         * **Initial value**: `normal`
         */
        "-moz-animation-direction"?: Property.AnimationDirection | undefined;
        /**
         * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-moz-animation-duration"?: Property.AnimationDuration<TTime> | undefined;
        /**
         * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
         *
         * **Syntax**: `<single-animation-fill-mode>#`
         *
         * **Initial value**: `none`
         */
        "-moz-animation-fill-mode"?: Property.AnimationFillMode | undefined;
        /**
         * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.
         *
         * **Syntax**: `<single-animation-iteration-count>#`
         *
         * **Initial value**: `1`
         */
        "-moz-animation-iteration-count"?: Property.AnimationIterationCount | undefined;
        /**
         * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules describing the animation or animations to apply to the element.
         *
         * **Syntax**: `[ none | <keyframes-name> ]#`
         *
         * **Initial value**: `none`
         */
        "-moz-animation-name"?: Property.AnimationName | undefined;
        /**
         * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
         *
         * **Syntax**: `<single-animation-play-state>#`
         *
         * **Initial value**: `running`
         */
        "-moz-animation-play-state"?: Property.AnimationPlayState | undefined;
        /**
         * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        "-moz-animation-timing-function"?: Property.AnimationTimingFunction | undefined;
        /**
         * The `**appearance**` CSS property is used to display an element using platform-native styling, based on the operating system's theme. The **`-moz-appearance`** and **`-webkit-appearance`** properties are non-standard versions of this property, used (respectively) by Gecko (Firefox) and by WebKit-based (e.g., Safari) and Blink-based (e.g., Chrome, Opera) browsers to achieve the same thing. Note that Firefox and Edge also support **`-webkit-appearance`**, for compatibility reasons.
         *
         * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`
         *
         * **Initial value**: `none` (but this value is overridden in the user agent CSS)
         */
        "-moz-appearance"?: Property.MozAppearance | undefined;
        /**
         * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
         *
         * **Syntax**: `visible | hidden`
         *
         * **Initial value**: `visible`
         */
        "-moz-backface-visibility"?: Property.BackfaceVisibility | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.
         *
         * **Syntax**: `<color>+ | none`
         *
         * **Initial value**: `none`
         */
        "-moz-border-bottom-colors"?: Property.MozBorderBottomColors | undefined;
        /**
         * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         */
        "-moz-border-end-color"?: Property.BorderInlineEndColor | undefined;
        /**
         * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         */
        "-moz-border-end-style"?: Property.BorderInlineEndStyle | undefined;
        /**
         * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-width'>`
         *
         * **Initial value**: `medium`
         */
        "-moz-border-end-width"?: Property.BorderInlineEndWidth<TLength> | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.
         *
         * **Syntax**: `<color>+ | none`
         *
         * **Initial value**: `none`
         */
        "-moz-border-left-colors"?: Property.MozBorderLeftColors | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.
         *
         * **Syntax**: `<color>+ | none`
         *
         * **Initial value**: `none`
         */
        "-moz-border-right-colors"?: Property.MozBorderRightColors | undefined;
        /**
         * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-color'>`
         *
         * **Initial value**: `currentcolor`
         */
        "-moz-border-start-color"?: Property.BorderInlineStartColor | undefined;
        /**
         * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'border-top-style'>`
         *
         * **Initial value**: `none`
         */
        "-moz-border-start-style"?: Property.BorderInlineStartStyle | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.
         *
         * **Syntax**: `<color>+ | none`
         *
         * **Initial value**: `none`
         */
        "-moz-border-top-colors"?: Property.MozBorderTopColors | undefined;
        /**
         * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.
         *
         * **Syntax**: `content-box | border-box`
         *
         * **Initial value**: `content-box`
         */
        "-moz-box-sizing"?: Property.BoxSizing | undefined;
        /**
         * The **`column-count`** CSS property breaks an element's content into the specified number of columns.
         *
         * **Syntax**: `<integer> | auto`
         *
         * **Initial value**: `auto`
         */
        "-moz-column-count"?: Property.ColumnCount | undefined;
        /**
         * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.
         *
         * **Syntax**: `auto | balance | balance-all`
         *
         * **Initial value**: `balance`
         */
        "-moz-column-fill"?: Property.ColumnFill | undefined;
        /**
         * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
         *
         * **Syntax**: `normal | <length-percentage>`
         *
         * **Initial value**: `normal`
         */
        "-moz-column-gap"?: Property.ColumnGap<TLength> | undefined;
        /**
         * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        "-moz-column-rule-color"?: Property.ColumnRuleColor | undefined;
        /**
         * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-style'>`
         *
         * **Initial value**: `none`
         */
        "-moz-column-rule-style"?: Property.ColumnRuleStyle | undefined;
        /**
         * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-width'>`
         *
         * **Initial value**: `medium`
         */
        "-moz-column-rule-width"?: Property.ColumnRuleWidth<TLength> | undefined;
        /**
         * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
         *
         * **Syntax**: `<length> | auto`
         *
         * **Initial value**: `auto`
         */
        "-moz-column-width"?: Property.ColumnWidth<TLength> | undefined;
        /**
         * The `**-moz-context-properties**` property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.
         *
         * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`
         *
         * **Initial value**: `none`
         */
        "-moz-context-properties"?: Property.MozContextProperties | undefined;
        /**
         * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.
         *
         * **Syntax**: `normal | <feature-tag-value>#`
         *
         * **Initial value**: `normal`
         */
        "-moz-font-feature-settings"?: Property.FontFeatureSettings | undefined;
        /**
         * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.
         *
         * **Syntax**: `normal | <string>`
         *
         * **Initial value**: `normal`
         */
        "-moz-font-language-override"?: Property.FontLanguageOverride | undefined;
        /**
         * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
         *
         * **Syntax**: `none | manual | auto`
         *
         * **Initial value**: `manual`
         */
        "-moz-hyphens"?: Property.Hyphens | undefined;
        /**
         * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.
         *
         * **Syntax**: `<shape> | auto`
         *
         * **Initial value**: `auto`
         */
        "-moz-image-region"?: Property.MozImageRegion | undefined;
        /**
         * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         */
        "-moz-margin-end"?: Property.MarginInlineEnd<TLength> | undefined;
        /**
         * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         */
        "-moz-margin-start"?: Property.MarginInlineStart<TLength> | undefined;
        /**
         * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.
         *
         * **Syntax**: `inline | block | horizontal | vertical`
         *
         * **Initial value**: `inline`
         */
        "-moz-orient"?: Property.MozOrient | undefined;
        /**
         * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.
         *
         * **Syntax**: `auto | never | always | <absolute-size> | <length>`
         *
         * **Initial value**: `auto`
         */
        "-moz-osx-font-smoothing"?: Property.FontSmooth<TLength> | undefined;
        /**
         * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         */
        "-moz-padding-end"?: Property.PaddingInlineEnd<TLength> | undefined;
        /**
         * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         */
        "-moz-padding-start"?: Property.PaddingInlineStart<TLength> | undefined;
        /**
         * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.
         *
         * **Syntax**: `none | <length>`
         *
         * **Initial value**: `none`
         */
        "-moz-perspective"?: Property.Perspective<TLength> | undefined;
        /**
         * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         */
        "-moz-perspective-origin"?: Property.PerspectiveOrigin<TLength> | undefined;
        /**
         * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.
         *
         * **Syntax**: `ignore | stretch-to-fit`
         *
         * **Initial value**: `stretch-to-fit`
         */
        "-moz-stack-sizing"?: Property.MozStackSizing | undefined;
        /**
         * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).
         *
         * **Syntax**: `<integer> | <length>`
         *
         * **Initial value**: `8`
         */
        "-moz-tab-size"?: Property.TabSize<TLength> | undefined;
        /**
         * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.
         *
         * **Syntax**: `none | blink`
         *
         * **Initial value**: `none`
         */
        "-moz-text-blink"?: Property.MozTextBlink | undefined;
        /**
         * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.
         *
         * **Syntax**: `none | auto | <percentage>`
         *
         * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).
         */
        "-moz-text-size-adjust"?: Property.TextSizeAdjust | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         */
        "-moz-transform-origin"?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.
         *
         * **Syntax**: `flat | preserve-3d`
         *
         * **Initial value**: `flat`
         */
        "-moz-transform-style"?: Property.TransformStyle | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-moz-transition-delay"?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-moz-transition-duration"?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         */
        "-moz-transition-property"?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        "-moz-transition-timing-function"?: Property.TransitionTimingFunction | undefined;
        /**
         * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.
         *
         * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`
         *
         * **Initial value**: `none`
         */
        "-moz-user-focus"?: Property.MozUserFocus | undefined;
        /**
         * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.
         *
         * **Syntax**: `read-only | read-write | write-only`
         *
         * **Initial value**: `read-only`
         */
        "-moz-user-modify"?: Property.MozUserModify | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `auto | text | none | contain | all`
         *
         * **Initial value**: `auto`
         */
        "-moz-user-select"?: Property.UserSelect | undefined;
        /**
         * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.
         *
         * **Syntax**: `drag | no-drag`
         *
         * **Initial value**: `drag`
         */
        "-moz-window-dragging"?: Property.MozWindowDragging | undefined;
        /**
         * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.
         *
         * **Syntax**: `default | menu | tooltip | sheet | none`
         *
         * **Initial value**: `default`
         */
        "-moz-window-shadow"?: Property.MozWindowShadow | undefined;
        /**
         * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.
         *
         * **Syntax**: `false | true`
         *
         * **Initial value**: `false`
         */
        "-ms-accelerator"?: Property.MsAccelerator | undefined;
        /**
         * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
         *
         * **Initial value**: `auto`
         */
        "-ms-align-self"?: Property.AlignSelf | undefined;
        /**
         * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.
         *
         * **Syntax**: `tb | rl | bt | lr`
         *
         * **Initial value**: `tb`
         */
        "-ms-block-progression"?: Property.MsBlockProgression | undefined;
        /**
         * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.
         *
         * **Syntax**: `none | chained`
         *
         * **Initial value**: `none`
         */
        "-ms-content-zoom-chaining"?: Property.MsContentZoomChaining | undefined;
        /**
         * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.
         *
         * **Syntax**: `<percentage>`
         *
         * **Initial value**: `400%`
         */
        "-ms-content-zoom-limit-max"?: Property.MsContentZoomLimitMax | undefined;
        /**
         * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.
         *
         * **Syntax**: `<percentage>`
         *
         * **Initial value**: `100%`
         */
        "-ms-content-zoom-limit-min"?: Property.MsContentZoomLimitMin | undefined;
        /**
         * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.
         *
         * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`
         *
         * **Initial value**: `snapInterval(0%, 100%)`
         */
        "-ms-content-zoom-snap-points"?: Property.MsContentZoomSnapPoints | undefined;
        /**
         * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.
         *
         * **Syntax**: `none | proximity | mandatory`
         *
         * **Initial value**: `none`
         */
        "-ms-content-zoom-snap-type"?: Property.MsContentZoomSnapType | undefined;
        /**
         * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.
         *
         * **Syntax**: `none | zoom`
         *
         * **Initial value**: zoom for the top level element, none for all other elements
         */
        "-ms-content-zooming"?: Property.MsContentZooming | undefined;
        /**
         * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.
         *
         * **Syntax**: `<string>`
         *
         * **Initial value**: "" (the empty string)
         */
        "-ms-filter"?: Property.MsFilter | undefined;
        /**
         * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
         *
         * **Syntax**: `row | row-reverse | column | column-reverse`
         *
         * **Initial value**: `row`
         */
        "-ms-flex-direction"?: Property.FlexDirection | undefined;
        /**
         * The **`flex-grow`** CSS property sets the flex grow factor of a flex item main size.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         */
        "-ms-flex-positive"?: Property.FlexGrow | undefined;
        /**
         * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.
         *
         * **Syntax**: `[ none | <custom-ident> ]#`
         *
         * **Initial value**: `none`
         */
        "-ms-flow-from"?: Property.MsFlowFrom | undefined;
        /**
         * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.
         *
         * **Syntax**: `[ none | <custom-ident> ]#`
         *
         * **Initial value**: `none`
         */
        "-ms-flow-into"?: Property.MsFlowInto | undefined;
        /**
         * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.
         *
         * **Syntax**: `none | <track-list> | <auto-track-list>`
         *
         * **Initial value**: `none`
         */
        "-ms-grid-columns"?: Property.MsGridColumns<TLength> | undefined;
        /**
         * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.
         *
         * **Syntax**: `none | <track-list> | <auto-track-list>`
         *
         * **Initial value**: `none`
         */
        "-ms-grid-rows"?: Property.MsGridRows<TLength> | undefined;
        /**
         * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.
         *
         * **Syntax**: `auto | none`
         *
         * **Initial value**: `auto`
         */
        "-ms-high-contrast-adjust"?: Property.MsHighContrastAdjust | undefined;
        /**
         * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.
         *
         * **Syntax**: `auto | <integer>{1,3}`
         *
         * **Initial value**: `auto`
         */
        "-ms-hyphenate-limit-chars"?: Property.MsHyphenateLimitChars | undefined;
        /**
         * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.
         *
         * **Syntax**: `no-limit | <integer>`
         *
         * **Initial value**: `no-limit`
         */
        "-ms-hyphenate-limit-lines"?: Property.MsHyphenateLimitLines | undefined;
        /**
         * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.
         *
         * **Syntax**: `<percentage> | <length>`
         *
         * **Initial value**: `0`
         */
        "-ms-hyphenate-limit-zone"?: Property.MsHyphenateLimitZone<TLength> | undefined;
        /**
         * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
         *
         * **Syntax**: `none | manual | auto`
         *
         * **Initial value**: `manual`
         */
        "-ms-hyphens"?: Property.Hyphens | undefined;
        /**
         * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.
         *
         * **Syntax**: `auto | after`
         *
         * **Initial value**: `auto`
         */
        "-ms-ime-align"?: Property.MsImeAlign | undefined;
        /**
         * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`
         *
         * **Initial value**: `auto`
         */
        "-ms-justify-self"?: Property.JustifySelf | undefined;
        /**
         * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
         *
         * **Syntax**: `auto | loose | normal | strict | anywhere`
         *
         * **Initial value**: `auto`
         */
        "-ms-line-break"?: Property.LineBreak | undefined;
        /**
         * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `0`
         */
        "-ms-order"?: Property.Order | undefined;
        /**
         * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.
         *
         * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`
         *
         * **Initial value**: `auto`
         */
        "-ms-overflow-style"?: Property.MsOverflowStyle | undefined;
        /**
         * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.
         *
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `visible`
         */
        "-ms-overflow-x"?: Property.OverflowX | undefined;
        /**
         * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.
         *
         * **Syntax**: `visible | hidden | clip | scroll | auto`
         *
         * **Initial value**: `visible`
         */
        "-ms-overflow-y"?: Property.OverflowY | undefined;
        /**
         * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.
         *
         * **Syntax**: `chained | none`
         *
         * **Initial value**: `chained`
         */
        "-ms-scroll-chaining"?: Property.MsScrollChaining | undefined;
        /**
         * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.
         *
         * **Syntax**: `auto | <length>`
         *
         * **Initial value**: `auto`
         */
        "-ms-scroll-limit-x-max"?: Property.MsScrollLimitXMax<TLength> | undefined;
        /**
         * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         */
        "-ms-scroll-limit-x-min"?: Property.MsScrollLimitXMin<TLength> | undefined;
        /**
         * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.
         *
         * **Syntax**: `auto | <length>`
         *
         * **Initial value**: `auto`
         */
        "-ms-scroll-limit-y-max"?: Property.MsScrollLimitYMax<TLength> | undefined;
        /**
         * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         */
        "-ms-scroll-limit-y-min"?: Property.MsScrollLimitYMin<TLength> | undefined;
        /**
         * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.
         *
         * **Syntax**: `none | railed`
         *
         * **Initial value**: `railed`
         */
        "-ms-scroll-rails"?: Property.MsScrollRails | undefined;
        /**
         * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.
         *
         * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`
         *
         * **Initial value**: `snapInterval(0px, 100%)`
         */
        "-ms-scroll-snap-points-x"?: Property.MsScrollSnapPointsX | undefined;
        /**
         * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.
         *
         * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`
         *
         * **Initial value**: `snapInterval(0px, 100%)`
         */
        "-ms-scroll-snap-points-y"?: Property.MsScrollSnapPointsY | undefined;
        /**
         * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.
         *
         * **Syntax**: `none | proximity | mandatory`
         *
         * **Initial value**: `none`
         */
        "-ms-scroll-snap-type"?: Property.MsScrollSnapType | undefined;
        /**
         * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.
         *
         * **Syntax**: `none | vertical-to-horizontal`
         *
         * **Initial value**: `none`
         */
        "-ms-scroll-translation"?: Property.MsScrollTranslation | undefined;
        /**
         * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: depends on user agent
         */
        "-ms-scrollbar-3dlight-color"?: Property.MsScrollbar3dlightColor | undefined;
        /**
         * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ButtonText`
         */
        "-ms-scrollbar-arrow-color"?: Property.MsScrollbarArrowColor | undefined;
        /**
         * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: depends on user agent
         */
        "-ms-scrollbar-base-color"?: Property.MsScrollbarBaseColor | undefined;
        /**
         * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ThreeDDarkShadow`
         */
        "-ms-scrollbar-darkshadow-color"?: Property.MsScrollbarDarkshadowColor | undefined;
        /**
         * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ThreeDFace`
         */
        "-ms-scrollbar-face-color"?: Property.MsScrollbarFaceColor | undefined;
        /**
         * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ThreeDHighlight`
         */
        "-ms-scrollbar-highlight-color"?: Property.MsScrollbarHighlightColor | undefined;
        /**
         * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `ThreeDDarkShadow`
         */
        "-ms-scrollbar-shadow-color"?: Property.MsScrollbarShadowColor | undefined;
        /**
         * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.
         *
         * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`
         *
         * **Initial value**: `none`
         */
        "-ms-text-autospace"?: Property.MsTextAutospace | undefined;
        /**
         * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
         *
         * **Syntax**: `none | all | [ digits <integer>? ]`
         *
         * **Initial value**: `none`
         */
        "-ms-text-combine-horizontal"?: Property.TextCombineUpright | undefined;
        /**
         * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.
         *
         * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`
         *
         * **Initial value**: `clip`
         */
        "-ms-text-overflow"?: Property.TextOverflow | undefined;
        /**
         * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).
         *
         * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`
         *
         * **Initial value**: `auto`
         */
        "-ms-touch-action"?: Property.TouchAction | undefined;
        /**
         * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.
         *
         * **Syntax**: `grippers | none`
         *
         * **Initial value**: `grippers`
         */
        "-ms-touch-select"?: Property.MsTouchSelect | undefined;
        /**
         * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
         *
         * **Syntax**: `none | <transform-list>`
         *
         * **Initial value**: `none`
         */
        "-ms-transform"?: Property.Transform | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         */
        "-ms-transform-origin"?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-ms-transition-delay"?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-ms-transition-duration"?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         */
        "-ms-transition-property"?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        "-ms-transition-timing-function"?: Property.TransitionTimingFunction | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `none | element | text`
         *
         * **Initial value**: `text`
         */
        "-ms-user-select"?: Property.MsUserSelect | undefined;
        /**
         * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.
         *
         * **Syntax**: `normal | break-all | keep-all | break-word`
         *
         * **Initial value**: `normal`
         */
        "-ms-word-break"?: Property.WordBreak | undefined;
        /**
         * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.
         *
         * **Syntax**: `auto | both | start | end | maximum | clear`
         *
         * **Initial value**: `auto`
         */
        "-ms-wrap-flow"?: Property.MsWrapFlow | undefined;
        /**
         * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         */
        "-ms-wrap-margin"?: Property.MsWrapMargin<TLength> | undefined;
        /**
         * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.
         *
         * **Syntax**: `wrap | none`
         *
         * **Initial value**: `wrap`
         */
        "-ms-wrap-through"?: Property.MsWrapThrough | undefined;
        /**
         * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).
         *
         * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`
         *
         * **Initial value**: `horizontal-tb`
         */
        "-ms-writing-mode"?: Property.WritingMode | undefined;
        /**
         * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.
         *
         * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`
         *
         * **Initial value**: `normal`
         */
        "-webkit-align-content"?: Property.AlignContent | undefined;
        /**
         * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.
         *
         * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`
         *
         * **Initial value**: `normal`
         */
        "-webkit-align-items"?: Property.AlignItems | undefined;
        /**
         * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.
         *
         * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
         *
         * **Initial value**: `auto`
         */
        "-webkit-align-self"?: Property.AlignSelf | undefined;
        /**
         * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-webkit-animation-delay"?: Property.AnimationDelay<TTime> | undefined;
        /**
         * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
         *
         * **Syntax**: `<single-animation-direction>#`
         *
         * **Initial value**: `normal`
         */
        "-webkit-animation-direction"?: Property.AnimationDirection | undefined;
        /**
         * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-webkit-animation-duration"?: Property.AnimationDuration<TTime> | undefined;
        /**
         * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
         *
         * **Syntax**: `<single-animation-fill-mode>#`
         *
         * **Initial value**: `none`
         */
        "-webkit-animation-fill-mode"?: Property.AnimationFillMode | undefined;
        /**
         * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.
         *
         * **Syntax**: `<single-animation-iteration-count>#`
         *
         * **Initial value**: `1`
         */
        "-webkit-animation-iteration-count"?: Property.AnimationIterationCount | undefined;
        /**
         * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules describing the animation or animations to apply to the element.
         *
         * **Syntax**: `[ none | <keyframes-name> ]#`
         *
         * **Initial value**: `none`
         */
        "-webkit-animation-name"?: Property.AnimationName | undefined;
        /**
         * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
         *
         * **Syntax**: `<single-animation-play-state>#`
         *
         * **Initial value**: `running`
         */
        "-webkit-animation-play-state"?: Property.AnimationPlayState | undefined;
        /**
         * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        "-webkit-animation-timing-function"?: Property.AnimationTimingFunction | undefined;
        /**
         * The `**appearance**` CSS property is used to display an element using platform-native styling, based on the operating system's theme. The **`-moz-appearance`** and **`-webkit-appearance`** properties are non-standard versions of this property, used (respectively) by Gecko (Firefox) and by WebKit-based (e.g., Safari) and Blink-based (e.g., Chrome, Opera) browsers to achieve the same thing. Note that Firefox and Edge also support **`-webkit-appearance`**, for compatibility reasons.
         *
         * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`
         *
         * **Initial value**: `none` (but this value is overridden in the user agent CSS)
         */
        "-webkit-appearance"?: Property.WebkitAppearance | undefined;
        /**
         * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.
         *
         * **Syntax**: `none | <filter-function-list>`
         *
         * **Initial value**: `none`
         */
        "-webkit-backdrop-filter"?: Property.BackdropFilter | undefined;
        /**
         * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
         *
         * **Syntax**: `visible | hidden`
         *
         * **Initial value**: `visible`
         */
        "-webkit-backface-visibility"?: Property.BackfaceVisibility | undefined;
        /**
         * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `border-box`
         */
        "-webkit-background-clip"?: Property.BackgroundClip | undefined;
        /**
         * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `padding-box`
         */
        "-webkit-background-origin"?: Property.BackgroundOrigin | undefined;
        /**
         * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         */
        "-webkit-background-size"?: Property.BackgroundSize<TLength> | undefined;
        /**
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        "-webkit-border-before-color"?: Property.WebkitBorderBeforeColor | undefined;
        /**
         * **Syntax**: `<'border-style'>`
         *
         * **Initial value**: `none`
         */
        "-webkit-border-before-style"?: Property.WebkitBorderBeforeStyle | undefined;
        /**
         * **Syntax**: `<'border-width'>`
         *
         * **Initial value**: `medium`
         */
        "-webkit-border-before-width"?: Property.WebkitBorderBeforeWidth<TLength> | undefined;
        /**
         * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         */
        "-webkit-border-bottom-left-radius"?: Property.BorderBottomLeftRadius<TLength> | undefined;
        /**
         * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         */
        "-webkit-border-bottom-right-radius"?: Property.BorderBottomRightRadius<TLength> | undefined;
        /**
         * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.
         *
         * **Syntax**: `<number-percentage>{1,4} && fill?`
         *
         * **Initial value**: `100%`
         */
        "-webkit-border-image-slice"?: Property.BorderImageSlice | undefined;
        /**
         * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         */
        "-webkit-border-top-left-radius"?: Property.BorderTopLeftRadius<TLength> | undefined;
        /**
         * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         */
        "-webkit-border-top-right-radius"?: Property.BorderTopRightRadius<TLength> | undefined;
        /**
         * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
         *
         * **Syntax**: `slice | clone`
         *
         * **Initial value**: `slice`
         */
        "-webkit-box-decoration-break"?: Property.BoxDecorationBreak | undefined;
        /**
         * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.
         *
         * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`
         *
         * **Initial value**: `none`
         */
        "-webkit-box-reflect"?: Property.WebkitBoxReflect<TLength> | undefined;
        /**
         * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.
         *
         * **Syntax**: `none | <shadow>#`
         *
         * **Initial value**: `none`
         */
        "-webkit-box-shadow"?: Property.BoxShadow | undefined;
        /**
         * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.
         *
         * **Syntax**: `content-box | border-box`
         *
         * **Initial value**: `content-box`
         */
        "-webkit-box-sizing"?: Property.BoxSizing | undefined;
        /**
         * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.
         *
         * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`
         *
         * **Initial value**: `none`
         */
        "-webkit-clip-path"?: Property.ClipPath | undefined;
        /**
         * The **`column-count`** CSS property breaks an element's content into the specified number of columns.
         *
         * **Syntax**: `<integer> | auto`
         *
         * **Initial value**: `auto`
         */
        "-webkit-column-count"?: Property.ColumnCount | undefined;
        /**
         * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.
         *
         * **Syntax**: `auto | balance | balance-all`
         *
         * **Initial value**: `balance`
         */
        "-webkit-column-fill"?: Property.ColumnFill | undefined;
        /**
         * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
         *
         * **Syntax**: `normal | <length-percentage>`
         *
         * **Initial value**: `normal`
         */
        "-webkit-column-gap"?: Property.ColumnGap<TLength> | undefined;
        /**
         * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        "-webkit-column-rule-color"?: Property.ColumnRuleColor | undefined;
        /**
         * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-style'>`
         *
         * **Initial value**: `none`
         */
        "-webkit-column-rule-style"?: Property.ColumnRuleStyle | undefined;
        /**
         * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'border-width'>`
         *
         * **Initial value**: `medium`
         */
        "-webkit-column-rule-width"?: Property.ColumnRuleWidth<TLength> | undefined;
        /**
         * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.
         *
         * **Syntax**: `none | all`
         *
         * **Initial value**: `none`
         */
        "-webkit-column-span"?: Property.ColumnSpan | undefined;
        /**
         * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
         *
         * **Syntax**: `<length> | auto`
         *
         * **Initial value**: `auto`
         */
        "-webkit-column-width"?: Property.ColumnWidth<TLength> | undefined;
        /**
         * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.
         *
         * **Syntax**: `none | <filter-function-list>`
         *
         * **Initial value**: `none`
         */
        "-webkit-filter"?: Property.Filter | undefined;
        /**
         * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.
         *
         * **Syntax**: `content | <'width'>`
         *
         * **Initial value**: `auto`
         */
        "-webkit-flex-basis"?: Property.FlexBasis<TLength> | undefined;
        /**
         * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
         *
         * **Syntax**: `row | row-reverse | column | column-reverse`
         *
         * **Initial value**: `row`
         */
        "-webkit-flex-direction"?: Property.FlexDirection | undefined;
        /**
         * The **`flex-grow`** CSS property sets the flex grow factor of a flex item main size.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         */
        "-webkit-flex-grow"?: Property.FlexGrow | undefined;
        /**
         * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `1`
         */
        "-webkit-flex-shrink"?: Property.FlexShrink | undefined;
        /**
         * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.
         *
         * **Syntax**: `nowrap | wrap | wrap-reverse`
         *
         * **Initial value**: `nowrap`
         */
        "-webkit-flex-wrap"?: Property.FlexWrap | undefined;
        /**
         * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.
         *
         * **Syntax**: `normal | <feature-tag-value>#`
         *
         * **Initial value**: `normal`
         */
        "-webkit-font-feature-settings"?: Property.FontFeatureSettings | undefined;
        /**
         * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.
         *
         * **Syntax**: `auto | normal | none`
         *
         * **Initial value**: `auto`
         */
        "-webkit-font-kerning"?: Property.FontKerning | undefined;
        /**
         * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.
         *
         * **Syntax**: `auto | never | always | <absolute-size> | <length>`
         *
         * **Initial value**: `auto`
         */
        "-webkit-font-smoothing"?: Property.FontSmooth<TLength> | undefined;
        /**
         * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.
         *
         * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`
         *
         * **Initial value**: `normal`
         */
        "-webkit-font-variant-ligatures"?: Property.FontVariantLigatures | undefined;
        /**
         * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
         *
         * **Syntax**: `none | manual | auto`
         *
         * **Initial value**: `manual`
         */
        "-webkit-hyphens"?: Property.Hyphens | undefined;
        /**
         * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.
         *
         * **Syntax**: `normal | [ <number> <integer>? ]`
         *
         * **Initial value**: `normal`
         */
        "-webkit-initial-letter"?: Property.InitialLetter | undefined;
        /**
         * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.
         *
         * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`
         *
         * **Initial value**: `normal`
         */
        "-webkit-justify-content"?: Property.JustifyContent | undefined;
        /**
         * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
         *
         * **Syntax**: `auto | loose | normal | strict | anywhere`
         *
         * **Initial value**: `auto`
         */
        "-webkit-line-break"?: Property.LineBreak | undefined;
        /**
         * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block container to the specified number of lines.
         *
         * **Syntax**: `none | <integer>`
         *
         * **Initial value**: `none`
         */
        "-webkit-line-clamp"?: Property.WebkitLineClamp | undefined;
        /**
         * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         */
        "-webkit-margin-end"?: Property.MarginInlineEnd<TLength> | undefined;
        /**
         * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'margin-left'>`
         *
         * **Initial value**: `0`
         */
        "-webkit-margin-start"?: Property.MarginInlineStart<TLength> | undefined;
        /**
         * If a `-webkit-mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.
         *
         * **Syntax**: `<attachment>#`
         *
         * **Initial value**: `scroll`
         */
        "-webkit-mask-attachment"?: Property.WebkitMaskAttachment | undefined;
        /**
         * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.
         *
         * **Syntax**: `[ <length> | <number> ]{1,4}`
         *
         * **Initial value**: `0`
         */
        "-webkit-mask-box-image-outset"?: Property.MaskBorderOutset<TLength> | undefined;
        /**
         * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.
         *
         * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`
         *
         * **Initial value**: `stretch`
         */
        "-webkit-mask-box-image-repeat"?: Property.MaskBorderRepeat | undefined;
        /**
         * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.
         *
         * **Syntax**: `<number-percentage>{1,4} fill?`
         *
         * **Initial value**: `0`
         */
        "-webkit-mask-box-image-slice"?: Property.MaskBorderSlice | undefined;
        /**
         * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.
         *
         * **Syntax**: `none | <image>`
         *
         * **Initial value**: `none`
         */
        "-webkit-mask-box-image-source"?: Property.MaskBorderSource | undefined;
        /**
         * The **`mask-border-width`** CSS property sets the width of an element's mask border.
         *
         * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`
         *
         * **Initial value**: `auto`
         */
        "-webkit-mask-box-image-width"?: Property.MaskBorderWidth<TLength> | undefined;
        /**
         * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.
         *
         * **Syntax**: `[ <box> | border | padding | content | text ]#`
         *
         * **Initial value**: `border`
         */
        "-webkit-mask-clip"?: Property.WebkitMaskClip | undefined;
        /**
         * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.
         *
         * **Syntax**: `<composite-style>#`
         *
         * **Initial value**: `source-over`
         */
        "-webkit-mask-composite"?: Property.WebkitMaskComposite | undefined;
        /**
         * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.
         *
         * **Syntax**: `<mask-reference>#`
         *
         * **Initial value**: `none`
         */
        "-webkit-mask-image"?: Property.WebkitMaskImage | undefined;
        /**
         * The **`mask-origin`** CSS property sets the origin of a mask.
         *
         * **Syntax**: `[ <box> | border | padding | content ]#`
         *
         * **Initial value**: `padding`
         */
        "-webkit-mask-origin"?: Property.WebkitMaskOrigin | undefined;
        /**
         * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.
         *
         * **Syntax**: `<position>#`
         *
         * **Initial value**: `0% 0%`
         */
        "-webkit-mask-position"?: Property.WebkitMaskPosition<TLength> | undefined;
        /**
         * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right ]#`
         *
         * **Initial value**: `0%`
         */
        "-webkit-mask-position-x"?: Property.WebkitMaskPositionX<TLength> | undefined;
        /**
         * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.
         *
         * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`
         *
         * **Initial value**: `0%`
         */
        "-webkit-mask-position-y"?: Property.WebkitMaskPositionY<TLength> | undefined;
        /**
         * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.
         *
         * **Syntax**: `<repeat-style>#`
         *
         * **Initial value**: `repeat`
         */
        "-webkit-mask-repeat"?: Property.WebkitMaskRepeat | undefined;
        /**
         * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.
         *
         * **Syntax**: `repeat | no-repeat | space | round`
         *
         * **Initial value**: `repeat`
         */
        "-webkit-mask-repeat-x"?: Property.WebkitMaskRepeatX | undefined;
        /**
         * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.
         *
         * **Syntax**: `repeat | no-repeat | space | round`
         *
         * **Initial value**: `repeat`
         */
        "-webkit-mask-repeat-y"?: Property.WebkitMaskRepeatY | undefined;
        /**
         * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         */
        "-webkit-mask-size"?: Property.WebkitMaskSize<TLength> | undefined;
        /**
         * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.
         *
         * **Syntax**: `<'max-width'>`
         *
         * **Initial value**: `0`
         */
        "-webkit-max-inline-size"?: Property.MaxInlineSize<TLength> | undefined;
        /**
         * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `0`
         */
        "-webkit-order"?: Property.Order | undefined;
        /**
         * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.
         *
         * **Syntax**: `auto | touch`
         *
         * **Initial value**: `auto`
         */
        "-webkit-overflow-scrolling"?: Property.WebkitOverflowScrolling | undefined;
        /**
         * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         */
        "-webkit-padding-end"?: Property.PaddingInlineEnd<TLength> | undefined;
        /**
         * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.
         *
         * **Syntax**: `<'padding-left'>`
         *
         * **Initial value**: `0`
         */
        "-webkit-padding-start"?: Property.PaddingInlineStart<TLength> | undefined;
        /**
         * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.
         *
         * **Syntax**: `none | <length>`
         *
         * **Initial value**: `none`
         */
        "-webkit-perspective"?: Property.Perspective<TLength> | undefined;
        /**
         * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         */
        "-webkit-perspective-origin"?: Property.PerspectiveOrigin<TLength> | undefined;
        /**
         * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.
         *
         * **Syntax**: `economy | exact`
         *
         * **Initial value**: `economy`
         */
        "-webkit-print-color-adjust"?: Property.ColorAdjust | undefined;
        /**
         * The `**ruby-position**` CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (`over`), under it (`under`), or between the characters, on their right side (`inter-character`).
         *
         * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`
         *
         * **Initial value**: `alternate`
         */
        "-webkit-ruby-position"?: Property.RubyPosition | undefined;
        /**
         * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.
         *
         * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`
         *
         * **Initial value**: `none`
         */
        "-webkit-scroll-snap-type"?: Property.ScrollSnapType | undefined;
        /**
         * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         */
        "-webkit-shape-margin"?: Property.ShapeMargin<TLength> | undefined;
        /**
         * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `black`
         */
        "-webkit-tap-highlight-color"?: Property.WebkitTapHighlightColor | undefined;
        /**
         * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
         *
         * **Syntax**: `none | all | [ digits <integer>? ]`
         *
         * **Initial value**: `none`
         */
        "-webkit-text-combine"?: Property.TextCombineUpright | undefined;
        /**
         * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        "-webkit-text-decoration-color"?: Property.TextDecorationColor | undefined;
        /**
         * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.
         *
         * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`
         *
         * **Initial value**: `none`
         */
        "-webkit-text-decoration-line"?: Property.TextDecorationLine | undefined;
        /**
         * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.
         *
         * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`
         *
         * **Initial value**: `objects`
         */
        "-webkit-text-decoration-skip"?: Property.TextDecorationSkip | undefined;
        /**
         * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.
         *
         * **Syntax**: `solid | double | dotted | dashed | wavy`
         *
         * **Initial value**: `solid`
         */
        "-webkit-text-decoration-style"?: Property.TextDecorationStyle | undefined;
        /**
         * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        "-webkit-text-emphasis-color"?: Property.TextEmphasisColor | undefined;
        /**
         * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.
         *
         * **Syntax**: `[ over | under ] && [ right | left ]`
         *
         * **Initial value**: `over right`
         */
        "-webkit-text-emphasis-position"?: Property.TextEmphasisPosition | undefined;
        /**
         * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.
         *
         * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`
         *
         * **Initial value**: `none`
         */
        "-webkit-text-emphasis-style"?: Property.TextEmphasisStyle | undefined;
        /**
         * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        "-webkit-text-fill-color"?: Property.WebkitTextFillColor | undefined;
        /**
         * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.
         *
         * **Syntax**: `mixed | upright | sideways`
         *
         * **Initial value**: `mixed`
         */
        "-webkit-text-orientation"?: Property.TextOrientation | undefined;
        /**
         * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.
         *
         * **Syntax**: `none | auto | <percentage>`
         *
         * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).
         */
        "-webkit-text-size-adjust"?: Property.TextSizeAdjust | undefined;
        /**
         * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         */
        "-webkit-text-stroke-color"?: Property.WebkitTextStrokeColor | undefined;
        /**
         * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.
         *
         * **Syntax**: `<length>`
         *
         * **Initial value**: `0`
         */
        "-webkit-text-stroke-width"?: Property.WebkitTextStrokeWidth<TLength> | undefined;
        /**
         * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.
         *
         * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`
         *
         * **Initial value**: `auto`
         */
        "-webkit-text-underline-position"?: Property.TextUnderlinePosition | undefined;
        /**
         * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.
         *
         * **Syntax**: `default | none`
         *
         * **Initial value**: `default`
         */
        "-webkit-touch-callout"?: Property.WebkitTouchCallout | undefined;
        /**
         * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
         *
         * **Syntax**: `none | <transform-list>`
         *
         * **Initial value**: `none`
         */
        "-webkit-transform"?: Property.Transform | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         */
        "-webkit-transform-origin"?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.
         *
         * **Syntax**: `flat | preserve-3d`
         *
         * **Initial value**: `flat`
         */
        "-webkit-transform-style"?: Property.TransformStyle | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-webkit-transition-delay"?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         */
        "-webkit-transition-duration"?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         */
        "-webkit-transition-property"?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         */
        "-webkit-transition-timing-function"?: Property.TransitionTimingFunction | undefined;
        /**
         * **Syntax**: `read-only | read-write | read-write-plaintext-only`
         *
         * **Initial value**: `read-only`
         */
        "-webkit-user-modify"?: Property.WebkitUserModify | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `auto | text | none | contain | all`
         *
         * **Initial value**: `auto`
         */
        "-webkit-user-select"?: Property.UserSelect | undefined;
        /**
         * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).
         *
         * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`
         *
         * **Initial value**: `horizontal-tb`
         */
        "-webkit-writing-mode"?: Property.WritingMode | undefined;
    }
    export interface VendorShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
         *
         * **Syntax**: `<single-animation>#`
         */
        "-moz-animation"?: Property.Animation<TTime> | undefined;
        /**
         * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.
         *
         * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
         */
        "-moz-border-image"?: Property.BorderImage | undefined;
        /**
         * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`
         */
        "-moz-column-rule"?: Property.ColumnRule<TLength> | undefined;
        /**
         * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.
         *
         * **Syntax**: `<'column-width'> || <'column-count'>`
         */
        "-moz-columns"?: Property.Columns<TLength> | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         */
        "-moz-transition"?: Property.Transition<TTime> | undefined;
        /**
         * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.
         *
         * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`
         */
        "-ms-content-zoom-limit"?: Property.MsContentZoomLimit | undefined;
        /**
         * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.
         *
         * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`
         */
        "-ms-content-zoom-snap"?: Property.MsContentZoomSnap | undefined;
        /**
         * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.
         *
         * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`
         */
        "-ms-flex"?: Property.Flex<TLength> | undefined;
        /**
         * The **\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.
         *
         * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`
         */
        "-ms-scroll-limit"?: Property.MsScrollLimit | undefined;
        /**
         * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.
         *
         * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`
         */
        "-ms-scroll-snap-x"?: Property.MsScrollSnapX | undefined;
        /**
         * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.
         *
         * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`
         */
        "-ms-scroll-snap-y"?: Property.MsScrollSnapY | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         */
        "-ms-transition"?: Property.Transition<TTime> | undefined;
        /**
         * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
         *
         * **Syntax**: `<single-animation>#`
         */
        "-webkit-animation"?: Property.Animation<TTime> | undefined;
        /**
         * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.
         *
         * **Syntax**: `<'border-width'> || <'border-style'> || <color>`
         */
        "-webkit-border-before"?: Property.WebkitBorderBefore<TLength> | undefined;
        /**
         * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.
         *
         * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
         */
        "-webkit-border-image"?: Property.BorderImage | undefined;
        /**
         * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.
         *
         * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`
         */
        "-webkit-border-radius"?: Property.BorderRadius<TLength> | undefined;
        /**
         * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.
         *
         * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`
         */
        "-webkit-column-rule"?: Property.ColumnRule<TLength> | undefined;
        /**
         * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.
         *
         * **Syntax**: `<'column-width'> || <'column-count'>`
         */
        "-webkit-columns"?: Property.Columns<TLength> | undefined;
        /**
         * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.
         *
         * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`
         */
        "-webkit-flex"?: Property.Flex<TLength> | undefined;
        /**
         * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.
         *
         * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`
         */
        "-webkit-flex-flow"?: Property.FlexFlow | undefined;
        /**
         * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.
         *
         * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`
         */
        "-webkit-mask"?: Property.WebkitMask<TLength> | undefined;
        /**
         * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.
         *
         * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`
         */
        "-webkit-mask-box-image"?: Property.MaskBorder | undefined;
        /**
         * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.
         *
         * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`
         */
        "-webkit-text-emphasis"?: Property.TextEmphasis | undefined;
        /**
         * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.
         *
         * **Syntax**: `<length> || <color>`
         */
        "-webkit-text-stroke"?: Property.WebkitTextStroke<TLength> | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         */
        "-webkit-transition"?: Property.Transition<TTime> | undefined;
    }
    export interface VendorPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandPropertiesHyphen<TLength, TTime>, VendorShorthandPropertiesHyphen<TLength, TTime> {
    }
    export interface ObsoletePropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
        /**
         * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.
         *
         * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`
         *
         * **Initial value**: `center`
         *
         * @deprecated
         */
        azimuth?: Property.Azimuth | undefined;
        /**
         * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | baseline | stretch`
         *
         * **Initial value**: `stretch`
         *
         * @deprecated
         */
        "box-align"?: Property.BoxAlign | undefined;
        /**
         * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
         *
         * **Syntax**: `normal | reverse | inherit`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        "box-direction"?: Property.BoxDirection | undefined;
        /**
         * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "box-flex"?: Property.BoxFlex | undefined;
        /**
         * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        "box-flex-group"?: Property.BoxFlexGroup | undefined;
        /**
         * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).
         *
         * **Syntax**: `single | multiple`
         *
         * **Initial value**: `single`
         *
         * @deprecated
         */
        "box-lines"?: Property.BoxLines | undefined;
        /**
         * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        "box-ordinal-group"?: Property.BoxOrdinalGroup | undefined;
        /**
         * This is a property of the original CSS Flexible Box Layout Module draft, and has been replaced by a newer standard. See flexbox for information about the current standard.
         *
         * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
         *
         * **Initial value**: `inline-axis` (`horizontal` in XUL)
         *
         * @deprecated
         */
        "box-orient"?: Property.BoxOrient | undefined;
        /**
         * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | justify`
         *
         * **Initial value**: `start`
         *
         * @deprecated
         */
        "box-pack"?: Property.BoxPack | undefined;
        /**
         * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.
         *
         * **Syntax**: `<shape> | auto`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        clip?: Property.Clip | undefined;
        /**
         * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.
         *
         * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        "font-variant-alternates"?: Property.FontVariantAlternates | undefined;
        /**
         * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "grid-column-gap"?: Property.GridColumnGap<TLength> | undefined;
        /**
         * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.
         *
         * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`
         *
         * @deprecated
         */
        "grid-gap"?: Property.GridGap<TLength> | undefined;
        /**
         * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.
         *
         * **Syntax**: `<length-percentage>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "grid-row-gap"?: Property.GridRowGap<TLength> | undefined;
        /**
         * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.
         *
         * **Syntax**: `auto | normal | active | inactive | disabled`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "ime-mode"?: Property.ImeMode | undefined;
        /**
         * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>{1,2}`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "offset-block"?: Property.InsetBlock<TLength> | undefined;
        /**
         * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "offset-block-end"?: Property.InsetBlockEnd<TLength> | undefined;
        /**
         * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "offset-block-start"?: Property.InsetBlockStart<TLength> | undefined;
        /**
         * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>{1,2}`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "offset-inline"?: Property.InsetInline<TLength> | undefined;
        /**
         * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "offset-inline-end"?: Property.InsetInlineEnd<TLength> | undefined;
        /**
         * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
         *
         * **Syntax**: `<'top'>`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "offset-inline-start"?: Property.InsetInlineStart<TLength> | undefined;
        /**
         * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.
         *
         * **Syntax**: `none | <position>#`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "scroll-snap-coordinate"?: Property.ScrollSnapCoordinate<TLength> | undefined;
        /**
         * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `0px 0px`
         *
         * @deprecated
         */
        "scroll-snap-destination"?: Property.ScrollSnapDestination<TLength> | undefined;
        /**
         * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.
         *
         * **Syntax**: `none | repeat( <length-percentage> )`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "scroll-snap-points-x"?: Property.ScrollSnapPointsX | undefined;
        /**
         * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.
         *
         * **Syntax**: `none | repeat( <length-percentage> )`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "scroll-snap-points-y"?: Property.ScrollSnapPointsY | undefined;
        /**
         * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.
         *
         * **Syntax**: `none | mandatory | proximity`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "scroll-snap-type-x"?: Property.ScrollSnapTypeX | undefined;
        /**
         * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.
         *
         * **Syntax**: `none | mandatory | proximity`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "scroll-snap-type-y"?: Property.ScrollSnapTypeY | undefined;
        /**
         * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `Scrollbar`
         *
         * @deprecated
         */
        "scrollbar-track-color"?: Property.MsScrollbarTrackColor | undefined;
        /**
         * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | baseline | stretch`
         *
         * **Initial value**: `stretch`
         *
         * @deprecated
         */
        "-khtml-box-align"?: Property.BoxAlign | undefined;
        /**
         * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
         *
         * **Syntax**: `normal | reverse | inherit`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        "-khtml-box-direction"?: Property.BoxDirection | undefined;
        /**
         * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-khtml-box-flex"?: Property.BoxFlex | undefined;
        /**
         * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        "-khtml-box-flex-group"?: Property.BoxFlexGroup | undefined;
        /**
         * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).
         *
         * **Syntax**: `single | multiple`
         *
         * **Initial value**: `single`
         *
         * @deprecated
         */
        "-khtml-box-lines"?: Property.BoxLines | undefined;
        /**
         * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        "-khtml-box-ordinal-group"?: Property.BoxOrdinalGroup | undefined;
        /**
         * This is a property of the original CSS Flexible Box Layout Module draft, and has been replaced by a newer standard. See flexbox for information about the current standard.
         *
         * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
         *
         * **Initial value**: `inline-axis` (`horizontal` in XUL)
         *
         * @deprecated
         */
        "-khtml-box-orient"?: Property.BoxOrient | undefined;
        /**
         * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | justify`
         *
         * **Initial value**: `start`
         *
         * @deprecated
         */
        "-khtml-box-pack"?: Property.BoxPack | undefined;
        /**
         * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
         *
         * **Syntax**: `auto | loose | normal | strict | anywhere`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "-khtml-line-break"?: Property.LineBreak | undefined;
        /**
         * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.
         *
         * **Syntax**: `<alpha-value>`
         *
         * **Initial value**: `1.0`
         *
         * @deprecated
         */
        "-khtml-opacity"?: Property.Opacity | undefined;
        /**
         * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
         *
         * **Syntax**: `auto | text | none | contain | all`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "-khtml-user-select"?: Property.UserSelect | undefined;
        /**
         * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `border-box`
         *
         * @deprecated
         */
        "-moz-background-clip"?: Property.BackgroundClip | undefined;
        /**
         * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
         *
         * **Syntax**: `slice | clone`
         *
         * **Initial value**: `slice`
         *
         * @deprecated
         */
        "-moz-background-inline-policy"?: Property.BoxDecorationBreak | undefined;
        /**
         * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.
         *
         * **Syntax**: `<box>#`
         *
         * **Initial value**: `padding-box`
         *
         * @deprecated
         */
        "-moz-background-origin"?: Property.BackgroundOrigin | undefined;
        /**
         * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         *
         * @deprecated
         */
        "-moz-background-size"?: Property.BackgroundSize<TLength> | undefined;
        /**
         * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.
         *
         * **Syntax**: `<url> | none`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "-moz-binding"?: Property.MozBinding | undefined;
        /**
         * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.
         *
         * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`
         *
         * @deprecated
         */
        "-moz-border-radius"?: Property.BorderRadius<TLength> | undefined;
        /**
         * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-border-radius-bottomleft"?: Property.BorderBottomLeftRadius<TLength> | undefined;
        /**
         * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-border-radius-bottomright"?: Property.BorderBottomRightRadius<TLength> | undefined;
        /**
         * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-border-radius-topleft"?: Property.BorderTopLeftRadius<TLength> | undefined;
        /**
         * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.
         *
         * **Syntax**: `<length-percentage>{1,2}`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-border-radius-topright"?: Property.BorderTopRightRadius<TLength> | undefined;
        /**
         * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | baseline | stretch`
         *
         * **Initial value**: `stretch`
         *
         * @deprecated
         */
        "-moz-box-align"?: Property.BoxAlign | undefined;
        /**
         * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
         *
         * **Syntax**: `normal | reverse | inherit`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        "-moz-box-direction"?: Property.BoxDirection | undefined;
        /**
         * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-box-flex"?: Property.BoxFlex | undefined;
        /**
         * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        "-moz-box-ordinal-group"?: Property.BoxOrdinalGroup | undefined;
        /**
         * This is a property of the original CSS Flexible Box Layout Module draft, and has been replaced by a newer standard. See flexbox for information about the current standard.
         *
         * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
         *
         * **Initial value**: `inline-axis` (`horizontal` in XUL)
         *
         * @deprecated
         */
        "-moz-box-orient"?: Property.BoxOrient | undefined;
        /**
         * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | justify`
         *
         * **Initial value**: `start`
         *
         * @deprecated
         */
        "-moz-box-pack"?: Property.BoxPack | undefined;
        /**
         * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.
         *
         * **Syntax**: `none | <shadow>#`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "-moz-box-shadow"?: Property.BoxShadow | undefined;
        /**
         * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.
         *
         * **Syntax**: `border-box | content-box | margin-box | padding-box`
         *
         * **Initial value**: `content-box`
         *
         * @deprecated
         */
        "-moz-float-edge"?: Property.MozFloatEdge | undefined;
        /**
         * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.
         *
         * **Syntax**: `0 | 1`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-force-broken-image-icon"?: Property.MozForceBrokenImageIcon | undefined;
        /**
         * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.
         *
         * **Syntax**: `<alpha-value>`
         *
         * **Initial value**: `1.0`
         *
         * @deprecated
         */
        "-moz-opacity"?: Property.Opacity | undefined;
        /**
         * The **`outline`** CSS shorthand property set all the outline properties in a single declaration.
         *
         * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`
         *
         * @deprecated
         */
        "-moz-outline"?: Property.Outline<TLength> | undefined;
        /**
         * The **`outline-color`** CSS property sets the color of an element's outline.
         *
         * **Syntax**: `<color> | invert`
         *
         * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other
         *
         * @deprecated
         */
        "-moz-outline-color"?: Property.OutlineColor | undefined;
        /**
         * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.
         *
         * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`
         *
         * @deprecated
         */
        "-moz-outline-radius"?: Property.MozOutlineRadius<TLength> | undefined;
        /**
         * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.
         *
         * **Syntax**: `<outline-radius>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-outline-radius-bottomleft"?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;
        /**
         * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.
         *
         * **Syntax**: `<outline-radius>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-outline-radius-bottomright"?: Property.MozOutlineRadiusBottomright<TLength> | undefined;
        /**
         * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.
         *
         * **Syntax**: `<outline-radius>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-outline-radius-topleft"?: Property.MozOutlineRadiusTopleft<TLength> | undefined;
        /**
         * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.
         *
         * **Syntax**: `<outline-radius>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-moz-outline-radius-topright"?: Property.MozOutlineRadiusTopright<TLength> | undefined;
        /**
         * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
         *
         * **Syntax**: `auto | <'border-style'>`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "-moz-outline-style"?: Property.OutlineStyle | undefined;
        /**
         * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
         *
         * **Syntax**: `<line-width>`
         *
         * **Initial value**: `medium`
         *
         * @deprecated
         */
        "-moz-outline-width"?: Property.OutlineWidth<TLength> | undefined;
        /**
         * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.
         *
         * **Syntax**: `auto | start | end | left | right | center | justify`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "-moz-text-align-last"?: Property.TextAlignLast | undefined;
        /**
         * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `currentcolor`
         *
         * @deprecated
         */
        "-moz-text-decoration-color"?: Property.TextDecorationColor | undefined;
        /**
         * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.
         *
         * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "-moz-text-decoration-line"?: Property.TextDecorationLine | undefined;
        /**
         * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.
         *
         * **Syntax**: `solid | double | dotted | dashed | wavy`
         *
         * **Initial value**: `solid`
         *
         * @deprecated
         */
        "-moz-text-decoration-style"?: Property.TextDecorationStyle | undefined;
        /**
         * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.
         *
         * **Syntax**: `auto | none | enabled | disabled`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "-moz-user-input"?: Property.MozUserInput | undefined;
        /**
         * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.
         *
         * **Syntax**: `auto | normal | active | inactive | disabled`
         *
         * **Initial value**: `auto`
         *
         * @deprecated
         */
        "-ms-ime-mode"?: Property.ImeMode | undefined;
        /**
         * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.
         *
         * **Syntax**: `<color>`
         *
         * **Initial value**: `Scrollbar`
         *
         * @deprecated
         */
        "-ms-scrollbar-track-color"?: Property.MsScrollbarTrackColor | undefined;
        /**
         * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
         *
         * **Syntax**: `<single-animation>#`
         *
         * @deprecated
         */
        "-o-animation"?: Property.Animation<TTime> | undefined;
        /**
         * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * @deprecated
         */
        "-o-animation-delay"?: Property.AnimationDelay<TTime> | undefined;
        /**
         * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
         *
         * **Syntax**: `<single-animation-direction>#`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        "-o-animation-direction"?: Property.AnimationDirection | undefined;
        /**
         * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * @deprecated
         */
        "-o-animation-duration"?: Property.AnimationDuration<TTime> | undefined;
        /**
         * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
         *
         * **Syntax**: `<single-animation-fill-mode>#`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "-o-animation-fill-mode"?: Property.AnimationFillMode | undefined;
        /**
         * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.
         *
         * **Syntax**: `<single-animation-iteration-count>#`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        "-o-animation-iteration-count"?: Property.AnimationIterationCount | undefined;
        /**
         * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules describing the animation or animations to apply to the element.
         *
         * **Syntax**: `[ none | <keyframes-name> ]#`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "-o-animation-name"?: Property.AnimationName | undefined;
        /**
         * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
         *
         * **Syntax**: `<single-animation-play-state>#`
         *
         * **Initial value**: `running`
         *
         * @deprecated
         */
        "-o-animation-play-state"?: Property.AnimationPlayState | undefined;
        /**
         * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         *
         * @deprecated
         */
        "-o-animation-timing-function"?: Property.AnimationTimingFunction | undefined;
        /**
         * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
         *
         * **Syntax**: `<bg-size>#`
         *
         * **Initial value**: `auto auto`
         *
         * @deprecated
         */
        "-o-background-size"?: Property.BackgroundSize<TLength> | undefined;
        /**
         * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.
         *
         * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
         *
         * @deprecated
         */
        "-o-border-image"?: Property.BorderImage | undefined;
        /**
         * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.
         *
         * **Syntax**: `fill | contain | cover | none | scale-down`
         *
         * **Initial value**: `fill`
         *
         * @deprecated
         */
        "-o-object-fit"?: Property.ObjectFit | undefined;
        /**
         * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.
         *
         * **Syntax**: `<position>`
         *
         * **Initial value**: `50% 50%`
         *
         * @deprecated
         */
        "-o-object-position"?: Property.ObjectPosition<TLength> | undefined;
        /**
         * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).
         *
         * **Syntax**: `<integer> | <length>`
         *
         * **Initial value**: `8`
         *
         * @deprecated
         */
        "-o-tab-size"?: Property.TabSize<TLength> | undefined;
        /**
         * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.
         *
         * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`
         *
         * **Initial value**: `clip`
         *
         * @deprecated
         */
        "-o-text-overflow"?: Property.TextOverflow | undefined;
        /**
         * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
         *
         * **Syntax**: `none | <transform-list>`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "-o-transform"?: Property.Transform | undefined;
        /**
         * The **`transform-origin`** CSS property sets the origin for an element's transformations.
         *
         * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
         *
         * **Initial value**: `50% 50% 0`
         *
         * @deprecated
         */
        "-o-transform-origin"?: Property.TransformOrigin<TLength> | undefined;
        /**
         * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
         *
         * **Syntax**: `<single-transition>#`
         *
         * @deprecated
         */
        "-o-transition"?: Property.Transition<TTime> | undefined;
        /**
         * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * @deprecated
         */
        "-o-transition-delay"?: Property.TransitionDelay<TTime> | undefined;
        /**
         * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
         *
         * **Syntax**: `<time>#`
         *
         * **Initial value**: `0s`
         *
         * @deprecated
         */
        "-o-transition-duration"?: Property.TransitionDuration<TTime> | undefined;
        /**
         * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
         *
         * **Syntax**: `none | <single-transition-property>#`
         *
         * **Initial value**: all
         *
         * @deprecated
         */
        "-o-transition-property"?: Property.TransitionProperty | undefined;
        /**
         * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
         *
         * **Syntax**: `<easing-function>#`
         *
         * **Initial value**: `ease`
         *
         * @deprecated
         */
        "-o-transition-timing-function"?: Property.TransitionTimingFunction | undefined;
        /**
         * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | baseline | stretch`
         *
         * **Initial value**: `stretch`
         *
         * @deprecated
         */
        "-webkit-box-align"?: Property.BoxAlign | undefined;
        /**
         * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
         *
         * **Syntax**: `normal | reverse | inherit`
         *
         * **Initial value**: `normal`
         *
         * @deprecated
         */
        "-webkit-box-direction"?: Property.BoxDirection | undefined;
        /**
         * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
         *
         * **Syntax**: `<number>`
         *
         * **Initial value**: `0`
         *
         * @deprecated
         */
        "-webkit-box-flex"?: Property.BoxFlex | undefined;
        /**
         * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        "-webkit-box-flex-group"?: Property.BoxFlexGroup | undefined;
        /**
         * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).
         *
         * **Syntax**: `single | multiple`
         *
         * **Initial value**: `single`
         *
         * @deprecated
         */
        "-webkit-box-lines"?: Property.BoxLines | undefined;
        /**
         * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
         *
         * **Syntax**: `<integer>`
         *
         * **Initial value**: `1`
         *
         * @deprecated
         */
        "-webkit-box-ordinal-group"?: Property.BoxOrdinalGroup | undefined;
        /**
         * This is a property of the original CSS Flexible Box Layout Module draft, and has been replaced by a newer standard. See flexbox for information about the current standard.
         *
         * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
         *
         * **Initial value**: `inline-axis` (`horizontal` in XUL)
         *
         * @deprecated
         */
        "-webkit-box-orient"?: Property.BoxOrient | undefined;
        /**
         * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
         *
         * **Syntax**: `start | center | end | justify`
         *
         * **Initial value**: `start`
         *
         * @deprecated
         */
        "-webkit-box-pack"?: Property.BoxPack | undefined;
        /**
         * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.
         *
         * **Syntax**: `none | repeat( <length-percentage> )`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "-webkit-scroll-snap-points-x"?: Property.ScrollSnapPointsX | undefined;
        /**
         * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.
         *
         * **Syntax**: `none | repeat( <length-percentage> )`
         *
         * **Initial value**: `none`
         *
         * @deprecated
         */
        "-webkit-scroll-snap-points-y"?: Property.ScrollSnapPointsY | undefined;
    }
    export interface SvgPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
        "alignment-baseline"?: Property.AlignmentBaseline | undefined;
        "baseline-shift"?: Property.BaselineShift<TLength> | undefined;
        clip?: Property.Clip | undefined;
        "clip-path"?: Property.ClipPath | undefined;
        "clip-rule"?: Property.ClipRule | undefined;
        color?: Property.Color | undefined;
        "color-interpolation"?: Property.ColorInterpolation | undefined;
        "color-rendering"?: Property.ColorRendering | undefined;
        cursor?: Property.Cursor | undefined;
        direction?: Property.Direction | undefined;
        display?: Property.Display | undefined;
        "dominant-baseline"?: Property.DominantBaseline | undefined;
        fill?: Property.Fill | undefined;
        "fill-opacity"?: Property.FillOpacity | undefined;
        "fill-rule"?: Property.FillRule | undefined;
        filter?: Property.Filter | undefined;
        "flood-color"?: Property.FloodColor | undefined;
        "flood-opacity"?: Property.FloodOpacity | undefined;
        font?: Property.Font | undefined;
        "font-family"?: Property.FontFamily | undefined;
        "font-size"?: Property.FontSize<TLength> | undefined;
        "font-size-adjust"?: Property.FontSizeAdjust | undefined;
        "font-stretch"?: Property.FontStretch | undefined;
        "font-style"?: Property.FontStyle | undefined;
        "font-variant"?: Property.FontVariant | undefined;
        "font-weight"?: Property.FontWeight | undefined;
        "glyph-orientation-vertical"?: Property.GlyphOrientationVertical | undefined;
        "image-rendering"?: Property.ImageRendering | undefined;
        "letter-spacing"?: Property.LetterSpacing<TLength> | undefined;
        "lighting-color"?: Property.LightingColor | undefined;
        "line-height"?: Property.LineHeight<TLength> | undefined;
        marker?: Property.Marker | undefined;
        "marker-end"?: Property.MarkerEnd | undefined;
        "marker-mid"?: Property.MarkerMid | undefined;
        "marker-start"?: Property.MarkerStart | undefined;
        mask?: Property.Mask<TLength> | undefined;
        opacity?: Property.Opacity | undefined;
        overflow?: Property.Overflow | undefined;
        "paint-order"?: Property.PaintOrder | undefined;
        "pointer-events"?: Property.PointerEvents | undefined;
        "shape-rendering"?: Property.ShapeRendering | undefined;
        "stop-color"?: Property.StopColor | undefined;
        "stop-opacity"?: Property.StopOpacity | undefined;
        stroke?: Property.Stroke | undefined;
        "stroke-dasharray"?: Property.StrokeDasharray<TLength> | undefined;
        "stroke-dashoffset"?: Property.StrokeDashoffset<TLength> | undefined;
        "stroke-linecap"?: Property.StrokeLinecap | undefined;
        "stroke-linejoin"?: Property.StrokeLinejoin | undefined;
        "stroke-miterlimit"?: Property.StrokeMiterlimit | undefined;
        "stroke-opacity"?: Property.StrokeOpacity | undefined;
        "stroke-width"?: Property.StrokeWidth<TLength> | undefined;
        "text-anchor"?: Property.TextAnchor | undefined;
        "text-decoration"?: Property.TextDecoration<TLength> | undefined;
        "text-rendering"?: Property.TextRendering | undefined;
        "unicode-bidi"?: Property.UnicodeBidi | undefined;
        "vector-effect"?: Property.VectorEffect | undefined;
        visibility?: Property.Visibility | undefined;
        "white-space"?: Property.WhiteSpace | undefined;
        "word-spacing"?: Property.WordSpacing<TLength> | undefined;
        "writing-mode"?: Property.WritingMode | undefined;
    }
    export interface PropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> extends StandardPropertiesHyphen<TLength, TTime>, VendorPropertiesHyphen<TLength, TTime>, ObsoletePropertiesHyphen<TLength, TTime>, SvgPropertiesHyphen<TLength, TTime> {
    }
    export type StandardLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandProperties<TLength, TTime>>;
    export type StandardShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandProperties<TLength, TTime>>;
    export interface StandardPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> extends StandardLonghandPropertiesFallback<TLength, TTime>, StandardShorthandPropertiesFallback<TLength, TTime> {
    }
    export type VendorLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandProperties<TLength, TTime>>;
    export type VendorShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandProperties<TLength, TTime>>;
    export interface VendorPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandPropertiesFallback<TLength, TTime>, VendorShorthandPropertiesFallback<TLength, TTime> {
    }
    export type ObsoletePropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoleteProperties<TLength, TTime>>;
    export type SvgPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgProperties<TLength, TTime>>;
    export interface PropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> extends StandardPropertiesFallback<TLength, TTime>, VendorPropertiesFallback<TLength, TTime>, ObsoletePropertiesFallback<TLength, TTime>, SvgPropertiesFallback<TLength, TTime> {
    }
    export type StandardLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandPropertiesHyphen<TLength, TTime>>;
    export type StandardShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandPropertiesHyphen<TLength, TTime>>;
    export interface StandardPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> extends StandardLonghandPropertiesHyphenFallback<TLength, TTime>, StandardShorthandPropertiesHyphenFallback<TLength, TTime> {
    }
    export type VendorLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandPropertiesHyphen<TLength, TTime>>;
    export type VendorShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandPropertiesHyphen<TLength, TTime>>;
    export interface VendorPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandPropertiesHyphenFallback<TLength, TTime>, VendorShorthandPropertiesHyphenFallback<TLength, TTime> {
    }
    export type ObsoletePropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoletePropertiesHyphen<TLength, TTime>>;
    export type SvgPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgPropertiesHyphen<TLength, TTime>>;
    export interface PropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> extends StandardPropertiesHyphenFallback<TLength, TTime>, VendorPropertiesHyphenFallback<TLength, TTime>, ObsoletePropertiesHyphenFallback<TLength, TTime>, SvgPropertiesHyphenFallback<TLength, TTime> {
    }
    export type AtRules = "@charset" | "@counter-style" | "@document" | "@font-face" | "@font-feature-values" | "@import" | "@keyframes" | "@media" | "@namespace" | "@page" | "@property" | "@supports" | "@viewport";
    export type AdvancedPseudos = ":-moz-any()" | ":-moz-dir" | ":-webkit-any()" | "::cue" | "::cue-region" | "::part" | "::slotted" | ":dir" | ":has" | ":host" | ":host-context" | ":is" | ":lang" | ":matches()" | ":not" | ":nth-child" | ":nth-last-child" | ":nth-last-of-type" | ":nth-of-type" | ":where";
    export type SimplePseudos = ":-khtml-any-link" | ":-moz-any-link" | ":-moz-focusring" | ":-moz-full-screen" | ":-moz-placeholder" | ":-moz-read-only" | ":-moz-read-write" | ":-moz-ui-invalid" | ":-moz-ui-valid" | ":-ms-fullscreen" | ":-ms-input-placeholder" | ":-webkit-any-link" | ":-webkit-full-screen" | "::-moz-placeholder" | "::-moz-progress-bar" | "::-moz-range-progress" | "::-moz-range-thumb" | "::-moz-range-track" | "::-moz-selection" | "::-ms-backdrop" | "::-ms-browse" | "::-ms-check" | "::-ms-clear" | "::-ms-fill" | "::-ms-fill-lower" | "::-ms-fill-upper" | "::-ms-input-placeholder" | "::-ms-reveal" | "::-ms-thumb" | "::-ms-ticks-after" | "::-ms-ticks-before" | "::-ms-tooltip" | "::-ms-track" | "::-ms-value" | "::-webkit-backdrop" | "::-webkit-input-placeholder" | "::-webkit-progress-bar" | "::-webkit-progress-inner-value" | "::-webkit-progress-value" | "::-webkit-slider-runnable-track" | "::-webkit-slider-thumb" | "::after" | "::backdrop" | "::before" | "::cue" | "::cue-region" | "::first-letter" | "::first-line" | "::grammar-error" | "::marker" | "::placeholder" | "::selection" | "::spelling-error" | "::target-text" | ":active" | ":after" | ":any-link" | ":before" | ":blank" | ":checked" | ":current" | ":default" | ":defined" | ":disabled" | ":empty" | ":enabled" | ":first" | ":first-child" | ":first-letter" | ":first-line" | ":first-of-type" | ":focus" | ":focus-visible" | ":focus-within" | ":fullscreen" | ":future" | ":hover" | ":in-range" | ":indeterminate" | ":invalid" | ":last-child" | ":last-of-type" | ":left" | ":link" | ":local-link" | ":nth-col" | ":nth-last-col" | ":only-child" | ":only-of-type" | ":optional" | ":out-of-range" | ":past" | ":paused" | ":picture-in-picture" | ":placeholder-shown" | ":read-only" | ":read-write" | ":required" | ":right" | ":root" | ":scope" | ":target" | ":target-within" | ":user-invalid" | ":user-valid" | ":valid" | ":visited";
    export type Pseudos = AdvancedPseudos | SimplePseudos;
    export type HtmlAttributes = "[abbr]" | "[accept-charset]" | "[accept]" | "[accesskey]" | "[action]" | "[align]" | "[alink]" | "[allow]" | "[allowfullscreen]" | "[allowpaymentrequest]" | "[alt]" | "[archive]" | "[async]" | "[autobuffer]" | "[autocapitalize]" | "[autocomplete]" | "[autofocus]" | "[autoplay]" | "[axis]" | "[background]" | "[behavior]" | "[bgcolor]" | "[border]" | "[bottommargin]" | "[buffered]" | "[cellpadding]" | "[cellspacing]" | "[char]" | "[charoff]" | "[charset]" | "[checked]" | "[cite]" | "[class]" | "[classid]" | "[clear]" | "[code]" | "[codebase]" | "[codetype]" | "[color]" | "[cols]" | "[colspan]" | "[command]" | "[compact]" | "[content]" | "[contenteditable]" | "[contextmenu]" | "[controls]" | "[coords]" | "[crossorigin]" | "[data]" | "[datafld]" | "[datasrc]" | "[datetime]" | "[declare]" | "[decoding]" | "[default]" | "[defer]" | "[dir]" | "[direction]" | "[dirname]" | "[disabled]" | "[download]" | "[draggable]" | "[enctype]" | "[enterkeyhint]" | "[exportparts]" | "[face]" | "[for]" | "[form]" | "[formaction]" | "[formenctype]" | "[formmethod]" | "[formnovalidate]" | "[formtarget]" | "[frame]" | "[frameborder]" | "[headers]" | "[height]" | "[hidden]" | "[high]" | "[href]" | "[hreflang]" | "[hspace]" | "[http-equiv]" | "[icon]" | "[id]" | "[imagesizes]" | "[imagesrcset]" | "[inputmode]" | "[integrity]" | "[intrinsicsize]" | "[is]" | "[ismap]" | "[itemid]" | "[itemprop]" | "[itemref]" | "[itemscope]" | "[itemtype]" | "[kind]" | "[label]" | "[lang]" | "[language]" | "[leftmargin]" | "[link]" | "[loading]" | "[longdesc]" | "[loop]" | "[low]" | "[manifest]" | "[marginheight]" | "[marginwidth]" | "[max]" | "[maxlength]" | "[mayscript]" | "[media]" | "[method]" | "[methods]" | "[min]" | "[minlength]" | "[moz-opaque]" | "[mozallowfullscreen]" | "[mozcurrentsampleoffset]" | "[msallowfullscreen]" | "[multiple]" | "[muted]" | "[name]" | "[nohref]" | "[nomodule]" | "[nonce]" | "[noresize]" | "[noshade]" | "[novalidate]" | "[nowrap]" | "[object]" | "[onafterprint]" | "[onbeforeprint]" | "[onbeforeunload]" | "[onblur]" | "[onerror]" | "[onfocus]" | "[onhashchange]" | "[onlanguagechange]" | "[onload]" | "[onmessage]" | "[onoffline]" | "[ononline]" | "[onpopstate]" | "[onredo]" | "[onresize]" | "[onstorage]" | "[onundo]" | "[onunload]" | "[open]" | "[optimum]" | "[part]" | "[ping]" | "[placeholder]" | "[played]" | "[poster]" | "[prefetch]" | "[preload]" | "[profile]" | "[radiogroup]" | "[readonly]" | "[referrerpolicy]" | "[rel]" | "[required]" | "[rev]" | "[reversed]" | "[rightmargin]" | "[rows]" | "[rowspan]" | "[rules]" | "[sandbox-allow-downloads]" | "[sandbox-allow-modals]" | "[sandbox-allow-popups-to-escape-sandbox]" | "[sandbox-allow-popups]" | "[sandbox-allow-presentation]" | "[sandbox-allow-same-origin]" | "[sandbox-allow-storage-access-by-user-activation]" | "[sandbox-allow-top-navigation-by-user-activation]" | "[sandbox]" | "[scope]" | "[scoped]" | "[scrollamount]" | "[scrolldelay]" | "[scrolling]" | "[selected]" | "[shape]" | "[size]" | "[sizes]" | "[slot]" | "[span]" | "[spellcheck]" | "[src]" | "[srcdoc]" | "[srclang]" | "[srcset]" | "[standby]" | "[start]" | "[style]" | "[summary]" | "[tabindex]" | "[target]" | "[text]" | "[title]" | "[topmargin]" | "[translate]" | "[truespeed]" | "[type]" | "[usemap]" | "[valign]" | "[value]" | "[valuetype]" | "[version]" | "[vlink]" | "[volume]" | "[vspace]" | "[webkitallowfullscreen]" | "[width]" | "[wrap]" | "[xmlns]";
    export type SvgAttributes = "[accent-height]" | "[alignment-baseline]" | "[allowReorder]" | "[alphabetic]" | "[animation]" | "[arabic-form]" | "[ascent]" | "[attributeName]" | "[attributeType]" | "[azimuth]" | "[baseFrequency]" | "[baseProfile]" | "[baseline-shift]" | "[bbox]" | "[bias]" | "[by]" | "[calcMode]" | "[cap-height]" | "[class]" | "[clip-path]" | "[clip-rule]" | "[clipPathUnits]" | "[clip]" | "[color-interpolation-filters]" | "[color-interpolation]" | "[color-profile]" | "[color-rendering]" | "[color]" | "[contentScriptType]" | "[contentStyleType]" | "[cursor]" | "[cx]" | "[cy]" | "[d]" | "[descent]" | "[diffuseConstant]" | "[direction]" | "[display]" | "[divisor]" | "[document]" | "[dominant-baseline]" | "[download]" | "[dur]" | "[dx]" | "[dy]" | "[edgeMode]" | "[elevation]" | "[enable-background]" | "[fill-opacity]" | "[fill-rule]" | "[fill]" | "[filterRes]" | "[filterUnits]" | "[filter]" | "[flood-color]" | "[flood-opacity]" | "[font-family]" | "[font-size-adjust]" | "[font-size]" | "[font-stretch]" | "[font-style]" | "[font-variant]" | "[font-weight]" | "[format]" | "[fr]" | "[from]" | "[fx]" | "[fy]" | "[g1]" | "[g2]" | "[global]" | "[glyph-name]" | "[glyph-orientation-horizontal]" | "[glyph-orientation-vertical]" | "[glyphRef]" | "[gradientTransform]" | "[gradientUnits]" | "[graphical]" | "[hanging]" | "[hatchContentUnits]" | "[hatchUnits]" | "[height]" | "[horiz-adv-x]" | "[horiz-origin-x]" | "[horiz-origin-y]" | "[href]" | "[hreflang]" | "[id]" | "[ideographic]" | "[image-rendering]" | "[in2]" | "[in]" | "[k1]" | "[k2]" | "[k3]" | "[k4]" | "[k]" | "[kernelMatrix]" | "[kernelUnitLength]" | "[kerning]" | "[keyPoints]" | "[lang]" | "[lengthAdjust]" | "[letter-spacing]" | "[lighting-color]" | "[limitingConeAngle]" | "[marker-end]" | "[marker-mid]" | "[marker-start]" | "[markerHeight]" | "[markerUnits]" | "[markerWidth]" | "[maskContentUnits]" | "[maskUnits]" | "[mask]" | "[mathematical]" | "[media]" | "[mode]" | "[name]" | "[numOctaves]" | "[offset]" | "[opacity]" | "[operator]" | "[order]" | "[orient]" | "[orientation]" | "[origin]" | "[overflow]" | "[overline-position]" | "[overline-thickness]" | "[paint-order]" | "[panose-1]" | "[path]" | "[patternContentUnits]" | "[patternTransform]" | "[patternUnits]" | "[ping]" | "[pitch]" | "[pointer-events]" | "[pointsAtX]" | "[pointsAtY]" | "[pointsAtZ]" | "[points]" | "[preserveAlpha]" | "[preserveAspectRatio]" | "[primitiveUnits]" | "[r]" | "[radius]" | "[refX]" | "[refY]" | "[referrerpolicy]" | "[rel]" | "[repeatCount]" | "[requiredExtensions]" | "[requiredFeatures]" | "[rotate]" | "[rx]" | "[ry]" | "[scale]" | "[seed]" | "[shape-rendering]" | "[side]" | "[slope]" | "[solid-color]" | "[solid-opacity]" | "[spacing]" | "[specularConstant]" | "[specularExponent]" | "[spreadMethod]" | "[startOffset]" | "[stdDeviation]" | "[stemh]" | "[stemv]" | "[stitchTiles]" | "[stop-color]" | "[stop-opacity]" | "[strikethrough-position]" | "[strikethrough-thickness]" | "[string]" | "[stroke-dasharray]" | "[stroke-dashoffset]" | "[stroke-linecap]" | "[stroke-linejoin]" | "[stroke-miterlimit]" | "[stroke-opacity]" | "[stroke-width]" | "[stroke]" | "[style]" | "[surfaceScale]" | "[systemLanguage]" | "[tabindex]" | "[targetX]" | "[targetY]" | "[target]" | "[text-anchor]" | "[text-decoration]" | "[text-overflow]" | "[text-rendering]" | "[textLength]" | "[title]" | "[to]" | "[transform-origin]" | "[transform]" | "[type]" | "[u1]" | "[u2]" | "[underline-position]" | "[underline-thickness]" | "[unicode-bidi]" | "[unicode-range]" | "[unicode]" | "[units-per-em]" | "[v-alphabetic]" | "[v-hanging]" | "[v-ideographic]" | "[v-mathematical]" | "[values]" | "[vector-effect]" | "[version]" | "[vert-adv-y]" | "[vert-origin-x]" | "[vert-origin-y]" | "[viewBox]" | "[viewTarget]" | "[visibility]" | "[white-space]" | "[width]" | "[widths]" | "[word-spacing]" | "[writing-mode]" | "[x-height]" | "[x1]" | "[x2]" | "[xChannelSelector]" | "[x]" | "[y1]" | "[y2]" | "[yChannelSelector]" | "[y]" | "[z]" | "[zoomAndPan]";
    export type Globals = "-moz-initial" | "inherit" | "initial" | "revert" | "unset";
    export namespace Property {
        type AccentColor = Globals | DataType.Color | "auto";
        type AlignContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | "baseline" | "normal" | (string & {});
        type AlignItems = Globals | DataType.SelfPosition | "baseline" | "normal" | "stretch" | (string & {});
        type AlignSelf = Globals | DataType.SelfPosition | "auto" | "baseline" | "normal" | "stretch" | (string & {});
        type AlignTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | "baseline" | "normal" | (string & {});
        type All = Globals;
        type Animation<TTime = string & {}> = Globals | DataType.SingleAnimation<TTime> | (string & {});
        type AnimationDelay<TTime = string & {}> = Globals | TTime | (string & {});
        type AnimationDirection = Globals | DataType.SingleAnimationDirection | (string & {});
        type AnimationDuration<TTime = string & {}> = Globals | TTime | (string & {});
        type AnimationFillMode = Globals | DataType.SingleAnimationFillMode | (string & {});
        type AnimationIterationCount = Globals | "infinite" | (string & {}) | (number & {});
        type AnimationName = Globals | "none" | (string & {});
        type AnimationPlayState = Globals | "paused" | "running" | (string & {});
        type AnimationTimingFunction = Globals | DataType.EasingFunction | (string & {});
        type Appearance = Globals | DataType.CompatAuto | "auto" | "menulist-button" | "none" | "textfield";
        type AspectRatio = Globals | "auto" | (string & {});
        type Azimuth = Globals | "behind" | "center" | "center-left" | "center-right" | "far-left" | "far-right" | "left" | "left-side" | "leftwards" | "right" | "right-side" | "rightwards" | (string & {});
        type BackdropFilter = Globals | "none" | (string & {});
        type BackfaceVisibility = Globals | "hidden" | "visible";
        type Background<TLength = (string & {}) | 0> = Globals | DataType.FinalBgLayer<TLength> | (string & {});
        type BackgroundAttachment = Globals | DataType.Attachment | (string & {});
        type BackgroundBlendMode = Globals | DataType.BlendMode | (string & {});
        type BackgroundClip = Globals | DataType.Box | (string & {});
        type BackgroundColor = Globals | DataType.Color;
        type BackgroundImage = Globals | "none" | (string & {});
        type BackgroundOrigin = Globals | DataType.Box | (string & {});
        type BackgroundPosition<TLength = (string & {}) | 0> = Globals | DataType.BgPosition<TLength> | (string & {});
        type BackgroundPositionX<TLength = (string & {}) | 0> = Globals | TLength | "center" | "left" | "right" | "x-end" | "x-start" | (string & {});
        type BackgroundPositionY<TLength = (string & {}) | 0> = Globals | TLength | "bottom" | "center" | "top" | "y-end" | "y-start" | (string & {});
        type BackgroundRepeat = Globals | DataType.RepeatStyle | (string & {});
        type BackgroundSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});
        type BlockOverflow = Globals | "clip" | "ellipsis" | (string & {});
        type BlockSize<TLength = (string & {}) | 0> = Globals | TLength | "-moz-fit-content" | "-moz-max-content" | "-moz-min-content" | "-webkit-fill-available" | "auto" | "fit-content" | "max-content" | "min-content" | (string & {});
        type Border<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderBlock<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderBlockColor = Globals | DataType.Color | (string & {});
        type BorderBlockEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderBlockEndColor = Globals | DataType.Color;
        type BorderBlockEndStyle = Globals | DataType.LineStyle;
        type BorderBlockEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderBlockStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderBlockStartColor = Globals | DataType.Color;
        type BorderBlockStartStyle = Globals | DataType.LineStyle;
        type BorderBlockStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderBlockStyle = Globals | DataType.LineStyle;
        type BorderBlockWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderBottom<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderBottomColor = Globals | DataType.Color;
        type BorderBottomLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderBottomRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderBottomStyle = Globals | DataType.LineStyle;
        type BorderBottomWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderCollapse = Globals | "collapse" | "separate";
        type BorderColor = Globals | DataType.Color | (string & {});
        type BorderEndEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderEndStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderImage = Globals | "none" | "repeat" | "round" | "space" | "stretch" | (string & {}) | (number & {});
        type BorderImageOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});
        type BorderImageRepeat = Globals | "repeat" | "round" | "space" | "stretch" | (string & {});
        type BorderImageSlice = Globals | (string & {}) | (number & {});
        type BorderImageSource = Globals | "none" | (string & {});
        type BorderImageWidth<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {}) | (number & {});
        type BorderInline<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderInlineColor = Globals | DataType.Color | (string & {});
        type BorderInlineEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderInlineEndColor = Globals | DataType.Color;
        type BorderInlineEndStyle = Globals | DataType.LineStyle;
        type BorderInlineEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderInlineStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderInlineStartColor = Globals | DataType.Color;
        type BorderInlineStartStyle = Globals | DataType.LineStyle;
        type BorderInlineStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderInlineStyle = Globals | DataType.LineStyle;
        type BorderInlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderLeft<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderLeftColor = Globals | DataType.Color;
        type BorderLeftStyle = Globals | DataType.LineStyle;
        type BorderLeftWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderRight<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderRightColor = Globals | DataType.Color;
        type BorderRightStyle = Globals | DataType.LineStyle;
        type BorderRightWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderSpacing<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderStartEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderStartStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderStyle = Globals | DataType.LineStyle | (string & {});
        type BorderTop<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type BorderTopColor = Globals | DataType.Color;
        type BorderTopLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderTopRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type BorderTopStyle = Globals | DataType.LineStyle;
        type BorderTopWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type BorderWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});
        type Bottom<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type BoxAlign = Globals | "baseline" | "center" | "end" | "start" | "stretch";
        type BoxDecorationBreak = Globals | "clone" | "slice";
        type BoxDirection = Globals | "inherit" | "normal" | "reverse";
        type BoxFlex = Globals | (number & {}) | (string & {});
        type BoxFlexGroup = Globals | (number & {}) | (string & {});
        type BoxLines = Globals | "multiple" | "single";
        type BoxOrdinalGroup = Globals | (number & {}) | (string & {});
        type BoxOrient = Globals | "block-axis" | "horizontal" | "inherit" | "inline-axis" | "vertical";
        type BoxPack = Globals | "center" | "end" | "justify" | "start";
        type BoxShadow = Globals | "none" | (string & {});
        type BoxSizing = Globals | "border-box" | "content-box";
        type BreakAfter = Globals | "all" | "always" | "auto" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | "column" | "left" | "page" | "recto" | "region" | "right" | "verso";
        type BreakBefore = Globals | "all" | "always" | "auto" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | "column" | "left" | "page" | "recto" | "region" | "right" | "verso";
        type BreakInside = Globals | "auto" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region";
        type CaptionSide = Globals | "block-end" | "block-start" | "bottom" | "inline-end" | "inline-start" | "top";
        type CaretColor = Globals | DataType.Color | "auto";
        type Clear = Globals | "both" | "inline-end" | "inline-start" | "left" | "none" | "right";
        type Clip = Globals | "auto" | (string & {});
        type ClipPath = Globals | DataType.GeometryBox | "none" | (string & {});
        type Color = Globals | DataType.Color;
        type ColorAdjust = Globals | "economy" | "exact";
        type ColorScheme = Globals | "dark" | "light" | "normal" | (string & {});
        type ColumnCount = Globals | "auto" | (number & {}) | (string & {});
        type ColumnFill = Globals | "auto" | "balance" | "balance-all";
        type ColumnGap<TLength = (string & {}) | 0> = Globals | TLength | "normal" | (string & {});
        type ColumnRule<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type ColumnRuleColor = Globals | DataType.Color;
        type ColumnRuleStyle = Globals | DataType.LineStyle | (string & {});
        type ColumnRuleWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});
        type ColumnSpan = Globals | "all" | "none";
        type ColumnWidth<TLength = (string & {}) | 0> = Globals | TLength | "auto";
        type Columns<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {}) | (number & {});
        type Contain = Globals | "content" | "layout" | "none" | "paint" | "size" | "strict" | "style" | (string & {});
        type Content = Globals | DataType.ContentList | "none" | "normal" | (string & {});
        type ContentVisibility = Globals | "auto" | "hidden" | "visible";
        type CounterIncrement = Globals | "none" | (string & {});
        type CounterReset = Globals | "none" | (string & {});
        type CounterSet = Globals | "none" | (string & {});
        type Cursor = Globals | "-moz-grab" | "-webkit-grab" | "alias" | "all-scroll" | "auto" | "cell" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "none" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "progress" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "text" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out" | (string & {});
        type Direction = Globals | "ltr" | "rtl";
        type Display = Globals | DataType.DisplayOutside | DataType.DisplayInside | DataType.DisplayInternal | DataType.DisplayLegacy | "contents" | "list-item" | "none" | (string & {});
        type EmptyCells = Globals | "hide" | "show";
        type Filter = Globals | "none" | (string & {});
        type Flex<TLength = (string & {}) | 0> = Globals | TLength | "auto" | "content" | "fit-content" | "max-content" | "min-content" | "none" | (string & {}) | (number & {});
        type FlexBasis<TLength = (string & {}) | 0> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-auto" | "auto" | "content" | "fit-content" | "max-content" | "min-content" | (string & {});
        type FlexDirection = Globals | "column" | "column-reverse" | "row" | "row-reverse";
        type FlexFlow = Globals | "column" | "column-reverse" | "nowrap" | "row" | "row-reverse" | "wrap" | "wrap-reverse" | (string & {});
        type FlexGrow = Globals | (number & {}) | (string & {});
        type FlexShrink = Globals | (number & {}) | (string & {});
        type FlexWrap = Globals | "nowrap" | "wrap" | "wrap-reverse";
        type Float = Globals | "inline-end" | "inline-start" | "left" | "none" | "right";
        type Font = Globals | "caption" | "icon" | "menu" | "message-box" | "small-caption" | "status-bar" | (string & {});
        type FontFamily = Globals | DataType.GenericFamily | (string & {});
        type FontFeatureSettings = Globals | "normal" | (string & {});
        type FontKerning = Globals | "auto" | "none" | "normal";
        type FontLanguageOverride = Globals | "normal" | (string & {});
        type FontOpticalSizing = Globals | "auto" | "none";
        type FontSize<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | "larger" | "smaller" | (string & {});
        type FontSizeAdjust = Globals | "from-font" | "none" | (string & {}) | (number & {});
        type FontSmooth<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | "always" | "auto" | "never";
        type FontStretch = Globals | DataType.FontStretchAbsolute;
        type FontStyle = Globals | "italic" | "normal" | "oblique" | (string & {});
        type FontSynthesis = Globals | "none" | "small-caps" | "style" | "weight" | (string & {});
        type FontVariant = Globals | DataType.EastAsianVariantValues | "all-petite-caps" | "all-small-caps" | "common-ligatures" | "contextual" | "diagonal-fractions" | "discretionary-ligatures" | "full-width" | "historical-forms" | "historical-ligatures" | "lining-nums" | "no-common-ligatures" | "no-contextual" | "no-discretionary-ligatures" | "no-historical-ligatures" | "none" | "normal" | "oldstyle-nums" | "ordinal" | "petite-caps" | "proportional-nums" | "proportional-width" | "ruby" | "slashed-zero" | "small-caps" | "stacked-fractions" | "tabular-nums" | "titling-caps" | "unicase" | (string & {});
        type FontVariantAlternates = Globals | "historical-forms" | "normal" | (string & {});
        type FontVariantCaps = Globals | "all-petite-caps" | "all-small-caps" | "normal" | "petite-caps" | "small-caps" | "titling-caps" | "unicase";
        type FontVariantEastAsian = Globals | DataType.EastAsianVariantValues | "full-width" | "normal" | "proportional-width" | "ruby" | (string & {});
        type FontVariantLigatures = Globals | "common-ligatures" | "contextual" | "discretionary-ligatures" | "historical-ligatures" | "no-common-ligatures" | "no-contextual" | "no-discretionary-ligatures" | "no-historical-ligatures" | "none" | "normal" | (string & {});
        type FontVariantNumeric = Globals | "diagonal-fractions" | "lining-nums" | "normal" | "oldstyle-nums" | "ordinal" | "proportional-nums" | "slashed-zero" | "stacked-fractions" | "tabular-nums" | (string & {});
        type FontVariantPosition = Globals | "normal" | "sub" | "super";
        type FontVariationSettings = Globals | "normal" | (string & {});
        type FontWeight = Globals | DataType.FontWeightAbsolute | "bolder" | "lighter";
        type ForcedColorAdjust = Globals | "auto" | "none";
        type Gap<TLength = (string & {}) | 0> = Globals | TLength | "normal" | (string & {});
        type Grid = Globals | "none" | (string & {});
        type GridArea = Globals | DataType.GridLine | (string & {});
        type GridAutoColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});
        type GridAutoFlow = Globals | "column" | "dense" | "row" | (string & {});
        type GridAutoRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});
        type GridColumn = Globals | DataType.GridLine | (string & {});
        type GridColumnEnd = Globals | DataType.GridLine;
        type GridColumnGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type GridColumnStart = Globals | DataType.GridLine;
        type GridGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type GridRow = Globals | DataType.GridLine | (string & {});
        type GridRowEnd = Globals | DataType.GridLine;
        type GridRowGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type GridRowStart = Globals | DataType.GridLine;
        type GridTemplate = Globals | "none" | (string & {});
        type GridTemplateAreas = Globals | "none" | (string & {});
        type GridTemplateColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | "subgrid" | (string & {});
        type GridTemplateRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | "subgrid" | (string & {});
        type HangingPunctuation = Globals | "allow-end" | "first" | "force-end" | "last" | "none" | (string & {});
        type Height<TLength = (string & {}) | 0> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "auto" | "fit-content" | "max-content" | "min-content" | (string & {});
        type Hyphens = Globals | "auto" | "manual" | "none";
        type ImageOrientation = Globals | "flip" | "from-image" | (string & {});
        type ImageRendering = Globals | "-moz-crisp-edges" | "-webkit-optimize-contrast" | "auto" | "crisp-edges" | "pixelated";
        type ImageResolution = Globals | "from-image" | (string & {});
        type ImeMode = Globals | "active" | "auto" | "disabled" | "inactive" | "normal";
        type InitialLetter = Globals | "normal" | (string & {}) | (number & {});
        type InlineSize<TLength = (string & {}) | 0> = Globals | TLength | "-moz-fit-content" | "-moz-max-content" | "-moz-min-content" | "-webkit-fill-available" | "auto" | "fit-content" | "max-content" | "min-content" | (string & {});
        type Inset<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type InsetBlock<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type InsetBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type InsetBlockStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type InsetInline<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type InsetInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type InsetInlineStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type Isolation = Globals | "auto" | "isolate";
        type JustifyContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | "left" | "normal" | "right" | (string & {});
        type JustifyItems = Globals | DataType.SelfPosition | "baseline" | "left" | "legacy" | "normal" | "right" | "stretch" | (string & {});
        type JustifySelf = Globals | DataType.SelfPosition | "auto" | "baseline" | "left" | "normal" | "right" | "stretch" | (string & {});
        type JustifyTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | "left" | "normal" | "right" | (string & {});
        type Left<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type LetterSpacing<TLength = (string & {}) | 0> = Globals | TLength | "normal";
        type LineBreak = Globals | "anywhere" | "auto" | "loose" | "normal" | "strict";
        type LineClamp = Globals | "none" | (number & {}) | (string & {});
        type LineHeight<TLength = (string & {}) | 0> = Globals | TLength | "normal" | (string & {}) | (number & {});
        type LineHeightStep<TLength = (string & {}) | 0> = Globals | TLength;
        type ListStyle = Globals | "inside" | "none" | "outside" | (string & {});
        type ListStyleImage = Globals | "none" | (string & {});
        type ListStylePosition = Globals | "inside" | "outside";
        type ListStyleType = Globals | "none" | (string & {});
        type Margin<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginBlock<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginBottom<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginInline<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginLeft<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginRight<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type MarginTop<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type Mask<TLength = (string & {}) | 0> = Globals | DataType.MaskLayer<TLength> | (string & {});
        type MaskBorder = Globals | "alpha" | "luminance" | "none" | "repeat" | "round" | "space" | "stretch" | (string & {}) | (number & {});
        type MaskBorderMode = Globals | "alpha" | "luminance";
        type MaskBorderOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});
        type MaskBorderRepeat = Globals | "repeat" | "round" | "space" | "stretch" | (string & {});
        type MaskBorderSlice = Globals | (string & {}) | (number & {});
        type MaskBorderSource = Globals | "none" | (string & {});
        type MaskBorderWidth<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {}) | (number & {});
        type MaskClip = Globals | DataType.GeometryBox | "no-clip" | (string & {});
        type MaskComposite = Globals | DataType.CompositingOperator | (string & {});
        type MaskImage = Globals | "none" | (string & {});
        type MaskMode = Globals | DataType.MaskingMode | (string & {});
        type MaskOrigin = Globals | DataType.GeometryBox | (string & {});
        type MaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});
        type MaskRepeat = Globals | DataType.RepeatStyle | (string & {});
        type MaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});
        type MaskType = Globals | "alpha" | "luminance";
        type MathStyle = Globals | "compact" | "normal";
        type MaxBlockSize<TLength = (string & {}) | 0> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-fill-available" | "fit-content" | "max-content" | "min-content" | "none" | (string & {});
        type MaxHeight<TLength = (string & {}) | 0> = Globals | TLength | "-moz-fit-content" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "fit-content" | "intrinsic" | "max-content" | "min-content" | "none" | (string & {});
        type MaxInlineSize<TLength = (string & {}) | 0> = Globals | TLength | "-moz-fit-content" | "-moz-max-content" | "-moz-min-content" | "-webkit-fill-available" | "fit-content" | "max-content" | "min-content" | "none" | (string & {});
        type MaxLines = Globals | "none" | (number & {}) | (string & {});
        type MaxWidth<TLength = (string & {}) | 0> = Globals | TLength | "-moz-fit-content" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "fit-content" | "intrinsic" | "max-content" | "min-content" | "none" | (string & {});
        type MinBlockSize<TLength = (string & {}) | 0> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-fill-available" | "auto" | "fit-content" | "max-content" | "min-content" | (string & {});
        type MinHeight<TLength = (string & {}) | 0> = Globals | TLength | "-moz-fit-content" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "auto" | "fit-content" | "intrinsic" | "max-content" | "min-content" | (string & {});
        type MinInlineSize<TLength = (string & {}) | 0> = Globals | TLength | "-moz-fit-content" | "-moz-max-content" | "-moz-min-content" | "-webkit-fill-available" | "auto" | "fit-content" | "max-content" | "min-content" | (string & {});
        type MinWidth<TLength = (string & {}) | 0> = Globals | TLength | "-moz-fit-content" | "-moz-max-content" | "-moz-min-content" | "-webkit-fill-available" | "-webkit-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "auto" | "fit-content" | "intrinsic" | "max-content" | "min-content" | "min-intrinsic" | (string & {});
        type MixBlendMode = Globals | DataType.BlendMode;
        type Offset<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | DataType.GeometryBox | "auto" | "none" | (string & {});
        type OffsetDistance<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type OffsetPath = Globals | DataType.GeometryBox | "none" | (string & {});
        type OffsetRotate = Globals | "auto" | "reverse" | (string & {});
        type ObjectFit = Globals | "contain" | "cover" | "fill" | "none" | "scale-down";
        type ObjectPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;
        type OffsetAnchor<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | "auto";
        type Opacity = Globals | (string & {}) | (number & {});
        type Order = Globals | (number & {}) | (string & {});
        type Orphans = Globals | (number & {}) | (string & {});
        type Outline<TLength = (string & {}) | 0> = Globals | DataType.Color | DataType.LineStyle | DataType.LineWidth<TLength> | "auto" | "invert" | (string & {});
        type OutlineColor = Globals | DataType.Color | "invert";
        type OutlineOffset<TLength = (string & {}) | 0> = Globals | TLength;
        type OutlineStyle = Globals | DataType.LineStyle | "auto" | (string & {});
        type OutlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
        type Overflow = Globals | "-moz-hidden-unscrollable" | "auto" | "clip" | "hidden" | "scroll" | "visible" | (string & {});
        type OverflowAnchor = Globals | "auto" | "none";
        type OverflowBlock = Globals | "auto" | "clip" | "hidden" | "scroll" | "visible";
        type OverflowClipBox = Globals | "content-box" | "padding-box";
        type OverflowClipMargin<TLength = (string & {}) | 0> = Globals | DataType.VisualBox | TLength | (string & {});
        type OverflowInline = Globals | "auto" | "clip" | "hidden" | "scroll" | "visible";
        type OverflowWrap = Globals | "anywhere" | "break-word" | "normal";
        type OverflowX = Globals | "-moz-hidden-unscrollable" | "auto" | "clip" | "hidden" | "scroll" | "visible";
        type OverflowY = Globals | "-moz-hidden-unscrollable" | "auto" | "clip" | "hidden" | "scroll" | "visible";
        type OverscrollBehavior = Globals | "auto" | "contain" | "none" | (string & {});
        type OverscrollBehaviorBlock = Globals | "auto" | "contain" | "none";
        type OverscrollBehaviorInline = Globals | "auto" | "contain" | "none";
        type OverscrollBehaviorX = Globals | "auto" | "contain" | "none";
        type OverscrollBehaviorY = Globals | "auto" | "contain" | "none";
        type Padding<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingRight<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PaddingTop<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type PageBreakAfter = Globals | "always" | "auto" | "avoid" | "left" | "recto" | "right" | "verso";
        type PageBreakBefore = Globals | "always" | "auto" | "avoid" | "left" | "recto" | "right" | "verso";
        type PageBreakInside = Globals | "auto" | "avoid";
        type PaintOrder = Globals | "fill" | "markers" | "normal" | "stroke" | (string & {});
        type Perspective<TLength = (string & {}) | 0> = Globals | TLength | "none";
        type PerspectiveOrigin<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;
        type PlaceContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | "baseline" | "normal" | (string & {});
        type PlaceItems = Globals | DataType.SelfPosition | "baseline" | "normal" | "stretch" | (string & {});
        type PlaceSelf = Globals | DataType.SelfPosition | "auto" | "baseline" | "normal" | "stretch" | (string & {});
        type PointerEvents = Globals | "all" | "auto" | "fill" | "inherit" | "none" | "painted" | "stroke" | "visible" | "visibleFill" | "visiblePainted" | "visibleStroke";
        type Position = Globals | "-webkit-sticky" | "absolute" | "fixed" | "relative" | "static" | "sticky";
        type Quotes = Globals | "auto" | "none" | (string & {});
        type Resize = Globals | "block" | "both" | "horizontal" | "inline" | "none" | "vertical";
        type Right<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type Rotate = Globals | "none" | (string & {});
        type RowGap<TLength = (string & {}) | 0> = Globals | TLength | "normal" | (string & {});
        type RubyAlign = Globals | "center" | "space-around" | "space-between" | "start";
        type RubyMerge = Globals | "auto" | "collapse" | "separate";
        type RubyPosition = Globals | "alternate" | "inter-character" | "over" | "under" | (string & {});
        type Scale = Globals | "none" | (string & {}) | (number & {});
        type ScrollBehavior = Globals | "auto" | "smooth";
        type ScrollMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type ScrollMarginBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type ScrollMarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength;
        type ScrollMarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength;
        type ScrollMarginBottom<TLength = (string & {}) | 0> = Globals | TLength;
        type ScrollMarginInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type ScrollMarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength;
        type ScrollMarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength;
        type ScrollMarginLeft<TLength = (string & {}) | 0> = Globals | TLength;
        type ScrollMarginRight<TLength = (string & {}) | 0> = Globals | TLength;
        type ScrollMarginTop<TLength = (string & {}) | 0> = Globals | TLength;
        type ScrollPadding<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingInline<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingRight<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollPaddingTop<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type ScrollSnapAlign = Globals | "center" | "end" | "none" | "start" | (string & {});
        type ScrollSnapCoordinate<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | "none" | (string & {});
        type ScrollSnapDestination<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;
        type ScrollSnapPointsX = Globals | "none" | (string & {});
        type ScrollSnapPointsY = Globals | "none" | (string & {});
        type ScrollSnapStop = Globals | "always" | "normal";
        type ScrollSnapType = Globals | "block" | "both" | "inline" | "none" | "x" | "y" | (string & {});
        type ScrollSnapTypeX = Globals | "mandatory" | "none" | "proximity";
        type ScrollSnapTypeY = Globals | "mandatory" | "none" | "proximity";
        type ScrollbarColor = Globals | "auto" | (string & {});
        type ScrollbarGutter = Globals | "auto" | "stable" | (string & {});
        type MsScrollbarTrackColor = Globals | DataType.Color;
        type ScrollbarWidth = Globals | "auto" | "none" | "thin";
        type ShapeImageThreshold = Globals | (string & {}) | (number & {});
        type ShapeMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type ShapeOutside = Globals | DataType.Box | "margin-box" | "none" | (string & {});
        type TabSize<TLength = (string & {}) | 0> = Globals | TLength | (number & {}) | (string & {});
        type TableLayout = Globals | "auto" | "fixed";
        type TextAlign = Globals | "center" | "end" | "justify" | "left" | "match-parent" | "right" | "start";
        type TextAlignLast = Globals | "auto" | "center" | "end" | "justify" | "left" | "right" | "start";
        type TextCombineUpright = Globals | "all" | "none" | (string & {});
        type TextDecoration<TLength = (string & {}) | 0> = Globals | DataType.Color | TLength | "auto" | "blink" | "dashed" | "dotted" | "double" | "from-font" | "grammar-error" | "line-through" | "none" | "overline" | "solid" | "spelling-error" | "underline" | "wavy" | (string & {});
        type TextDecorationColor = Globals | DataType.Color;
        type TextDecorationLine = Globals | "blink" | "grammar-error" | "line-through" | "none" | "overline" | "spelling-error" | "underline" | (string & {});
        type TextDecorationSkip = Globals | "box-decoration" | "edges" | "leading-spaces" | "none" | "objects" | "spaces" | "trailing-spaces" | (string & {});
        type TextDecorationSkipInk = Globals | "all" | "auto" | "none";
        type TextDecorationStyle = Globals | "dashed" | "dotted" | "double" | "solid" | "wavy";
        type TextDecorationThickness<TLength = (string & {}) | 0> = Globals | TLength | "auto" | "from-font" | (string & {});
        type TextEmphasis = Globals | DataType.Color | "circle" | "dot" | "double-circle" | "filled" | "none" | "open" | "sesame" | "triangle" | (string & {});
        type TextEmphasisColor = Globals | DataType.Color;
        type TextEmphasisPosition = Globals | (string & {});
        type TextEmphasisStyle = Globals | "circle" | "dot" | "double-circle" | "filled" | "none" | "open" | "sesame" | "triangle" | (string & {});
        type TextIndent<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type TextJustify = Globals | "auto" | "inter-character" | "inter-word" | "none";
        type TextOrientation = Globals | "mixed" | "sideways" | "upright";
        type TextOverflow = Globals | "clip" | "ellipsis" | (string & {});
        type TextRendering = Globals | "auto" | "geometricPrecision" | "optimizeLegibility" | "optimizeSpeed";
        type TextShadow = Globals | "none" | (string & {});
        type TextSizeAdjust = Globals | "auto" | "none" | (string & {});
        type TextTransform = Globals | "capitalize" | "full-size-kana" | "full-width" | "lowercase" | "none" | "uppercase";
        type TextUnderlineOffset<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type TextUnderlinePosition = Globals | "auto" | "from-font" | "left" | "right" | "under" | (string & {});
        type Top<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
        type TouchAction = Globals | "-ms-manipulation" | "-ms-none" | "-ms-pinch-zoom" | "auto" | "manipulation" | "none" | "pan-down" | "pan-left" | "pan-right" | "pan-up" | "pan-x" | "pan-y" | "pinch-zoom" | (string & {});
        type Transform = Globals | "none" | (string & {});
        type TransformBox = Globals | "border-box" | "content-box" | "fill-box" | "stroke-box" | "view-box";
        type TransformOrigin<TLength = (string & {}) | 0> = Globals | TLength | "bottom" | "center" | "left" | "right" | "top" | (string & {});
        type TransformStyle = Globals | "flat" | "preserve-3d";
        type Transition<TTime = string & {}> = Globals | DataType.SingleTransition<TTime> | (string & {});
        type TransitionDelay<TTime = string & {}> = Globals | TTime | (string & {});
        type TransitionDuration<TTime = string & {}> = Globals | TTime | (string & {});
        type TransitionProperty = Globals | "all" | "none" | (string & {});
        type TransitionTimingFunction = Globals | DataType.EasingFunction | (string & {});
        type Translate<TLength = (string & {}) | 0> = Globals | TLength | "none" | (string & {});
        type UnicodeBidi = Globals | "-moz-isolate" | "-moz-isolate-override" | "-moz-plaintext" | "-webkit-isolate" | "-webkit-isolate-override" | "-webkit-plaintext" | "bidi-override" | "embed" | "isolate" | "isolate-override" | "normal" | "plaintext";
        type UserSelect = Globals | "-moz-none" | "all" | "auto" | "contain" | "element" | "none" | "text";
        type VerticalAlign<TLength = (string & {}) | 0> = Globals | TLength | "baseline" | "bottom" | "middle" | "sub" | "super" | "text-bottom" | "text-top" | "top" | (string & {});
        type Visibility = Globals | "collapse" | "hidden" | "visible";
        type WhiteSpace = Globals | "-moz-pre-wrap" | "break-spaces" | "normal" | "nowrap" | "pre" | "pre-line" | "pre-wrap";
        type Widows = Globals | (number & {}) | (string & {});
        type Width<TLength = (string & {}) | 0> = Globals | TLength | "-moz-fit-content" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "-webkit-max-content" | "auto" | "fit-content" | "intrinsic" | "max-content" | "min-content" | "min-intrinsic" | (string & {});
        type WillChange = Globals | DataType.AnimateableFeature | "auto" | (string & {});
        type WordBreak = Globals | "break-all" | "break-word" | "keep-all" | "normal";
        type WordSpacing<TLength = (string & {}) | 0> = Globals | TLength | "normal";
        type WordWrap = Globals | "break-word" | "normal";
        type WritingMode = Globals | "horizontal-tb" | "sideways-lr" | "sideways-rl" | "vertical-lr" | "vertical-rl";
        type ZIndex = Globals | "auto" | (number & {}) | (string & {});
        type Zoom = Globals | "normal" | "reset" | (string & {}) | (number & {});
        type MozAppearance = Globals | "-moz-mac-unified-toolbar" | "-moz-win-borderless-glass" | "-moz-win-browsertabbar-toolbox" | "-moz-win-communications-toolbox" | "-moz-win-communicationstext" | "-moz-win-exclude-glass" | "-moz-win-glass" | "-moz-win-media-toolbox" | "-moz-win-mediatext" | "-moz-window-button-box" | "-moz-window-button-box-maximized" | "-moz-window-button-close" | "-moz-window-button-maximize" | "-moz-window-button-minimize" | "-moz-window-button-restore" | "-moz-window-frame-bottom" | "-moz-window-frame-left" | "-moz-window-frame-right" | "-moz-window-titlebar" | "-moz-window-titlebar-maximized" | "button" | "button-arrow-down" | "button-arrow-next" | "button-arrow-previous" | "button-arrow-up" | "button-bevel" | "button-focus" | "caret" | "checkbox" | "checkbox-container" | "checkbox-label" | "checkmenuitem" | "dualbutton" | "groupbox" | "listbox" | "listitem" | "menuarrow" | "menubar" | "menucheckbox" | "menuimage" | "menuitem" | "menuitemtext" | "menulist" | "menulist-button" | "menulist-text" | "menulist-textfield" | "menupopup" | "menuradio" | "menuseparator" | "meterbar" | "meterchunk" | "none" | "progressbar" | "progressbar-vertical" | "progresschunk" | "progresschunk-vertical" | "radio" | "radio-container" | "radio-label" | "radiomenuitem" | "range" | "range-thumb" | "resizer" | "resizerpanel" | "scale-horizontal" | "scale-vertical" | "scalethumb-horizontal" | "scalethumb-vertical" | "scalethumbend" | "scalethumbstart" | "scalethumbtick" | "scrollbarbutton-down" | "scrollbarbutton-left" | "scrollbarbutton-right" | "scrollbarbutton-up" | "scrollbarthumb-horizontal" | "scrollbarthumb-vertical" | "scrollbartrack-horizontal" | "scrollbartrack-vertical" | "searchfield" | "separator" | "sheet" | "spinner" | "spinner-downbutton" | "spinner-textfield" | "spinner-upbutton" | "splitter" | "statusbar" | "statusbarpanel" | "tab" | "tab-scroll-arrow-back" | "tab-scroll-arrow-forward" | "tabpanel" | "tabpanels" | "textfield" | "textfield-multiline" | "toolbar" | "toolbarbutton" | "toolbarbutton-dropdown" | "toolbargripper" | "toolbox" | "tooltip" | "treeheader" | "treeheadercell" | "treeheadersortarrow" | "treeitem" | "treeline" | "treetwisty" | "treetwistyopen" | "treeview";
        type MozBinding = Globals | "none" | (string & {});
        type MozBorderBottomColors = Globals | DataType.Color | "none" | (string & {});
        type MozBorderLeftColors = Globals | DataType.Color | "none" | (string & {});
        type MozBorderRightColors = Globals | DataType.Color | "none" | (string & {});
        type MozBorderTopColors = Globals | DataType.Color | "none" | (string & {});
        type MozContextProperties = Globals | "fill" | "fill-opacity" | "none" | "stroke" | "stroke-opacity" | (string & {});
        type MozFloatEdge = Globals | "border-box" | "content-box" | "margin-box" | "padding-box";
        type MozForceBrokenImageIcon = Globals | 0 | (string & {}) | 1;
        type MozImageRegion = Globals | "auto" | (string & {});
        type MozOrient = Globals | "block" | "horizontal" | "inline" | "vertical";
        type MozOutlineRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type MozOutlineRadiusBottomleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type MozOutlineRadiusBottomright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type MozOutlineRadiusTopleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type MozOutlineRadiusTopright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type MozStackSizing = Globals | "ignore" | "stretch-to-fit";
        type MozTextBlink = Globals | "blink" | "none";
        type MozUserFocus = Globals | "ignore" | "none" | "normal" | "select-after" | "select-all" | "select-before" | "select-menu" | "select-same";
        type MozUserInput = Globals | "auto" | "disabled" | "enabled" | "none";
        type MozUserModify = Globals | "read-only" | "read-write" | "write-only";
        type MozWindowDragging = Globals | "drag" | "no-drag";
        type MozWindowShadow = Globals | "default" | "menu" | "none" | "sheet" | "tooltip";
        type MsAccelerator = Globals | "false" | "true";
        type MsBlockProgression = Globals | "bt" | "lr" | "rl" | "tb";
        type MsContentZoomChaining = Globals | "chained" | "none";
        type MsContentZoomLimit = Globals | (string & {});
        type MsContentZoomLimitMax = Globals | (string & {});
        type MsContentZoomLimitMin = Globals | (string & {});
        type MsContentZoomSnap = Globals | "mandatory" | "none" | "proximity" | (string & {});
        type MsContentZoomSnapPoints = Globals | (string & {});
        type MsContentZoomSnapType = Globals | "mandatory" | "none" | "proximity";
        type MsContentZooming = Globals | "none" | "zoom";
        type MsFilter = Globals | (string & {});
        type MsFlowFrom = Globals | "none" | (string & {});
        type MsFlowInto = Globals | "none" | (string & {});
        type MsGridColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | (string & {});
        type MsGridRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | (string & {});
        type MsHighContrastAdjust = Globals | "auto" | "none";
        type MsHyphenateLimitChars = Globals | "auto" | (string & {}) | (number & {});
        type MsHyphenateLimitLines = Globals | "no-limit" | (number & {}) | (string & {});
        type MsHyphenateLimitZone<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type MsImeAlign = Globals | "after" | "auto";
        type MsOverflowStyle = Globals | "-ms-autohiding-scrollbar" | "auto" | "none" | "scrollbar";
        type MsScrollChaining = Globals | "chained" | "none";
        type MsScrollLimit = Globals | (string & {});
        type MsScrollLimitXMax<TLength = (string & {}) | 0> = Globals | TLength | "auto";
        type MsScrollLimitXMin<TLength = (string & {}) | 0> = Globals | TLength;
        type MsScrollLimitYMax<TLength = (string & {}) | 0> = Globals | TLength | "auto";
        type MsScrollLimitYMin<TLength = (string & {}) | 0> = Globals | TLength;
        type MsScrollRails = Globals | "none" | "railed";
        type MsScrollSnapPointsX = Globals | (string & {});
        type MsScrollSnapPointsY = Globals | (string & {});
        type MsScrollSnapType = Globals | "mandatory" | "none" | "proximity";
        type MsScrollSnapX = Globals | (string & {});
        type MsScrollSnapY = Globals | (string & {});
        type MsScrollTranslation = Globals | "none" | "vertical-to-horizontal";
        type MsScrollbar3dlightColor = Globals | DataType.Color;
        type MsScrollbarArrowColor = Globals | DataType.Color;
        type MsScrollbarBaseColor = Globals | DataType.Color;
        type MsScrollbarDarkshadowColor = Globals | DataType.Color;
        type MsScrollbarFaceColor = Globals | DataType.Color;
        type MsScrollbarHighlightColor = Globals | DataType.Color;
        type MsScrollbarShadowColor = Globals | DataType.Color;
        type MsTextAutospace = Globals | "ideograph-alpha" | "ideograph-numeric" | "ideograph-parenthesis" | "ideograph-space" | "none";
        type MsTouchSelect = Globals | "grippers" | "none";
        type MsUserSelect = Globals | "element" | "none" | "text";
        type MsWrapFlow = Globals | "auto" | "both" | "clear" | "end" | "maximum" | "start";
        type MsWrapMargin<TLength = (string & {}) | 0> = Globals | TLength;
        type MsWrapThrough = Globals | "none" | "wrap";
        type WebkitAppearance = Globals | "-apple-pay-button" | "button" | "button-bevel" | "caret" | "checkbox" | "default-button" | "inner-spin-button" | "listbox" | "listitem" | "media-controls-background" | "media-controls-fullscreen-background" | "media-current-time-display" | "media-enter-fullscreen-button" | "media-exit-fullscreen-button" | "media-fullscreen-button" | "media-mute-button" | "media-overlay-play-button" | "media-play-button" | "media-seek-back-button" | "media-seek-forward-button" | "media-slider" | "media-sliderthumb" | "media-time-remaining-display" | "media-toggle-closed-captions-button" | "media-volume-slider" | "media-volume-slider-container" | "media-volume-sliderthumb" | "menulist" | "menulist-button" | "menulist-text" | "menulist-textfield" | "meter" | "none" | "progress-bar" | "progress-bar-value" | "push-button" | "radio" | "searchfield" | "searchfield-cancel-button" | "searchfield-decoration" | "searchfield-results-button" | "searchfield-results-decoration" | "slider-horizontal" | "slider-vertical" | "sliderthumb-horizontal" | "sliderthumb-vertical" | "square-button" | "textarea" | "textfield";
        type WebkitBorderBefore<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
        type WebkitBorderBeforeColor = Globals | DataType.Color;
        type WebkitBorderBeforeStyle = Globals | DataType.LineStyle | (string & {});
        type WebkitBorderBeforeWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});
        type WebkitBoxReflect<TLength = (string & {}) | 0> = Globals | TLength | "above" | "below" | "left" | "right" | (string & {});
        type WebkitLineClamp = Globals | "none" | (number & {}) | (string & {});
        type WebkitMask<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | DataType.RepeatStyle | DataType.Box | "border" | "content" | "none" | "padding" | "text" | (string & {});
        type WebkitMaskAttachment = Globals | DataType.Attachment | (string & {});
        type WebkitMaskClip = Globals | DataType.Box | "border" | "content" | "padding" | "text" | (string & {});
        type WebkitMaskComposite = Globals | DataType.CompositeStyle | (string & {});
        type WebkitMaskImage = Globals | "none" | (string & {});
        type WebkitMaskOrigin = Globals | DataType.Box | "border" | "content" | "padding" | (string & {});
        type WebkitMaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});
        type WebkitMaskPositionX<TLength = (string & {}) | 0> = Globals | TLength | "center" | "left" | "right" | (string & {});
        type WebkitMaskPositionY<TLength = (string & {}) | 0> = Globals | TLength | "bottom" | "center" | "top" | (string & {});
        type WebkitMaskRepeat = Globals | DataType.RepeatStyle | (string & {});
        type WebkitMaskRepeatX = Globals | "no-repeat" | "repeat" | "round" | "space";
        type WebkitMaskRepeatY = Globals | "no-repeat" | "repeat" | "round" | "space";
        type WebkitMaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});
        type WebkitOverflowScrolling = Globals | "auto" | "touch";
        type WebkitTapHighlightColor = Globals | DataType.Color;
        type WebkitTextFillColor = Globals | DataType.Color;
        type WebkitTextStroke<TLength = (string & {}) | 0> = Globals | DataType.Color | TLength | (string & {});
        type WebkitTextStrokeColor = Globals | DataType.Color;
        type WebkitTextStrokeWidth<TLength = (string & {}) | 0> = Globals | TLength;
        type WebkitTouchCallout = Globals | "default" | "none";
        type WebkitUserModify = Globals | "read-only" | "read-write" | "read-write-plaintext-only";
        type AlignmentBaseline = Globals | "after-edge" | "alphabetic" | "auto" | "baseline" | "before-edge" | "central" | "hanging" | "ideographic" | "mathematical" | "middle" | "text-after-edge" | "text-before-edge";
        type BaselineShift<TLength = (string & {}) | 0> = Globals | TLength | "baseline" | "sub" | "super" | (string & {});
        type ClipRule = Globals | "evenodd" | "nonzero";
        type ColorInterpolation = Globals | "auto" | "linearRGB" | "sRGB";
        type ColorRendering = Globals | "auto" | "optimizeQuality" | "optimizeSpeed";
        type DominantBaseline = Globals | "alphabetic" | "auto" | "central" | "hanging" | "ideographic" | "mathematical" | "middle" | "no-change" | "reset-size" | "text-after-edge" | "text-before-edge" | "use-script";
        type Fill = Globals | DataType.Paint;
        type FillOpacity = Globals | (number & {}) | (string & {});
        type FillRule = Globals | "evenodd" | "nonzero";
        type FloodColor = Globals | DataType.Color | "currentColor";
        type FloodOpacity = Globals | (number & {}) | (string & {});
        type GlyphOrientationVertical = Globals | "auto" | (string & {}) | (number & {});
        type LightingColor = Globals | DataType.Color | "currentColor";
        type Marker = Globals | "none" | (string & {});
        type MarkerEnd = Globals | "none" | (string & {});
        type MarkerMid = Globals | "none" | (string & {});
        type MarkerStart = Globals | "none" | (string & {});
        type ShapeRendering = Globals | "auto" | "crispEdges" | "geometricPrecision" | "optimizeSpeed";
        type StopColor = Globals | DataType.Color | "currentColor";
        type StopOpacity = Globals | (number & {}) | (string & {});
        type Stroke = Globals | DataType.Paint;
        type StrokeDasharray<TLength = (string & {}) | 0> = Globals | DataType.Dasharray<TLength> | "none";
        type StrokeDashoffset<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type StrokeLinecap = Globals | "butt" | "round" | "square";
        type StrokeLinejoin = Globals | "bevel" | "miter" | "round";
        type StrokeMiterlimit = Globals | (number & {}) | (string & {});
        type StrokeOpacity = Globals | (number & {}) | (string & {});
        type StrokeWidth<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
        type TextAnchor = Globals | "end" | "middle" | "start";
        type VectorEffect = Globals | "non-scaling-stroke" | "none";
    }
    export namespace AtRule {
        export interface CounterStyle<TLength = (string & {}) | 0, TTime = string & {}> {
            additiveSymbols?: string | undefined;
            fallback?: string | undefined;
            negative?: string | undefined;
            pad?: string | undefined;
            prefix?: string | undefined;
            range?: Range | undefined;
            speakAs?: SpeakAs | undefined;
            suffix?: string | undefined;
            symbols?: string | undefined;
            system?: System | undefined;
        }
        export interface CounterStyleHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
            "additive-symbols"?: string | undefined;
            fallback?: string | undefined;
            negative?: string | undefined;
            pad?: string | undefined;
            prefix?: string | undefined;
            range?: Range | undefined;
            "speak-as"?: SpeakAs | undefined;
            suffix?: string | undefined;
            symbols?: string | undefined;
            system?: System | undefined;
        }
        export type CounterStyleFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyle<TLength, TTime>>;
        export type CounterStyleHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyleHyphen<TLength, TTime>>;
        export interface FontFace<TLength = (string & {}) | 0, TTime = string & {}> {
            MozFontFeatureSettings?: FontFeatureSettings | undefined;
            ascentOverride?: AscentOverride | undefined;
            descentOverride?: DescentOverride | undefined;
            fontDisplay?: FontDisplay | undefined;
            fontFamily?: string | undefined;
            fontFeatureSettings?: FontFeatureSettings | undefined;
            fontStretch?: FontStretch | undefined;
            fontStyle?: FontStyle | undefined;
            fontVariant?: FontVariant | undefined;
            fontVariationSettings?: FontVariationSettings | undefined;
            fontWeight?: FontWeight | undefined;
            lineGapOverride?: LineGapOverride | undefined;
            sizeAdjust?: string | undefined;
            src?: string | undefined;
            unicodeRange?: string | undefined;
        }
        export interface FontFaceHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
            "-moz-font-feature-settings"?: FontFeatureSettings | undefined;
            "ascent-override"?: AscentOverride | undefined;
            "descent-override"?: DescentOverride | undefined;
            "font-display"?: FontDisplay | undefined;
            "font-family"?: string | undefined;
            "font-feature-settings"?: FontFeatureSettings | undefined;
            "font-stretch"?: FontStretch | undefined;
            "font-style"?: FontStyle | undefined;
            "font-variant"?: FontVariant | undefined;
            "font-variation-settings"?: FontVariationSettings | undefined;
            "font-weight"?: FontWeight | undefined;
            "line-gap-override"?: LineGapOverride | undefined;
            "size-adjust"?: string | undefined;
            src?: string | undefined;
            "unicode-range"?: string | undefined;
        }
        export type FontFaceFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFace<TLength, TTime>>;
        export type FontFaceHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFaceHyphen<TLength, TTime>>;
        export interface Page<TLength = (string & {}) | 0, TTime = string & {}> {
            bleed?: Bleed<TLength> | undefined;
            marks?: Marks | undefined;
            size?: Size<TLength> | undefined;
        }
        export interface PageHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
            bleed?: Bleed<TLength> | undefined;
            marks?: Marks | undefined;
            size?: Size<TLength> | undefined;
        }
        export type PageFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Page<TLength, TTime>>;
        export type PageHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PageHyphen<TLength, TTime>>;
        export interface Property<TLength = (string & {}) | 0, TTime = string & {}> {
            inherits?: Inherits | undefined;
            initialValue?: string | undefined;
            syntax?: string | undefined;
        }
        export interface PropertyHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
            inherits?: Inherits | undefined;
            "initial-value"?: string | undefined;
            syntax?: string | undefined;
        }
        export type PropertyFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Property<TLength, TTime>>;
        export type PropertyHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PropertyHyphen<TLength, TTime>>;
        export interface Viewport<TLength = (string & {}) | 0, TTime = string & {}> {
            height?: Height<TLength> | undefined;
            maxHeight?: MaxHeight<TLength> | undefined;
            maxWidth?: MaxWidth<TLength> | undefined;
            maxZoom?: MaxZoom | undefined;
            minHeight?: MinHeight<TLength> | undefined;
            minWidth?: MinWidth<TLength> | undefined;
            minZoom?: MinZoom | undefined;
            orientation?: Orientation | undefined;
            userZoom?: UserZoom | undefined;
            viewportFit?: ViewportFit | undefined;
            width?: Width<TLength> | undefined;
            zoom?: Zoom | undefined;
        }
        export interface ViewportHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
            height?: Height<TLength> | undefined;
            "max-height"?: MaxHeight<TLength> | undefined;
            "max-width"?: MaxWidth<TLength> | undefined;
            "max-zoom"?: MaxZoom | undefined;
            "min-height"?: MinHeight<TLength> | undefined;
            "min-width"?: MinWidth<TLength> | undefined;
            "min-zoom"?: MinZoom | undefined;
            orientation?: Orientation | undefined;
            "user-zoom"?: UserZoom | undefined;
            "viewport-fit"?: ViewportFit | undefined;
            width?: Width<TLength> | undefined;
            zoom?: Zoom | undefined;
        }
        export type ViewportFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Viewport<TLength, TTime>>;
        export type ViewportHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ViewportHyphen<TLength, TTime>>;
        type Range = "auto" | (string & {});
        type SpeakAs = "auto" | "bullets" | "numbers" | "spell-out" | "words" | (string & {});
        type System = "additive" | "alphabetic" | "cyclic" | "fixed" | "numeric" | "symbolic" | (string & {});
        type FontFeatureSettings = "normal" | (string & {});
        type AscentOverride = "normal" | (string & {});
        type DescentOverride = "normal" | (string & {});
        type FontDisplay = "auto" | "block" | "fallback" | "optional" | "swap";
        type FontStretch = DataType.FontStretchAbsolute | (string & {});
        type FontStyle = "italic" | "normal" | "oblique" | (string & {});
        type FontVariant = DataType.EastAsianVariantValues | "all-petite-caps" | "all-small-caps" | "common-ligatures" | "contextual" | "diagonal-fractions" | "discretionary-ligatures" | "full-width" | "historical-forms" | "historical-ligatures" | "lining-nums" | "no-common-ligatures" | "no-contextual" | "no-discretionary-ligatures" | "no-historical-ligatures" | "none" | "normal" | "oldstyle-nums" | "ordinal" | "petite-caps" | "proportional-nums" | "proportional-width" | "ruby" | "slashed-zero" | "small-caps" | "stacked-fractions" | "tabular-nums" | "titling-caps" | "unicase" | (string & {});
        type FontVariationSettings = "normal" | (string & {});
        type FontWeight = DataType.FontWeightAbsolute | (string & {});
        type LineGapOverride = "normal" | (string & {});
        type Bleed<TLength> = TLength | "auto";
        type Marks = "crop" | "cross" | "none" | (string & {});
        type Size<TLength> = DataType.PageSize | TLength | "auto" | "landscape" | "portrait" | (string & {});
        type Inherits = "false" | "true";
        type Height<TLength> = DataType.ViewportLength<TLength> | (string & {});
        type MaxHeight<TLength> = DataType.ViewportLength<TLength>;
        type MaxWidth<TLength> = DataType.ViewportLength<TLength>;
        type MaxZoom = "auto" | (string & {}) | (number & {});
        type MinHeight<TLength> = DataType.ViewportLength<TLength>;
        type MinWidth<TLength> = DataType.ViewportLength<TLength>;
        type MinZoom = "auto" | (string & {}) | (number & {});
        type Orientation = "auto" | "landscape" | "portrait";
        type UserZoom = "fixed" | "zoom";
        type ViewportFit = "auto" | "contain" | "cover";
        type Width<TLength> = DataType.ViewportLength<TLength> | (string & {});
        type Zoom = "auto" | (string & {}) | (number & {});
        export {};
    }
    namespace DataType {
        type AbsoluteSize = "large" | "medium" | "small" | "x-large" | "x-small" | "xx-large" | "xx-small" | "xxx-large";
        type AnimateableFeature = "contents" | "scroll-position" | (string & {});
        type Attachment = "fixed" | "local" | "scroll";
        type BgPosition<TLength> = TLength | "bottom" | "center" | "left" | "right" | "top" | (string & {});
        type BgSize<TLength> = TLength | "auto" | "contain" | "cover" | (string & {});
        type BlendMode = "color" | "color-burn" | "color-dodge" | "darken" | "difference" | "exclusion" | "hard-light" | "hue" | "lighten" | "luminosity" | "multiply" | "normal" | "overlay" | "saturation" | "screen" | "soft-light";
        type Box = "border-box" | "content-box" | "padding-box";
        type Color = NamedColor | DeprecatedSystemColor | "currentcolor" | (string & {});
        type CompatAuto = "button" | "checkbox" | "listbox" | "menulist" | "meter" | "progress-bar" | "push-button" | "radio" | "searchfield" | "slider-horizontal" | "square-button" | "textarea";
        type CompositeStyle = "clear" | "copy" | "destination-atop" | "destination-in" | "destination-out" | "destination-over" | "source-atop" | "source-in" | "source-out" | "source-over" | "xor";
        type CompositingOperator = "add" | "exclude" | "intersect" | "subtract";
        type ContentDistribution = "space-around" | "space-between" | "space-evenly" | "stretch";
        type ContentList = Quote | "contents" | (string & {});
        type ContentPosition = "center" | "end" | "flex-end" | "flex-start" | "start";
        type CubicBezierTimingFunction = "ease" | "ease-in" | "ease-in-out" | "ease-out" | (string & {});
        type Dasharray<TLength> = TLength | (string & {}) | (number & {});
        type DeprecatedSystemColor = "ActiveBorder" | "ActiveCaption" | "AppWorkspace" | "Background" | "ButtonFace" | "ButtonHighlight" | "ButtonShadow" | "ButtonText" | "CaptionText" | "GrayText" | "Highlight" | "HighlightText" | "InactiveBorder" | "InactiveCaption" | "InactiveCaptionText" | "InfoBackground" | "InfoText" | "Menu" | "MenuText" | "Scrollbar" | "ThreeDDarkShadow" | "ThreeDFace" | "ThreeDHighlight" | "ThreeDLightShadow" | "ThreeDShadow" | "Window" | "WindowFrame" | "WindowText";
        type DisplayInside = "-ms-flexbox" | "-ms-grid" | "-webkit-flex" | "flex" | "flow" | "flow-root" | "grid" | "ruby" | "table";
        type DisplayInternal = "ruby-base" | "ruby-base-container" | "ruby-text" | "ruby-text-container" | "table-caption" | "table-cell" | "table-column" | "table-column-group" | "table-footer-group" | "table-header-group" | "table-row" | "table-row-group";
        type DisplayLegacy = "-ms-inline-flexbox" | "-ms-inline-grid" | "-webkit-inline-flex" | "inline-block" | "inline-flex" | "inline-grid" | "inline-list-item" | "inline-table";
        type DisplayOutside = "block" | "inline" | "run-in";
        type EasingFunction = CubicBezierTimingFunction | StepTimingFunction | "linear";
        type EastAsianVariantValues = "jis04" | "jis78" | "jis83" | "jis90" | "simplified" | "traditional";
        type FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | "none" | (string & {});
        type FontStretchAbsolute = "condensed" | "expanded" | "extra-condensed" | "extra-expanded" | "normal" | "semi-condensed" | "semi-expanded" | "ultra-condensed" | "ultra-expanded" | (string & {});
        type FontWeightAbsolute = "bold" | "normal" | (number & {}) | (string & {});
        type GenericFamily = "cursive" | "fantasy" | "monospace" | "sans-serif" | "serif";
        type GeometryBox = Box | "fill-box" | "margin-box" | "stroke-box" | "view-box";
        type GridLine = "auto" | (string & {}) | (number & {});
        type LineStyle = "dashed" | "dotted" | "double" | "groove" | "hidden" | "inset" | "none" | "outset" | "ridge" | "solid";
        type LineWidth<TLength> = TLength | "medium" | "thick" | "thin";
        type MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | "no-clip" | "none" | (string & {});
        type MaskingMode = "alpha" | "luminance" | "match-source";
        type NamedColor = "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "transparent" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen";
        type PageSize = "A3" | "A4" | "A5" | "B4" | "B5" | "JIS-B4" | "JIS-B5" | "ledger" | "legal" | "letter";
        type Paint = Color | "child" | "context-fill" | "context-stroke" | "none" | (string & {});
        type Position<TLength> = TLength | "bottom" | "center" | "left" | "right" | "top" | (string & {});
        type Quote = "close-quote" | "no-close-quote" | "no-open-quote" | "open-quote";
        type RepeatStyle = "no-repeat" | "repeat" | "repeat-x" | "repeat-y" | "round" | "space" | (string & {});
        type SelfPosition = "center" | "end" | "flex-end" | "flex-start" | "self-end" | "self-start" | "start";
        type SingleAnimation<TTime> = EasingFunction | SingleAnimationDirection | SingleAnimationFillMode | TTime | "infinite" | "none" | "paused" | "running" | (string & {}) | (number & {});
        type SingleAnimationDirection = "alternate" | "alternate-reverse" | "normal" | "reverse";
        type SingleAnimationFillMode = "backwards" | "both" | "forwards" | "none";
        type SingleTransition<TTime> = EasingFunction | TTime | "all" | "none" | (string & {});
        type StepTimingFunction = "step-end" | "step-start" | (string & {});
        type TrackBreadth<TLength> = TLength | "auto" | "max-content" | "min-content" | (string & {});
        type ViewportLength<TLength> = TLength | "auto" | (string & {});
        type VisualBox = "border-box" | "content-box" | "padding-box";
    }
}
/// <amd-module name="@ijstech/style/types.ts" />
declare module "@ijstech/style/types.ts" {
    import * as CSS from "@ijstech/style/csstype.ts";
    export type TLength = number | string;
    export interface CSSProperties extends CSS.StandardPropertiesFallback<TLength>, CSS.SvgPropertiesFallback<TLength>, CSS.VendorPropertiesHyphenFallback<TLength>, CSS.ObsoletePropertiesFallback<TLength> {
        /**
         * Typestyle configuration options
         **/
        /**
         * The generated CSS selector gets its own unique location in the generated CSS (disables deduping).
         * So instead of `.classA,.classB{same properties}`
         * you get `.classA {same properties} .classB {same properties}`
         * This is needed for certain browser edge cases like placeholder styling
         **/
        $unique?: boolean;
    }
    export interface FontFace extends CSS.AtRule.FontFace {
    }
    export type CSSClasses<K extends string> = Record<K, NestedCSSProperties>;
    export type CSSClassNames<K extends string> = Record<K, string>;
    export interface NestedCSSProperties extends CSSProperties {
        $nest?: NestedCSSSelectors;
        /**
         * A debug only (stripped in process.env.NODE_ENV !== 'production') name
         * Helps you figure out where the class is coming from if you care
         **/
        $debugName?: string;
    }
    export type MediaQuery = {
        type?: 'screen' | 'print' | 'all';
        orientation?: 'landscape' | 'portrait';
        minWidth?: number | string;
        maxWidth?: number | string;
        minHeight?: number | string;
        maxHeight?: number | string;
    };
    export type NestedCSSSelectors = {
        /** State selector */
        '&:active'?: NestedCSSProperties;
        '&:any'?: NestedCSSProperties;
        '&:checked'?: NestedCSSProperties;
        '&:default'?: NestedCSSProperties;
        '&:disabled'?: NestedCSSProperties;
        '&:empty'?: NestedCSSProperties;
        '&:enabled'?: NestedCSSProperties;
        '&:first'?: NestedCSSProperties;
        '&:first-child'?: NestedCSSProperties;
        '&:first-of-type'?: NestedCSSProperties;
        '&:fullscreen'?: NestedCSSProperties;
        '&:focus'?: NestedCSSProperties;
        '&:hover'?: NestedCSSProperties;
        '&:indeterminate'?: NestedCSSProperties;
        '&:in-range'?: NestedCSSProperties;
        '&:invalid'?: NestedCSSProperties;
        '&:last-child'?: NestedCSSProperties;
        '&:last-of-type'?: NestedCSSProperties;
        '&:left'?: NestedCSSProperties;
        '&:link'?: NestedCSSProperties;
        '&:only-child'?: NestedCSSProperties;
        '&:only-of-type'?: NestedCSSProperties;
        '&:optional'?: NestedCSSProperties;
        '&:out-of-range'?: NestedCSSProperties;
        '&:read-only'?: NestedCSSProperties;
        '&:read-write'?: NestedCSSProperties;
        '&:required'?: NestedCSSProperties;
        '&:right'?: NestedCSSProperties;
        '&:root'?: NestedCSSProperties;
        '&:scope'?: NestedCSSProperties;
        '&:target'?: NestedCSSProperties;
        '&:valid'?: NestedCSSProperties;
        '&:visited'?: NestedCSSProperties;
        /**
         * Pseudo-elements
         * https://developer.mozilla.org/en/docs/Web/CSS/Pseudo-elements
         */
        '&::after'?: NestedCSSProperties;
        '&::before'?: NestedCSSProperties;
        '&::first-letter'?: NestedCSSProperties;
        '&::first-line'?: NestedCSSProperties;
        '&::selection'?: NestedCSSProperties;
        '&::backdrop'?: NestedCSSProperties;
        '&::placeholder'?: NestedCSSProperties;
        '&::marker'?: NestedCSSProperties;
        '&::spelling-error'?: NestedCSSProperties;
        '&::grammar-error'?: NestedCSSProperties;
        /** Children */
        '&>*'?: NestedCSSProperties;
        /**
         * Mobile first media query example
         **/
        '@media screen and (min-width: 700px)'?: NestedCSSProperties;
        /**
         * Desktop first media query example
         **/
        '@media screen and (max-width: 700px)'?: NestedCSSProperties;
        /**
         * Also cater for any other nested query you want
         */
        [selector: string]: NestedCSSProperties | undefined;
    };
    /**
     * For animation keyframe definition
     */
    export interface KeyFrames {
        $debugName?: string;
        [
            /** stuff like `from`, `to` or `10%` etc*/
            key: string]: CSSProperties | string | undefined;
    }
}
/// <amd-module name="@ijstech/style/formatting.ts" />
declare module "@ijstech/style/formatting.ts" {
    import * as types from "@ijstech/style/types.ts";
    import { Styles } from "@ijstech/style/styles.ts";
    /**
     * We need to do the following to *our* objects before passing to freestyle:
     * - For any `$nest` directive move up to FreeStyle style nesting
     * - For any `$unique` directive map to FreeStyle Unique
     * - For any `$debugName` directive return the debug name
     */
    export function convertToStyles(object: types.NestedCSSProperties): Styles;
    export function convertToKeyframes(frames: types.KeyFrames): Styles;
}
/// <amd-module name="@ijstech/style/utilities.ts" />
declare module "@ijstech/style/utilities.ts" {
    import { MediaQuery, NestedCSSProperties } from "@ijstech/style/types.ts";
    /** Raf for node + browser */
    export const raf: (cb: () => void) => void;
    /**
     * Utility to join classes conditionally
     */
    export function classes(...classes: (string | false | undefined | null | {
        [className: string]: any;
    })[]): string;
    /**
     * Merges various styles into a single style object.
     * Note: if two objects have the same property the last one wins
     */
    export function extend(...objects: (NestedCSSProperties | undefined | null | false)[]): NestedCSSProperties;
    /**
     * Utility to help customize styles with media queries. e.g.
     * ```
     * style(
     *  media({maxWidth:500}, {color:'red'})
     * )
     * ```
     */
    export const media: (mediaQuery: MediaQuery, ...objects: (NestedCSSProperties | undefined | null | false)[]) => NestedCSSProperties;
}
/// <amd-module name="@ijstech/style/typestyle.ts" />
declare module "@ijstech/style/typestyle.ts" {
    import * as types from "@ijstech/style/types.ts";
    export type StylesTarget = {
        textContent: string | null;
    };
    /**
     * Maintains a single stylesheet and keeps it in sync with requested styles
     */
    export class TypeStyle {
        private _autoGenerateTag;
        private _freeStyle;
        private _pending;
        private _pendingRawChange;
        private _raw;
        private _tag?;
        /**
         * We have a single stylesheet that we update as components register themselves
         */
        private _lastFreeStyleChangeId;
        constructor({ autoGenerateTag }: {
            autoGenerateTag: boolean;
        });
        /**
         * Only calls cb all sync operations settle
         */
        private _afterAllSync;
        private _getTag;
        /** Checks if the style tag needs updating and if so queues up the change */
        private _styleUpdated;
        /**
         * Insert `raw` CSS as a string. This is useful for e.g.
         * - third party CSS that you are customizing with template strings
         * - generating raw CSS in JavaScript
         * - reset libraries like normalize.css that you can use without loaders
         */
        cssRaw: (mustBeValidCSS: string) => void;
        /**
         * Takes CSSProperties and registers it to a global selector (body, html, etc.)
         */
        cssRule: (selector: string, ...objects: types.NestedCSSProperties[]) => void;
        /**
         * Renders styles to the singleton tag imediately
         * NOTE: You should only call it on initial render to prevent any non CSS flash.
         * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.
         **/
        forceRenderStyles: () => void;
        /**
         * Utility function to register an @font-face
         */
        fontFace: (...fontFace: types.FontFace[]) => void;
        /**
         * Allows use to use the stylesheet in a node.js environment
         */
        getStyles: () => string;
        /**
         * Takes keyframes and returns a generated animationName
         */
        keyframes: (frames: types.KeyFrames) => string;
        /**
         * Helps with testing. Reinitializes FreeStyle + raw
         */
        reinit: () => void;
        /** Sets the target tag where we write the css on style updates */
        setStylesTarget: (tag: StylesTarget) => void;
        /**
         * Takes CSSProperties and return a generated className you can use on your component
         */
        style(...objects: (types.NestedCSSProperties | undefined)[]): string;
        style(...objects: (types.NestedCSSProperties | null | false | undefined)[]): string;
        /**
         * Takes an object where property names are ideal class names and property values are CSSProperties, and
         * returns an object where property names are the same ideal class names and the property values are
         * the actual generated class names using the ideal class name as the $debugName
         */
        stylesheet: <Classes extends string>(classes: types.CSSClasses<Classes>) => { [ClassName in Classes]: string; };
    }
    export const typeStyle: TypeStyle;
}
/// <amd-module name="@ijstech/style" />
declare module "@ijstech/style" {
    export * as Theme from "@ijstech/style/theme.ts";
    export { Colors } from "@ijstech/style/colors.ts";
    /**
     * All the CSS types in the 'types' namespace
     */
    /**
     * Export certain utilities
     */
    /** Sets the target tag where we write the css on style updates */
    /**
     * Insert `raw` CSS as a string. This is useful for e.g.
     * - third party CSS that you are customizing with template strings
     * - generating raw CSS in JavaScript
     * - reset libraries like normalize.css that you can use without loaders
     */
    export const cssRaw: (mustBeValidCSS: string) => void;
    /**
     * Takes CSSProperties and registers it to a global selector (body, html, etc.)
     */
    export const cssRule: (selector: string, ...objects: import("@ijstech/style/types.ts").NestedCSSProperties[]) => void;
    /**
     * Renders styles to the singleton tag imediately
     * NOTE: You should only call it on initial render to prevent any non CSS flash.
     * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.
     **/
    /**
     * Utility function to register an @font-face
     */
    export const fontFace: (...fontFace: import("@ijstech/style/types.ts").FontFace[]) => void;
    export function rotate(degree: number): string;
    /**
     * Allows use to use the stylesheet in a node.js environment
     */
    /**
     * Takes keyframes and returns a generated animationName
     */
    export const keyframes: (frames: import("@ijstech/style/types.ts").KeyFrames) => string;
    /**
     * Helps with testing. Reinitializes FreeStyle + raw
     */
    /**
     * Takes CSSProperties and return a generated className you can use on your component
     */
    export const style: {
        (...objects: import("@ijstech/style/types.ts").NestedCSSProperties[]): string;
        (...objects: (false | import("@ijstech/style/types.ts").NestedCSSProperties)[]): string;
    };
}
/// <amd-module name="@ijstech/base/observable.ts" />
declare module "@ijstech/base/observable.ts" {
    export function isObservable(input: any): boolean;
    export interface ObserverOptions {
        path?: string;
        pathsOf?: string;
        pathFrom?: string;
    }
    export interface ObserverChange {
        type?: string;
        path?: string[];
        value?: any;
        oldValue?: any;
        object?: any;
    }
    export type ObserverCallback = (changes: ObserverChange[]) => void;
    export function Observe(target: any, callback?: ObserverCallback, options?: ObserverOptions): any;
    export function Unobserve(target: any, observer: ObserverCallback): void;
    export function ClearObservers(target: any): void;
    export function observable(propName?: string, isArray?: boolean): (target: any, propertyName: string) => void;
    export function initObservables(target: any): void;
    export function Observables(target: any, propertyName?: string): any;
}
/// <amd-module name="@ijstech/base/types.ts" />
declare module "@ijstech/base/types.ts" {
    import { JSONSchema, GroupType, IModule } from '@ijstech/types';
    export interface IComponent {
        connectedCallback(): void;
        createElement(tagName: string, parentElm?: HTMLElement): HTMLElement;
        disconnectedCallback(): void;
        getAttribute(name: string, removeAfter?: boolean, defaultValue?: any): any;
        getPositionAttribute(name: string, removeAfter?: boolean, defaultValue?: any): number;
        getStyleAttribute(name: string, removeAfter?: boolean, defaultValue?: any): string;
        id: string;
        initialized: boolean;
        initializing: boolean;
        ready(): Promise<void>;
        uuid: string;
    }
    export type PositionType = 'static' | 'relative' | 'absolute' | 'fixed' | 'sticky' | 'inherit' | 'initial';
    export type BorderStylesSideType = 'top' | 'right' | 'bottom' | 'left';
    export type BorderStyleType = 'none' | 'hidden' | 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset';
    export interface IBorderCornerStyles {
        radius?: string | number;
    }
    export interface IBorderSideStyles {
        width?: string | number;
        style?: BorderStyleType;
        color?: string;
    }
    export interface IBorder extends IBorderSideStyles, IBorderCornerStyles {
        top?: IBorderSideStyles;
        right?: IBorderSideStyles;
        bottom?: IBorderSideStyles;
        left?: IBorderSideStyles;
    }
    export interface IAnchor {
        top?: boolean;
        right?: boolean;
        bottom?: boolean;
        left?: boolean;
    }
    export interface IBackground {
        color?: string;
        image?: string;
    }
    export interface IFont {
        name?: string;
        size?: string;
        color?: string;
        bold?: boolean;
        style?: FontStyle;
        transform?: TextTransform;
        weight?: number | string;
        shadow?: string;
    }
    export interface ISpace {
        top?: string | number;
        right?: string | number;
        bottom?: string | number;
        left?: string | number;
    }
    export type BorderSides = 'top' | 'right' | 'bottom' | 'left';
    export interface IStack {
        basis?: string;
        grow?: string;
        shrink?: string;
    }
    export type FontStyle = 'normal' | 'italic' | 'oblique' | 'initial' | 'inherit';
    export type TextTransform = 'capitalize' | 'uppercase' | 'lowercase' | 'full-width' | 'full-size-kana' | 'inherit' | 'initial' | 'revert' | 'revert-layer' | 'unset';
    export type WrapType = 'nowrap' | 'wrap' | 'wrap-reverse' | 'initial' | 'inherit';
    export type OverflowType = 'visible' | 'hidden' | 'clip' | 'scroll' | 'auto' | 'initial' | 'inherit' | 'unset';
    export type CursorType = "auto" | "default" | "none" | "context-menu" | "help" | "pointer" | "progress" | "wait" | "cell" | "crosshair" | "text" | "vertical-text" | "alias" | "copy" | "move" | "no-drop" | "not-allowed" | "grab" | "grabbing" | "e-resize" | "n-resize" | "ne-resize" | "nw-resize" | "s-resize" | "se-resize" | "sw-resize" | "w-resize" | "ew-resize" | "ns-resize" | "nesw-resize" | "nwse-resize" | "col-resize" | "row-resize" | "all-scroll" | "zoom-in" | "zoom-out";
    export interface IOverflow {
        x?: OverflowType;
        y?: OverflowType;
    }
    export const enum ComponentPropertyType {
        string = 1,
        number = 2,
        boolean = 3,
        object = 4,
        array = 5,
        event = 6
    }
    export const notifyEventParams: ICustomEventParam[];
    export const ComponentProperty: ICustomProperties;
    export type DockStyle = '' | 'none' | 'bottom' | 'center' | 'fill' | 'left' | 'right' | 'top';
    export type LineHeightType = string | number | 'normal' | 'initial' | 'inherit';
    export type DisplayType = 'inline-block' | 'block' | 'inline-flex' | 'flex' | 'inline' | 'initial' | 'inherit' | 'none' | '-webkit-box' | 'grid' | 'inline-grid';
    export interface IMediaQuery<T> {
        minWidth?: string | number;
        maxWidth?: string | number;
        properties: T;
    }
    export interface IGrid {
        column?: number;
        columnSpan?: number;
        row?: number;
        rowSpan?: number;
        horizontalAlignment?: "stretch" | "start" | "end" | "center";
        verticalAlignment?: "stretch" | "start" | "end" | "center";
        area?: string;
    }
    export interface IControlMediaQueryProps {
        padding?: ISpace;
        margin?: ISpace;
        border?: IBorder;
        visible?: boolean;
        display?: DisplayType;
        background?: IBackground;
        grid?: IGrid;
        position?: PositionType;
        top?: number | string;
        left?: number | string;
        right?: number | string;
        bottom?: number | string;
        zIndex?: string | number;
        maxHeight?: string | number;
        maxWidth?: string | number;
        width?: number | string;
        height?: number | string;
        minWidth?: number | string;
        minHeight?: number | string;
        overflow?: IOverflow | OverflowType;
        font?: IFont;
        opacity?: string;
        stack?: IStack;
    }
    export type IControlMediaQuery = IMediaQuery<IControlMediaQueryProps>;
    export interface IControl extends IComponent {
        _container?: HTMLElement;
        _getCustomProperties(): ICustomProperties;
        _setDesignPropValue(prop: string, value: string | number | boolean | object, breakpointProp?: any): void;
        anchor: IAnchor;
        background: IBackground;
        border: IBorder;
        boxShadow: string;
        contextMenu: IControl | null;
        cursor: CursorType;
        designMode: boolean;
        display: DisplayType;
        dock: DockStyle;
        font: IFont;
        grid: IGrid;
        letterSpacing: string | number;
        lineHeight: LineHeightType;
        linkTo: IControl;
        margin: ISpace;
        mediaQueries: IControlMediaQuery[];
        opacity: string;
        overflow: IOverflow;
        padding: ISpace;
        parent: IControl | undefined;
        parentModule: IModule | null;
        stack: IStack;
        tag: any;
        zIndex: string;
    }
    export interface ICustomProp {
        type: 'string' | 'number' | 'boolean' | 'object' | 'array';
        values?: any[];
        default?: string | number | boolean | object;
    }
    export interface ICustomEventParam {
        name: string;
        type: string;
        isControl?: boolean;
    }
    export interface ICustomProperties {
        icon?: string;
        tagName?: string;
        className?: string;
        props: {
            [name: string]: ICustomProp;
        };
        events: {
            [name: string]: ICustomEventParam[];
        };
        dataSchema?: JSONSchema.IDataSchema;
        group?: GroupType;
    }
    export interface INumberDictionary<TValue> {
        [id: number]: TValue;
    }
    export type Color = string;
}
/// <amd-module name="@ijstech/base/utils.ts" />
declare module "@ijstech/base/utils.ts" {
    import { ICustomProperties } from "@ijstech/base/types.ts";
    export class IdUtils {
        static generateUUID(length?: number): string;
    }
    export function getCustomElements(): {
        [name: string]: ICustomProperties;
    };
    export function customElements(tagName: string, properties?: ICustomProperties): (constructor: CustomElementConstructor) => void;
    export function getCustomElementProperties(name: string): ICustomProperties | undefined;
}
/// <amd-module name="@ijstech/base/component.ts" />
declare module "@ijstech/base/component.ts" {
    import { IComponent } from "@ijstech/base/types.ts";
    export class Component extends HTMLElement implements IComponent {
        protected connected: boolean;
        protected _parent: Component | undefined;
        protected _height: number | string;
        protected _top: number | string;
        protected _width: number | string;
        protected _left: number | string;
        protected _bottom: number | string;
        protected options: any;
        protected defaults: any;
        protected deferReadyCallback: boolean;
        protected _readyCallback: any[];
        initializing: boolean;
        initialized: boolean;
        protected attrs: any;
        protected _designProps: {
            [prop: string]: string | number | boolean | object;
        };
        private _propInfo;
        protected _uuid: string;
        constructor(parent?: Component, options?: any, defaults?: any);
        connectedCallback(): void;
        disconnectedCallback(): void;
        protected parseDesignPropValue(value: string): any;
        _getDesignPropValue(prop: string): string | number | boolean | object | any[];
        _setDesignPropValue(prop: string, value: string | number | boolean | object, breakpointProp?: any): void;
        _setDesignProps(props: {
            [prop: string]: string;
        }, breakpoint?: {
            [prop: string]: string;
        }): void;
        _getDesignProps(): {
            [prop: string]: string | number | boolean | object;
        };
        createElement(tagName: string, parentElm?: HTMLElement): HTMLElement;
        getAttributeValue(target: any, paths: string[], idx?: number): any;
        getAttribute(name: string, removeAfter?: boolean, defaultValue?: any): any;
        getPositionAttribute(name: string, removeAfter?: boolean, defaultValue?: any): number;
        getStyleAttribute(name: string, removeAfter?: boolean, defaultValue?: any): string;
        get uuid(): string;
        get id(): string;
        set id(value: string);
        ready(): Promise<void>;
        protected executeReadyCallback(): void;
        protected init(): void;
    }
}
/// <amd-module name="@ijstech/base/style/base.css.ts" />
declare module "@ijstech/base/style/base.css.ts" {
    import { BorderStylesSideType, IBorder, IBorderSideStyles, IOverflow, IBackground, IControlMediaQuery, DisplayType, IMediaQuery } from "@ijstech/base";
    export const disabledStyle: string;
    export const containerStyle: string;
    export const getBorderSideObj: (side: BorderStylesSideType, value: IBorderSideStyles) => any;
    export const getBorderSideStyleClass: (side: BorderStylesSideType, value: IBorderSideStyles) => string;
    export const getBorderStyleClass: (value: IBorder) => string;
    export const getOverflowStyleClass: (value: IOverflow) => string;
    export const getBackground: (value: IBackground) => {
        background: string;
    };
    export const getBackgroundStyleClass: (value: IBackground) => string;
    export const getSpacingValue: (value: string | number) => string;
    export const getMediaQueryRule: (mediaQuery: IMediaQuery<any>) => any;
    interface IProps {
        display?: DisplayType;
    }
    export const getControlMediaQueriesStyle: (mediaQueries: IControlMediaQuery[], props?: IProps) => any;
    export const getControlMediaQueriesStyleClass: (mediaQueries: IControlMediaQuery[], props: IProps) => string;
    export const getOpacityStyleClass: (opacity: number | string) => string;
}
/// <amd-module name="@ijstech/base/i18n.ts" />
declare module "@ijstech/base/i18n.ts" {
    import { I18nInterface, Translations } from "@ijstech/types";
    export class I18n implements I18nInterface {
        private translations;
        /**
         * Initializes the translations for the application.
         *
         * @param translations - An object containing translation key-value pairs.
         */
        init(translations: Translations): void;
        /**
         * Retrieves a localized string based on the provided key and optional parameters.
         *
         * @param key - The key for the localized string.
         * @param params - An optional object containing key-value pairs to replace placeholders in the localized string.
         * @param skipApp - An optional boolean to skip checking the application's i18n for the key. Defaults to false.
         * @returns The localized string with placeholders replaced by the provided parameters, if any.
         */
        get(key: string, params?: {
            [key: string]: string;
        }, skipApp?: boolean): string;
        /**
         * Checks if a given translation key exists in the current locale's translations.
         *
         * @param key - The translation key to check.
         * @returns `true` if the translation key exists in the current locale's translations, otherwise `false`.
         */
        has(key: string): boolean;
    }
}
/// <amd-module name="@ijstech/base/control.ts" />
declare module "@ijstech/base/control.ts" {
    import { Component } from "@ijstech/base/component.ts";
    import { IStack, IFont, ISpace, IOverflow, OverflowType, CursorType } from "@ijstech/base/types.ts";
    import { ICustomProperties, IAnchor, IBackground, IBorderSideStyles, BorderStyleType, IBorder, BorderStylesSideType } from "@ijstech/base/types.ts";
    import { IGrid, LineHeightType, DockStyle, DisplayType, IControlMediaQuery, PositionType } from "@ijstech/base/types.ts";
    import { I18n } from "@ijstech/base/i18n.ts";
    import { IModule } from '@ijstech/types';
    export type SpaceProps = 'margin' | 'padding';
    export class SpaceValue implements ISpace {
        private _value;
        private _prop;
        private _owner;
        constructor(owner: Control, value: ISpace, prop: SpaceProps);
        get left(): string | number;
        set left(value: string | number);
        get top(): string | number;
        set top(value: string | number);
        get right(): string | number;
        set right(value: string | number);
        get bottom(): string | number;
        set bottom(value: string | number);
        getSpacingValue(value: string | number): string;
        update(value?: ISpace): void;
    }
    export class Border {
        private _target;
        private _styleClassMap;
        private _radius;
        private _width;
        private _style;
        private _color;
        private _top;
        private _right;
        private _bottom;
        private _left;
        constructor(target: Control, options?: IBorder);
        updateValue(options: IBorder): void;
        private isNumber;
        protected updateAllSidesProps(options: IBorder): void;
        private removeStyles;
        get radius(): string;
        set radius(value: string | number);
        get width(): string;
        set width(value: string | number);
        get style(): BorderStyleType;
        set style(value: BorderStyleType);
        get color(): string;
        set color(value: string);
        get top(): Readonly<IBorderSideStyles>;
        set top(value: IBorderSideStyles);
        get right(): Readonly<IBorderSideStyles>;
        set right(value: IBorderSideStyles);
        get bottom(): Readonly<IBorderSideStyles>;
        set bottom(value: IBorderSideStyles);
        get left(): Readonly<IBorderSideStyles>;
        set left(value: IBorderSideStyles);
        protected removeStyleClass(name: string): void;
        protected setSideBorderStyles(side: BorderStylesSideType, value?: IBorderSideStyles): void;
        protected setBorderStyles(value: IBorder): void;
        private setBorderProp;
    }
    export class Overflow implements IOverflow {
        private _target;
        private _value;
        private _style;
        constructor(target: Control, value?: IOverflow | OverflowType);
        get x(): OverflowType;
        set x(value: OverflowType);
        get y(): OverflowType;
        set y(value: OverflowType);
        private updateValue;
        setOverflowStyle(value?: IOverflow | OverflowType): void;
    }
    export class Background implements IBackground {
        private _target;
        private _value;
        private _style;
        constructor(target: Control, value?: IBackground);
        get color(): string;
        set color(value: string);
        get image(): string;
        set image(value: string);
        private updateValue;
        setBackgroundStyle(value?: IBackground): void;
    }
    export const ControlProperties: ICustomProperties;
    export interface IContextMenu {
        show(pos: {
            x: number;
            y: number;
        }): void;
    }
    export type notifyEventCallback = (target: Control, event: Event) => void;
    export type notifyMouseEventCallback = (target: Control, event: MouseEvent) => void;
    export type notifyKeyboardEventCallback = (target: Control, event: KeyboardEvent) => void;
    export type notifyGestureEventCallback = (target: Control, event: PointerEvent | MouseEvent | TouchEvent) => void;
    export class Control extends Component {
        protected _controls: Control[];
        protected _parentModule: IModule | null;
        protected _enabled: boolean;
        protected _onClick: notifyMouseEventCallback;
        protected _onContextMenu: notifyMouseEventCallback;
        protected _onDblClick: notifyMouseEventCallback;
        protected _onFocus: notifyEventCallback;
        protected _onKeyDown: notifyKeyboardEventCallback;
        protected _onKeyUp: notifyKeyboardEventCallback;
        protected _onMouseDown: notifyGestureEventCallback;
        protected _onMouseMove: notifyGestureEventCallback;
        protected _onMouseUp: notifyGestureEventCallback;
        protected _onObserverChanged: (target: Control, event?: Event) => void;
        protected _visible: boolean;
        protected _margin: SpaceValue;
        protected _padding: SpaceValue;
        protected _stack: IStack;
        protected _grid: IGrid;
        protected _lineHeight: LineHeightType;
        protected _parent: Control | undefined;
        protected _dock: DockStyle;
        protected _linkTo: Control;
        protected _border: Border;
        protected _overflow: Overflow;
        protected _anchor: IAnchor;
        protected _background: Background;
        protected _resizer: ContainerResizer;
        private _tooltip;
        protected _font: IFont;
        protected _display: DisplayType;
        protected _cursor: CursorType;
        protected _letterSpacing: string | number;
        protected _boxShadow: string;
        private _cmediaQueries;
        protected _mediaStyle: string;
        protected _contextMenuId: string | null;
        protected _contextMenuControl: Control | null;
        private _opacity;
        protected _zIndex: string;
        protected _designMode: boolean;
        protected propertyClassMap: Record<string, string>;
        _container?: HTMLElement;
        tag: any;
        protected static create(options?: any, parent?: Container, defaults?: any): Promise<Control>;
        constructor(parent?: Control, options?: any, defaults?: any);
        get parentModule(): IModule | null;
        _setDesignPropValue(prop: string, value: string | number | boolean | object, breakpointProp?: any): void;
        _getCustomProperties(): ICustomProperties;
        private getMarginStyle;
        private getPaddingStyle;
        protected xssSanitize(value: string): string;
        get contextMenu(): Control | null;
        set contextMenu(value: string | Control | null);
        get margin(): ISpace;
        set margin(value: ISpace);
        protected get marginStyle(): (side: BorderStylesSideType) => number;
        get padding(): ISpace;
        set padding(value: ISpace);
        protected get paddingStyle(): (side: BorderStylesSideType) => number;
        protected addChildControl(control: Control): void;
        protected removeChildControl(control: Control): void;
        get parent(): Control | undefined;
        set parent(value: Control | undefined);
        connectedCallback(): void;
        disconnectedCallback(): void;
        protected getParentHeight(): number;
        protected getParentWidth(): number;
        protected getParentOccupiedLeft(): number;
        protected getParentOccupiedRight(): number;
        protected getParentOccupiedBottom(): number;
        protected getParentOccupiedTop(): number;
        get dock(): DockStyle;
        set dock(value: DockStyle);
        get enabled(): boolean;
        set enabled(value: boolean);
        protected _handleClick(event: MouseEvent, stopPropagation?: boolean): boolean;
        protected _handleContextMenu(event: MouseEvent, stopPropagation?: boolean): boolean;
        protected _handleDblClick(event: MouseEvent, stopPropagation?: boolean): boolean;
        protected _handleFocus(event: Event, stopPropagation?: boolean): boolean;
        protected _handleKeyDown(event: KeyboardEvent, stopPropagation?: boolean): boolean | undefined;
        protected _handleKeyUp(event: KeyboardEvent, stopPropagation?: boolean): boolean | undefined;
        protected _handleMouseDown(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;
        protected _handleMouseMove(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;
        protected _handleMouseUp(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean | undefined;
        get maxWidth(): number | string;
        set maxWidth(value: number | string);
        get minWidth(): string | number;
        set minWidth(value: string | number);
        get designMode(): boolean;
        set designMode(value: boolean);
        observables(propName: string): any;
        get onClick(): notifyMouseEventCallback;
        set onClick(callback: notifyMouseEventCallback);
        get onContextMenu(): notifyMouseEventCallback;
        set onContextMenu(callback: notifyMouseEventCallback);
        get onDblClick(): notifyMouseEventCallback;
        set onDblClick(callback: notifyMouseEventCallback);
        get onMouseDown(): notifyGestureEventCallback;
        set onMouseDown(callback: notifyGestureEventCallback);
        get onMouseUp(): notifyGestureEventCallback;
        set onMouseUp(callback: notifyGestureEventCallback);
        set onObserverChanged(callback: (target: Control, event?: Event) => void);
        get onObserverChanged(): (target: Control, event?: Event) => void;
        clearInnerHTML(): void;
        refresh(): void;
        get resizable(): boolean;
        protected setProperty(propName: string, value: any): void;
        protected setAttributeToProperty<P extends keyof Control>(propertyName: P): void;
        protected init(): void;
        protected setElementPosition(elm: HTMLElement, prop: any, value: any): void;
        protected setPosition(prop: any, value: any): void;
        get height(): number | string;
        set height(value: number | string);
        get heightValue(): number;
        get left(): number | string;
        set left(value: number | string);
        set right(value: number | string);
        set bottom(value: number | string);
        get top(): number | string;
        set top(value: number | string);
        get visible(): boolean;
        set visible(value: boolean);
        get width(): number | string;
        set width(value: number | string);
        get widthValue(): number;
        get stack(): IStack;
        set stack(value: IStack);
        get grid(): IGrid;
        set grid(value: IGrid);
        get background(): Background;
        set background(value: IBackground);
        get zIndex(): string;
        set zIndex(value: string | number);
        get lineHeight(): LineHeightType;
        set lineHeight(value: LineHeightType);
        get linkTo(): Control;
        set linkTo(value: Control);
        get position(): PositionType;
        set position(value: PositionType);
        get maxHeight(): string | number;
        set maxHeight(value: string | number);
        get minHeight(): string | number;
        set minHeight(value: string | number);
        get border(): Border;
        set border(value: IBorder);
        get overflow(): Overflow;
        set overflow(value: OverflowType | IOverflow);
        get tooltip(): any;
        get font(): IFont;
        set font(value: IFont);
        get display(): DisplayType;
        set display(value: DisplayType);
        get anchor(): IAnchor;
        set anchor(value: IAnchor);
        get opacity(): string;
        set opacity(value: number | string);
        get cursor(): CursorType;
        set cursor(value: CursorType);
        get letterSpacing(): string | number;
        set letterSpacing(value: string | number);
        get boxShadow(): string;
        set boxShadow(value: string);
        get mediaQueries(): IControlMediaQuery[];
        set mediaQueries(value: IControlMediaQuery[]);
        protected removeStyle<P extends keyof Control>(propertyName: P): void;
        protected setStyle<P extends keyof Control>(propertyName: P, value: string): void;
        updateLocale(i18n: I18n): void;
    }
    export class ContainerResizer {
        private target;
        private _resizer;
        private _mouseDownPos;
        private _origWidth;
        private _origHeight;
        private _mouseDownHandler;
        private _mouseUpHandler;
        private _mouseMoveHandler;
        constructor(target: Container);
        reset(): void;
        private handleMouseDown;
        private handleMouseMove;
        private handleMouseUp;
        private get resizer();
    }
    export class Container extends Control {
        get controls(): Control[];
        get resizer(): boolean;
        set resizer(value: boolean);
        protected init(): void;
        protected refreshControls(): void;
        refresh(skipRefreshControls?: boolean): void;
        updateLocale(i18n: I18n): void;
    }
}
/// <amd-module name="@ijstech/base/permissions.ts" />
declare module "@ijstech/base/permissions.ts" {
    export interface IPermissions {
        query: (name: string, descriptor?: PermissionDescriptor) => Promise<PermissionStatus | null>;
        request: (name: string) => Promise<any>;
    }
    export class Permissions implements IPermissions {
        constructor();
        query(name: string, descriptor?: PermissionDescriptor): Promise<PermissionStatus | null>;
        request(name: string): Promise<false | void | NotificationPermission | MediaStream>;
    }
}
/// <amd-module name="@ijstech/base" />
declare module "@ijstech/base" {
    export { Observe, Unobserve, ClearObservers, Observables, isObservable, observable } from "@ijstech/base/observable.ts";
    export { Component } from "@ijstech/base/component.ts";
    export { IFont, BorderSides, ISpace, IStack, FontStyle, IOverflow, OverflowType, IBackground, TextTransform } from "@ijstech/base/types.ts";
    export { Background, Border, SpaceValue, IContextMenu, Overflow } from "@ijstech/base/control.ts";
    export { IBorder, BorderStylesSideType, IBorderSideStyles, IMediaQuery, DisplayType, PositionType, IControlMediaQueryProps, IControlMediaQuery } from "@ijstech/base/types.ts";
    import { IFont, IStack, ISpace, IOverflow, OverflowType, IAnchor, IBackground, CursorType } from "@ijstech/base/types.ts";
    import { Control, Container, notifyMouseEventCallback } from "@ijstech/base/control.ts";
    import { DockStyle, LineHeightType, IBorder, IGrid, DisplayType, PositionType, IControlMediaQuery } from "@ijstech/base/types.ts";
    import { ITooltip } from '@ijstech/types';
    export { notifyEventCallback, notifyMouseEventCallback, notifyKeyboardEventCallback, notifyGestureEventCallback } from "@ijstech/base/control.ts";
    export { I18n } from "@ijstech/base/i18n.ts";
    export { Control, Container };
    export * as Types from "@ijstech/base/types.ts";
    export { getControlMediaQueriesStyle, getBackground, getSpacingValue, getMediaQueryRule } from "@ijstech/base/style/base.css.ts";
    export { IdUtils, customElements, getCustomElements } from "@ijstech/base/utils.ts";
    export { Permissions } from "@ijstech/base/permissions.ts";
    let LibPath: string;
    export { LibPath };
    export const RequireJS: {
        config(config: any): void;
        require(reqs: string[], callback: any): void;
        defined(module: string): boolean;
    };
    export interface ControlElement {
        class?: string;
        contextMenu?: string;
        bottom?: number | string;
        dock?: DockStyle;
        enabled?: boolean;
        height?: number | string;
        id?: string;
        left?: number | string;
        maxWidth?: number | string;
        minWidth?: number | string;
        maxHeight?: number | string;
        minHeight?: number | string;
        right?: number | string;
        top?: number | string;
        visible?: boolean;
        width?: number | string;
        margin?: ISpace;
        padding?: ISpace;
        stack?: IStack;
        grid?: IGrid;
        background?: IBackground;
        lineHeight?: LineHeightType;
        zIndex?: string | number;
        position?: PositionType;
        linkTo?: Control;
        border?: IBorder;
        overflow?: IOverflow | OverflowType;
        font?: IFont;
        display?: DisplayType;
        tooltip?: ITooltip | string;
        anchor?: IAnchor;
        opacity?: number | string;
        tag?: any;
        cursor?: CursorType;
        letterSpacing?: string | number;
        boxShadow?: string;
        designMode?: boolean;
        mediaQueries?: IControlMediaQuery[];
        onClick?: notifyMouseEventCallback;
        onDblClick?: notifyMouseEventCallback;
        onContextMenu?: notifyMouseEventCallback;
    }
    export interface ContainerElement extends ControlElement {
        resizer?: boolean;
    }
    export function customModule(target: any): void;
    export function setAttributeToProperty<T extends Control>(element: T, propertyName: keyof T, defaultValue?: any): void;
}
/// <amd-module name="@ijstech/ipfs/types.ts" />
declare module "@ijstech/ipfs/types.ts" {
    export enum CidCode {
        DAG_PB = 112,
        RAW = 85
    }
    export interface ICidData {
        cid: string;
        links?: ICidInfo[];
        name?: string;
        size: number;
        type?: 'dir' | 'file';
        code?: CidCode;
        multihash?: any;
        bytes?: Uint8Array;
    }
    export interface ICidInfo {
        cid: string;
        links?: ICidInfo[];
        name?: string;
        size: number;
        type?: 'dir' | 'file';
    }
}
/// <amd-module name="@ijstech/ipfs/utils.ts" />
declare module "@ijstech/ipfs/utils.ts" {
    /*!-----------------------------------------------------------
    * Copyright (c) IJS Technologies. All rights reserved.
    * Released under dual BUSL-1.1/commercial license
    * https://ijs.network
    *-----------------------------------------------------------*/
    import { ICidData, ICidInfo } from "@ijstech/ipfs/types.ts";
    export function parse(cid: string, bytes?: Uint8Array): ICidData;
    export interface IHashChunk {
        size: number;
        dataSize: number;
        cid: {
            toString: () => string;
        };
    }
    export function hashChunk(data: any, version?: number): Promise<IHashChunk>;
    export function hashChunks(chunks: IHashChunk[] | ICidInfo[], version?: number): Promise<ICidData>;
    export function hashItems(items?: ICidInfo[], version?: number): Promise<ICidData>;
    export function hashContent(content: string | Uint8Array, version?: number): Promise<ICidData>;
    export function hashFile(file: File | Uint8Array, version?: number): Promise<ICidData>;
    export function cidToHash(cid: string): string;
}
/// <amd-module name="@ijstech/ipfs/fileManager.ts" />
declare module "@ijstech/ipfs/fileManager.ts" {
    import { ICidData, ICidInfo } from "@ijstech/ipfs/types.ts";
    export interface ISignature {
        pubKey: string;
        timestamp: number;
        sig: string;
    }
    export interface ISignerData {
        action: string;
        timestamp: number;
        data?: any;
    }
    export interface ISigner {
        sign(data: ISignerData, schema: object): Promise<ISignature>;
    }
    interface IFileManagerOptions {
        transport?: IFileManagerTransport;
        endpoint?: string;
        signer?: ISigner;
        rootCid?: string;
    }
    export interface IUploadEndpoints {
        [cid: string]: {
            exists?: boolean;
            url: string;
            method?: string;
            headers?: {
                [key: string]: string;
            };
        };
    }
    export type IGetUploadUrlResult = {
        success: true;
        data: IUploadEndpoints;
    };
    export interface IRootInfo {
        success: boolean;
        data: {
            cid: string;
            used: number;
            quota: number;
        };
    }
    export interface IResult {
        success: boolean;
        data?: any;
    }
    export interface IFileManagerTransport {
        applyUpdate(node: FileNode): Promise<IResult>;
        getCidInfo(cid: string): Promise<ICidInfo | undefined>;
        getRoot(): Promise<IRootInfo>;
        getUploadUrl(cidInfo: ICidInfo): Promise<IGetUploadUrlResult | undefined>;
    }
    export interface IFileManagerTransporterOptions {
        endpoint?: string;
        signer?: ISigner;
    }
    export class FileManagerHttpTransport implements IFileManagerTransport {
        private options;
        private updated;
        constructor(options?: IFileManagerTransporterOptions);
        applyUpdate(node: FileNode): Promise<IResult>;
        getCidInfo(cid: string): Promise<ICidInfo | undefined>;
        getRoot(): Promise<IRootInfo>;
        getUploadUrl(cidInfo: ICidInfo, isRoot?: boolean): Promise<IGetUploadUrlResult | undefined>;
    }
    export class FileNode {
        private _name;
        private _parent;
        protected _items: FileNode[];
        private _cidInfo;
        private _isFile;
        private _isFolder;
        private _file;
        private _fileContent;
        private _isModified;
        private _owner;
        isRoot: boolean;
        constructor(owner: FileManager, name: string, parent?: FileNode, cidInfo?: ICidData);
        get cid(): string;
        checkCid(): Promise<void>;
        get fullPath(): string;
        get isModified(): boolean;
        modified(value?: boolean): boolean;
        get name(): string;
        set name(value: string);
        get parent(): FileNode;
        set parent(value: FileNode);
        itemCount(): Promise<number>;
        items(index: number): Promise<FileNode>;
        addFile(name: string, file: File): Promise<FileNode>;
        addFileContent(name: string, content: Uint8Array | string): Promise<FileNode>;
        addItem(item: FileNode): Promise<void>;
        removeItem(item: FileNode): void;
        findItem(name: string): Promise<FileNode | undefined>;
        get cidInfo(): ICidData | undefined;
        isFile(): Promise<boolean>;
        isFolder(): Promise<boolean>;
        get file(): File | undefined;
        set file(value: File | undefined);
        get fileContent(): string | Uint8Array | undefined;
        set fileContent(value: string | Uint8Array | undefined);
        hash(): Promise<ICidData | undefined>;
    }
    export class FileManager {
        private transporter;
        private rootNode;
        private options;
        quota: number;
        used: number;
        constructor(options?: IFileManagerOptions);
        addFileTo(folder: FileNode, filePath: string, file: File | Uint8Array): Promise<FileNode>;
        addFile(filePath: string, file: File): Promise<FileNode | undefined>;
        addFileContent(filePath: string, content: Uint8Array | string): Promise<FileNode | undefined>;
        getCidInfo(cid: string): Promise<ICidInfo | undefined>;
        private updateNode;
        applyUpdates(): Promise<FileNode | undefined>;
        delete(fileNode: FileNode): void;
        addFolder(folder: FileNode, name: string): Promise<FileNode>;
        updateFolderName(fileNode: FileNode, newName: string): Promise<void>;
        getFileNode(path: string): Promise<FileNode | undefined>;
        getRootNode(): Promise<FileNode | undefined>;
        reset(): void;
        setRootCid(cid: string): Promise<FileNode | undefined>;
        move(fileNode: FileNode, newParent: FileNode): void;
    }
}
/// <amd-module name="@ijstech/ipfs" />
declare module "@ijstech/ipfs" {
    /*!-----------------------------------------------------------
    * Copyright (c) IJS Technologies. All rights reserved.
    * Released under dual BUSL-1.1/commercial license
    * https://ijs.network
    *-----------------------------------------------------------*/
    import { ICidInfo } from "@ijstech/ipfs/types.ts";
    export { CidCode, ICidData, ICidInfo } from "@ijstech/ipfs/types.ts";
    export { cidToHash, hashContent, hashFile, hashItems, parse } from "@ijstech/ipfs/utils.ts";
    export { FileManager, FileManagerHttpTransport, IFileManagerTransport, IFileManagerTransporterOptions, ISigner, ISignerData, ISignature, FileNode, IGetUploadUrlResult } from "@ijstech/ipfs/fileManager.ts";
    export interface IFile extends File {
        path?: string;
        cid?: {
            cid: string;
            size: number;
        };
    }
    export function hashFiles(files: IFile[], version?: number): Promise<ICidInfo>;
    export function cidToSri(cid: string): Promise<string>;
}
/// <amd-module name="@ijstech/moment/moment.ts" />
declare module "@ijstech/moment/moment.ts" {
    /**
     * @param strict Strict parsing disables the deprecated fallback to the native Date constructor when
     * parsing a string.
     */
    export function moment(inp?: moment.MomentInput, strict?: boolean): moment.Moment;
    /**
     * @param strict Strict parsing requires that the format and input match exactly, including delimiters.
     * Strict parsing is frequently the best parsing option. For more information about choosing strict vs
     * forgiving parsing, see the [parsing guide](https://momentjs.com/guides/#/parsing/).
     */
    export function moment(inp?: moment.MomentInput, format?: moment.MomentFormatSpecification, strict?: boolean): moment.Moment;
    /**
     * @param strict Strict parsing requires that the format and input match exactly, including delimiters.
     * Strict parsing is frequently the best parsing option. For more information about choosing strict vs
     * forgiving parsing, see the [parsing guide](https://momentjs.com/guides/#/parsing/).
     */
    export function moment(inp?: moment.MomentInput, format?: moment.MomentFormatSpecification, language?: string, strict?: boolean): moment.Moment;
    export namespace moment {
        export type RelativeTimeKey = 's' | 'ss' | 'm' | 'mm' | 'h' | 'hh' | 'd' | 'dd' | 'w' | 'ww' | 'M' | 'MM' | 'y' | 'yy';
        type CalendarKey = 'sameDay' | 'nextDay' | 'lastDay' | 'nextWeek' | 'lastWeek' | 'sameElse' | string;
        type LongDateFormatKey = 'LTS' | 'LT' | 'L' | 'LL' | 'LLL' | 'LLLL' | 'lts' | 'lt' | 'l' | 'll' | 'lll' | 'llll';
        export type Locale = {
            calendar(key?: CalendarKey, m?: Moment, now?: Moment): string;
            longDateFormat(key: LongDateFormatKey): string;
            invalidDate(): string;
            ordinal(n: number): string;
            preparse(inp: string): string;
            postformat(inp: string): string;
            relativeTime(n: number, withoutSuffix: boolean, key: RelativeTimeKey, isFuture: boolean): string;
            pastFuture(diff: number, absRelTime: string): string;
            set(config: Object): void;
            months(): string[];
            months(m: Moment, format?: string): string;
            monthsShort(): string[];
            monthsShort(m: Moment, format?: string): string;
            monthsParse(monthName: string, format: string, strict: boolean): number;
            monthsRegex(strict: boolean): RegExp;
            monthsShortRegex(strict: boolean): RegExp;
            week(m: Moment): number;
            firstDayOfYear(): number;
            firstDayOfWeek(): number;
            weekdays(): string[];
            weekdays(m: Moment, format?: string): string;
            weekdaysMin(): string[];
            weekdaysMin(m: Moment): string;
            weekdaysShort(): string[];
            weekdaysShort(m: Moment): string;
            weekdaysParse(weekdayName: string, format: string, strict: boolean): number;
            weekdaysRegex(strict: boolean): RegExp;
            weekdaysShortRegex(strict: boolean): RegExp;
            weekdaysMinRegex(strict: boolean): RegExp;
            isPM(input: string): boolean;
            meridiem(hour: number, minute: number, isLower: boolean): string;
        };
        interface StandaloneFormatSpec {
            format: string[];
            standalone: string[];
            isFormat?: RegExp;
        }
        interface WeekSpec {
            dow: number;
            doy?: number;
        }
        type CalendarSpecVal = string | ((m?: MomentInput, now?: Moment) => string);
        interface CalendarSpec {
            sameDay?: CalendarSpecVal;
            nextDay?: CalendarSpecVal;
            lastDay?: CalendarSpecVal;
            nextWeek?: CalendarSpecVal;
            lastWeek?: CalendarSpecVal;
            sameElse?: CalendarSpecVal;
            [x: string]: CalendarSpecVal | undefined;
        }
        type RelativeTimeSpecVal = (string | ((n: number, withoutSuffix: boolean, key: RelativeTimeKey, isFuture: boolean) => string));
        type RelativeTimeFuturePastVal = string | ((relTime: string) => string);
        interface RelativeTimeSpec {
            future?: RelativeTimeFuturePastVal;
            past?: RelativeTimeFuturePastVal;
            s?: RelativeTimeSpecVal;
            ss?: RelativeTimeSpecVal;
            m?: RelativeTimeSpecVal;
            mm?: RelativeTimeSpecVal;
            h?: RelativeTimeSpecVal;
            hh?: RelativeTimeSpecVal;
            d?: RelativeTimeSpecVal;
            dd?: RelativeTimeSpecVal;
            w?: RelativeTimeSpecVal;
            ww?: RelativeTimeSpecVal;
            M?: RelativeTimeSpecVal;
            MM?: RelativeTimeSpecVal;
            y?: RelativeTimeSpecVal;
            yy?: RelativeTimeSpecVal;
        }
        interface LongDateFormatSpec {
            LTS: string;
            LT: string;
            L: string;
            LL: string;
            LLL: string;
            LLLL: string;
            lts?: string;
            lt?: string;
            l?: string;
            ll?: string;
            lll?: string;
            llll?: string;
        }
        type MonthWeekdayFn = (momentToFormat: Moment, format?: string) => string;
        type WeekdaySimpleFn = (momentToFormat: Moment) => string;
        interface LocaleSpecification {
            months?: string[] | StandaloneFormatSpec | MonthWeekdayFn;
            monthsShort?: string[] | StandaloneFormatSpec | MonthWeekdayFn;
            weekdays?: string[] | StandaloneFormatSpec | MonthWeekdayFn;
            weekdaysShort?: string[] | StandaloneFormatSpec | WeekdaySimpleFn;
            weekdaysMin?: string[] | StandaloneFormatSpec | WeekdaySimpleFn;
            meridiemParse?: RegExp;
            meridiem?: (hour: number, minute: number, isLower: boolean) => string;
            isPM?: (input: string) => boolean;
            longDateFormat?: LongDateFormatSpec;
            calendar?: CalendarSpec;
            relativeTime?: RelativeTimeSpec;
            invalidDate?: string;
            ordinal?: (n: number) => string;
            ordinalParse?: RegExp;
            week?: WeekSpec;
            [x: string]: any;
        }
        interface MomentObjectOutput {
            years: number;
            months: number;
            date: number;
            hours: number;
            minutes: number;
            seconds: number;
            milliseconds: number;
        }
        interface argThresholdOpts {
            ss?: number;
            s?: number;
            m?: number;
            h?: number;
            d?: number;
            w?: number | null;
            M?: number;
        }
        interface Duration {
            clone(): Duration;
            humanize(argWithSuffix?: boolean, argThresholds?: argThresholdOpts): string;
            humanize(argThresholds?: argThresholdOpts): string;
            abs(): Duration;
            as(units: unitOfTime.Base): number;
            get(units: unitOfTime.Base): number;
            milliseconds(): number;
            asMilliseconds(): number;
            seconds(): number;
            asSeconds(): number;
            minutes(): number;
            asMinutes(): number;
            hours(): number;
            asHours(): number;
            days(): number;
            asDays(): number;
            weeks(): number;
            asWeeks(): number;
            months(): number;
            asMonths(): number;
            years(): number;
            asYears(): number;
            add(inp?: DurationInputArg1, unit?: DurationInputArg2): Duration;
            subtract(inp?: DurationInputArg1, unit?: DurationInputArg2): Duration;
            locale(): string;
            locale(locale: LocaleSpecifier): Duration;
            localeData(): Locale;
            toISOString(): string;
            toJSON(): string;
            isValid(): boolean;
            /**
             * @deprecated since version 2.8.0
             */
            lang(locale: LocaleSpecifier): Moment;
            /**
             * @deprecated since version 2.8.0
             */
            lang(): Locale;
            /**
             * @deprecated
             */
            toIsoString(): string;
        }
        interface MomentParsingFlags {
            empty: boolean;
            unusedTokens: string[];
            unusedInput: string[];
            overflow: number;
            charsLeftOver: number;
            nullInput: boolean;
            invalidMonth: string | null;
            invalidFormat: boolean;
            userInvalidated: boolean;
            iso: boolean;
            parsedDateParts: any[];
            meridiem: string | null;
        }
        interface MomentParsingFlagsOpt {
            empty?: boolean;
            unusedTokens?: string[];
            unusedInput?: string[];
            overflow?: number;
            charsLeftOver?: number;
            nullInput?: boolean;
            invalidMonth?: string;
            invalidFormat?: boolean;
            userInvalidated?: boolean;
            iso?: boolean;
            parsedDateParts?: any[];
            meridiem?: string | null;
        }
        interface MomentBuiltinFormat {
            __momentBuiltinFormatBrand: any;
        }
        export type MomentFormatSpecification = string | MomentBuiltinFormat | (string | MomentBuiltinFormat)[];
        namespace unitOfTime {
            export type Base = ("year" | "years" | "y" | "month" | "months" | "M" | "week" | "weeks" | "w" | "day" | "days" | "d" | "hour" | "hours" | "h" | "minute" | "minutes" | "m" | "second" | "seconds" | "s" | "millisecond" | "milliseconds" | "ms");
            type _quarter = "quarter" | "quarters" | "Q";
            type _isoWeek = "isoWeek" | "isoWeeks" | "W";
            type _date = "date" | "dates" | "D";
            export type DurationConstructor = Base | _quarter;
            export type StartOf = Base | _quarter | _isoWeek | _date | null;
            export type Diff = Base | _quarter;
            export type All = Base | _quarter | _isoWeek | _date | "weekYear" | "weekYears" | "gg" | "isoWeekYear" | "isoWeekYears" | "GG" | "dayOfYear" | "dayOfYears" | "DDD" | "weekday" | "weekdays" | "e" | "isoWeekday" | "isoWeekdays" | "E";
            export {};
        }
        interface MomentInputObject {
            years?: number;
            year?: number;
            y?: number;
            months?: number;
            month?: number;
            M?: number;
            days?: number;
            day?: number;
            d?: number;
            dates?: number;
            date?: number;
            D?: number;
            hours?: number;
            hour?: number;
            h?: number;
            minutes?: number;
            minute?: number;
            m?: number;
            seconds?: number;
            second?: number;
            s?: number;
            milliseconds?: number;
            millisecond?: number;
            ms?: number;
        }
        interface DurationInputObject extends MomentInputObject {
            quarters?: number;
            quarter?: number;
            Q?: number;
            weeks?: number;
            week?: number;
            w?: number;
        }
        interface MomentSetObject extends MomentInputObject {
            weekYears?: number;
            weekYear?: number;
            gg?: number;
            isoWeekYears?: number;
            isoWeekYear?: number;
            GG?: number;
            quarters?: number;
            quarter?: number;
            Q?: number;
            weeks?: number;
            week?: number;
            w?: number;
            isoWeeks?: number;
            isoWeek?: number;
            W?: number;
            dayOfYears?: number;
            dayOfYear?: number;
            DDD?: number;
            weekdays?: number;
            weekday?: number;
            e?: number;
            isoWeekdays?: number;
            isoWeekday?: number;
            E?: number;
        }
        interface FromTo {
            from: MomentInput;
            to: MomentInput;
        }
        export type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | null | undefined;
        type DurationInputArg1 = Duration | number | string | FromTo | DurationInputObject | null | undefined;
        type DurationInputArg2 = unitOfTime.DurationConstructor;
        type LocaleSpecifier = string | Moment | Duration | string[] | boolean;
        interface MomentCreationData {
            input: MomentInput;
            format?: MomentFormatSpecification;
            locale: Locale;
            isUTC: boolean;
            strict?: boolean;
        }
        export interface Moment extends Object {
            format(format?: string): string;
            startOf(unitOfTime: unitOfTime.StartOf): Moment;
            endOf(unitOfTime: unitOfTime.StartOf): Moment;
            add(amount?: DurationInputArg1, unit?: DurationInputArg2): Moment;
            /**
             * @deprecated reverse syntax
             */
            add(unit: unitOfTime.DurationConstructor, amount: number | string): Moment;
            subtract(amount?: DurationInputArg1, unit?: DurationInputArg2): Moment;
            /**
             * @deprecated reverse syntax
             */
            subtract(unit: unitOfTime.DurationConstructor, amount: number | string): Moment;
            calendar(): string;
            calendar(formats: CalendarSpec): string;
            calendar(time?: MomentInput, formats?: CalendarSpec): string;
            clone(): Moment;
            /**
             * @return Unix timestamp in milliseconds
             */
            valueOf(): number;
            local(keepLocalTime?: boolean): Moment;
            isLocal(): boolean;
            utc(keepLocalTime?: boolean): Moment;
            isUTC(): boolean;
            /**
             * @deprecated use isUTC
             */
            isUtc(): boolean;
            parseZone(): Moment;
            isValid(): boolean;
            invalidAt(): number;
            hasAlignedHourOffset(other?: MomentInput): boolean;
            creationData(): MomentCreationData;
            parsingFlags(): MomentParsingFlags;
            year(y: number): Moment;
            year(): number;
            /**
             * @deprecated use year(y)
             */
            years(y: number): Moment;
            /**
             * @deprecated use year()
             */
            years(): number;
            quarter(): number;
            quarter(q: number): Moment;
            quarters(): number;
            quarters(q: number): Moment;
            month(M: number | string): Moment;
            month(): number;
            /**
             * @deprecated use month(M)
             */
            months(M: number | string): Moment;
            /**
             * @deprecated use month()
             */
            months(): number;
            day(d: number | string): Moment;
            day(): number;
            days(d: number | string): Moment;
            days(): number;
            date(d: number): Moment;
            date(): number;
            /**
             * @deprecated use date(d)
             */
            dates(d: number): Moment;
            /**
             * @deprecated use date()
             */
            dates(): number;
            hour(h: number): Moment;
            hour(): number;
            hours(h: number): Moment;
            hours(): number;
            minute(m: number): Moment;
            minute(): number;
            minutes(m: number): Moment;
            minutes(): number;
            second(s: number): Moment;
            second(): number;
            seconds(s: number): Moment;
            seconds(): number;
            millisecond(ms: number): Moment;
            millisecond(): number;
            milliseconds(ms: number): Moment;
            milliseconds(): number;
            weekday(): number;
            weekday(d: number): Moment;
            isoWeekday(): number;
            isoWeekday(d: number | string): Moment;
            weekYear(): number;
            weekYear(d: number): Moment;
            isoWeekYear(): number;
            isoWeekYear(d: number): Moment;
            week(): number;
            week(d: number): Moment;
            weeks(): number;
            weeks(d: number): Moment;
            isoWeek(): number;
            isoWeek(d: number): Moment;
            isoWeeks(): number;
            isoWeeks(d: number): Moment;
            weeksInYear(): number;
            isoWeeksInYear(): number;
            isoWeeksInISOWeekYear(): number;
            dayOfYear(): number;
            dayOfYear(d: number): Moment;
            from(inp: MomentInput, suffix?: boolean): string;
            to(inp: MomentInput, suffix?: boolean): string;
            fromNow(withoutSuffix?: boolean): string;
            toNow(withoutPrefix?: boolean): string;
            diff(b: MomentInput, unitOfTime?: unitOfTime.Diff, precise?: boolean): number;
            toArray(): [number, number, number, number, number, number, number];
            toDate(): Date;
            toISOString(keepOffset?: boolean): string;
            inspect(): string;
            toJSON(): string;
            unix(): number;
            isLeapYear(): boolean;
            /**
             * @deprecated in favor of utcOffset
             */
            zone(): number;
            zone(b: number | string): Moment;
            utcOffset(): number;
            utcOffset(b: number | string, keepLocalTime?: boolean): Moment;
            isUtcOffset(): boolean;
            daysInMonth(): number;
            isDST(): boolean;
            zoneAbbr(): string;
            zoneName(): string;
            isBefore(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;
            isAfter(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;
            isSame(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;
            isSameOrAfter(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;
            isSameOrBefore(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;
            isBetween(a: MomentInput, b: MomentInput, granularity?: unitOfTime.StartOf, inclusivity?: "()" | "[)" | "(]" | "[]"): boolean;
            /**
             * @deprecated as of 2.8.0, use locale
             */
            lang(language: LocaleSpecifier): Moment;
            /**
             * @deprecated as of 2.8.0, use locale
             */
            lang(): Locale;
            locale(): string;
            locale(locale: LocaleSpecifier): Moment;
            localeData(): Locale;
            /**
             * @deprecated no reliable implementation
             */
            isDSTShifted(): boolean;
            /**
             * @deprecated as of 2.7.0, use moment.min/max
             */
            max(inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment;
            /**
             * @deprecated as of 2.7.0, use moment.min/max
             */
            max(inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment;
            /**
             * @deprecated as of 2.7.0, use moment.min/max
             */
            min(inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment;
            /**
             * @deprecated as of 2.7.0, use moment.min/max
             */
            min(inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment;
            get(unit: unitOfTime.All): number;
            set(unit: unitOfTime.All, value: number): Moment;
            set(objectLiteral: MomentSetObject): Moment;
            toObject(): MomentObjectOutput;
        }
        export var version: string;
        export var fn: Moment;
        /**
         * @param strict Strict parsing disables the deprecated fallback to the native Date constructor when
         * parsing a string.
         */
        export function utc(inp?: MomentInput, strict?: boolean): Moment;
        /**
         * @param strict Strict parsing requires that the format and input match exactly, including delimiters.
         * Strict parsing is frequently the best parsing option. For more information about choosing strict vs
         * forgiving parsing, see the [parsing guide](https://momentjs.com/guides/#/parsing/).
         */
        export function utc(inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment;
        /**
         * @param strict Strict parsing requires that the format and input match exactly, including delimiters.
         * Strict parsing is frequently the best parsing option. For more information about choosing strict vs
         * forgiving parsing, see the [parsing guide](https://momentjs.com/guides/#/parsing/).
         */
        export function utc(inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment;
        export function unix(timestamp: number): Moment;
        export function invalid(flags?: MomentParsingFlagsOpt): Moment;
        export function isMoment(m: any): m is Moment;
        export function isDate(m: any): m is Date;
        export function isDuration(d: any): d is Duration;
        /**
         * @deprecated in 2.8.0
         */
        export function lang(language?: string): string;
        /**
         * @deprecated in 2.8.0
         */
        export function lang(language?: string, definition?: Locale): string;
        export function locale(language?: string): string;
        export function locale(language?: string[]): string;
        export function locale(language?: string, definition?: LocaleSpecification | null | undefined): string;
        export function localeData(key?: string | string[]): Locale;
        export function duration(inp?: DurationInputArg1, unit?: DurationInputArg2): Duration;
        export function parseZone(inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment;
        export function parseZone(inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment;
        export function months(): string[];
        export function months(index: number): string;
        export function months(format: string): string[];
        export function months(format: string, index: number): string;
        export function monthsShort(): string[];
        export function monthsShort(index: number): string;
        export function monthsShort(format: string): string[];
        export function monthsShort(format: string, index: number): string;
        export function weekdays(): string[];
        export function weekdays(index: number): string;
        export function weekdays(format: string): string[];
        export function weekdays(format: string, index: number): string;
        export function weekdays(localeSorted: boolean): string[];
        export function weekdays(localeSorted: boolean, index: number): string;
        export function weekdays(localeSorted: boolean, format: string): string[];
        export function weekdays(localeSorted: boolean, format: string, index: number): string;
        export function weekdaysShort(): string[];
        export function weekdaysShort(index: number): string;
        export function weekdaysShort(format: string): string[];
        export function weekdaysShort(format: string, index: number): string;
        export function weekdaysShort(localeSorted: boolean): string[];
        export function weekdaysShort(localeSorted: boolean, index: number): string;
        export function weekdaysShort(localeSorted: boolean, format: string): string[];
        export function weekdaysShort(localeSorted: boolean, format: string, index: number): string;
        export function weekdaysMin(): string[];
        export function weekdaysMin(index: number): string;
        export function weekdaysMin(format: string): string[];
        export function weekdaysMin(format: string, index: number): string;
        export function weekdaysMin(localeSorted: boolean): string[];
        export function weekdaysMin(localeSorted: boolean, index: number): string;
        export function weekdaysMin(localeSorted: boolean, format: string): string[];
        export function weekdaysMin(localeSorted: boolean, format: string, index: number): string;
        export function min(moments: Moment[]): Moment;
        export function min(...moments: Moment[]): Moment;
        export function max(moments: Moment[]): Moment;
        export function max(...moments: Moment[]): Moment;
        /**
         * Returns unix time in milliseconds. Overwrite for profit.
         */
        export function now(): number;
        export function defineLocale(language: string, localeSpec: LocaleSpecification | null): Locale;
        export function updateLocale(language: string, localeSpec: LocaleSpecification | null): Locale;
        export function locales(): string[];
        export function normalizeUnits(unit: unitOfTime.All): string;
        export function relativeTimeThreshold(threshold: string): number | boolean;
        export function relativeTimeThreshold(threshold: string, limit: number): boolean;
        export function relativeTimeRounding(fn: (num: number) => number): boolean;
        export function relativeTimeRounding(): (num: number) => number;
        export function calendarFormat(m: Moment, now: Moment): string;
        export function parseTwoDigitYear(input: string): number;
        /**
         * Constant used to enable explicit ISO_8601 format parsing.
         */
        export var ISO_8601: MomentBuiltinFormat;
        export var RFC_2822: MomentBuiltinFormat;
        export var defaultFormat: string;
        export var defaultFormatUtc: string;
        export var suppressDeprecationWarnings: boolean;
        export var deprecationHandler: ((name: string | null, msg: string) => void) | null | undefined;
        export var HTML5_FMT: {
            DATETIME_LOCAL: string;
            DATETIME_LOCAL_SECONDS: string;
            DATETIME_LOCAL_MS: string;
            DATE: string;
            TIME: string;
            TIME_SECONDS: string;
            TIME_MS: string;
            WEEK: string;
            MONTH: string;
        };
        export interface test {
            a: string;
        }
        export {};
    }
}
/// <amd-module name="@ijstech/moment" />
declare module "@ijstech/moment" {
    import { moment } from "@ijstech/moment/moment.ts";
    let _moment: typeof moment;
    export interface Moment extends moment.Moment {
    }
    export { _moment as moment };
}
/// <amd-module name="@ijstech/application/event-bus.ts" />
declare module "@ijstech/application/event-bus.ts" {
    export interface Registry {
        unregister: () => void;
    }
    export interface Callable {
        [key: string]: Function;
    }
    export interface Subscriber {
        [key: string]: Callable;
    }
    export interface IEventBus {
        dispatch<T>(event: string, arg?: T): void;
        register(sender: any, event: string, callback: Function): Registry;
    }
    export class EventBus implements IEventBus {
        private subscribers;
        private static nextId;
        private static instance?;
        private constructor();
        static getInstance(): EventBus;
        dispatch<T>(event: string, arg?: T): void;
        register(sender: any, event: string, callback: Function): Registry;
        private getNextId;
    }
}
/// <amd-module name="@ijstech/application/globalEvent.ts" />
declare module "@ijstech/application/globalEvent.ts" {
    export class GlobalEvents {
        _leftMouseButtonDown: boolean;
        private _initialTouchPos;
        constructor();
        abortEvent(event: Event): void;
        private _handleClick;
        private _handleMouseDown;
        private _handleMouseMove;
        private _handleMouseUp;
        private _handleDblClick;
        private _handleKeyDown;
        private _handleKeyUp;
        private _handleContextMenu;
        private _handleChange;
        private _handleMouseWheel;
        private _handleFocus;
        private _handleBlur;
        private bindEvents;
    }
}
/// <amd-module name="@ijstech/application/styles/index.css.ts" />
declare module "@ijstech/application/styles/index.css.ts" {
    export const applicationStyle: string;
}
/// <amd-module name="@ijstech/application/formatUtils.ts" />
declare module "@ijstech/application/formatUtils.ts" {
    type RoundingMethod = 'floor' | 'round' | 'ceil';
    export interface IFormatNumberOptions {
        useSeparators?: boolean;
        roundingMethod?: RoundingMethod;
        decimalFigures?: number;
        minValue?: number | string;
        shortScale?: boolean;
        hasTrailingZero?: boolean;
    }
    export class FormatUtils {
        static unixToFormattedDate(unixTimestamp: number): string;
        static truncateTxHash(hash: string, length?: number): string;
        static truncateWalletAddress(address: string): string;
        static formatNumber(value: BigInt | string | number, options?: IFormatNumberOptions): string;
        private static scaleValue;
        private static removeExponential;
        private static compareToMinValue;
        private static processDecimalPart;
        private static customRound;
        private static roundIntegerPart;
        private static incrementLastDigit;
    }
    export class BigDecimal {
        static decimals: number;
        private bigVal;
        constructor(value: string);
        static fromBigInt(bigVal: bigint): any;
        toString(): string;
        divide(value: BigDecimal): any;
    }
}
/// <amd-module name="@ijstech/application" />
declare module "@ijstech/application" {
    import { IModule } from '@ijstech/types';
    import { I18n, Permissions } from '@ijstech/base';
    import { Locales } from '@ijstech/types';
    import { EventBus } from "@ijstech/application/event-bus.ts";
    import { GlobalEvents } from "@ijstech/application/globalEvent.ts";
    import { ICidInfo } from '@ijstech/ipfs';
    export interface IGeo {
        enabled: boolean;
        apiUrl?: string;
        blockedCountries: string[];
        moduleOnBlocking: string;
    }
    export interface IGeoInfo {
        country: string;
        timezone: string;
    }
    export interface IHasDependencies {
        assets?: string;
        bundle?: boolean;
        ipfs?: string;
        rootDir?: string;
        moduleDir?: string;
        libDir?: string;
        main?: string;
        geo?: IGeo;
        dependencies?: {
            [name: string]: string;
        };
        modules?: {
            [name: string]: {
                path: string;
                dependencies: string[];
            };
        };
        script?: string;
    }
    export interface IModuleRoute extends IHasDependencies {
        url: string;
        module: string;
        default?: boolean;
    }
    export interface IModuleMenuItem {
        text: string;
        to: string;
        isToExternal?: boolean;
        img?: string;
        subItems?: IModuleMenuItem[];
        isDisabled?: boolean;
        supportedChainIds?: number[];
        env?: string[];
    }
    export interface IModuleOptions extends IHasDependencies {
        codeCID?: string;
        name?: string;
        main?: string;
        type?: number;
        version?: string;
        root?: string;
        routes?: IModuleRoute[];
        params?: any;
        menuItems?: IModuleMenuItem[];
        env?: string;
    }
    export enum IpfsDataType {
        Raw = 0,
        Directory = 1,
        File = 2,
        Metadata = 3,
        Symlink = 4,
        HAMTShard = 5
    }
    export interface IUploadResult {
        success: boolean;
        error?: string;
        data?: ICidInfo;
    }
    export interface IUploadItem {
        cid: ICidInfo;
        data?: File | string;
    }
    interface IDevInfo {
        data?: {
            [name: string]: any;
        };
        paths?: {
            [name: string]: any;
        };
    }
    export class Application {
        private static _instance;
        private modules;
        private modulesId;
        private scripts;
        private loadedScripts;
        globalEvents: GlobalEvents;
        private id;
        currentModulePath: string;
        currentModuleDir: string;
        LibHost: string;
        private packageNames;
        private packages;
        private packageDependencies;
        _assets: {
            [name: string]: any;
        };
        private _initOptions?;
        private cidItems;
        geoInfo: IGeoInfo;
        private bundleLibs;
        store: Record<string, any>;
        rootDir: string;
        assetsDir: string;
        dev: IDevInfo | null;
        private _locale;
        private _i18n;
        private static _modules;
        private _permissions;
        static updateLocale(): void;
        static registerModule(uuid: string, module: IModule): void;
        static unregisterModule(uuid: string): void;
        private constructor();
        get EventBus(): EventBus;
        static get Instance(): Application;
        assets(name: string): any;
        private resolvePackageSCConfigPath;
        private calculatePackageModuleDir;
        createElement(name: string, lazyLoad?: boolean, attributes?: {
            [name: string]: string;
        }, modulePath?: string): Promise<HTMLElement | undefined>;
        fetch(input: RequestInfo, init?: RequestInit | undefined): Promise<Response>;
        postData(endpoint: string, data: any): Promise<any>;
        getUploadUrl(item: ICidInfo): Promise<{
            [cid: string]: string;
        }>;
        get i18n(): I18n;
        get locale(): Locales;
        set locale(value: Locales);
        get permissions(): Permissions;
        uploadData(fileName: string, content: string): Promise<IUploadResult>;
        uploadTo(targetCid: string, items: IUploadItem[]): Promise<IUploadResult>;
        upload(url: string, data: File | string): Promise<number>;
        private getCidItem;
        private verifyScript;
        private getScript;
        loadScript(modulePath: string, script?: string, forcedSave?: boolean): Promise<boolean>;
        loadScriptWithIntegrity(modulePath: string, integrity?: string, crossorigin?: string): Promise<unknown>;
        getContent(modulePath: string): Promise<string>;
        getJSONContent(modulePath: string): Promise<any>;
        fetchDirectoryInfoByCID(ipfsCid: string): Promise<ICidInfo[]>;
        resolvePackageDependencies(packageName: string, result?: string[]): Promise<string[]>;
        private resolvePackageModulePath;
        loadPackage(packageName: string, modulePath?: string): Promise<{
            [name: string]: any;
        } | null>;
        loadPackages(packages: string[]): Promise<void>;
        private dynamicImportPackage;
        loadModule(modulePath: string, options?: IHasDependencies): Promise<IModule | null>;
        private getModulePath;
        initModule(modulePath: string, script: string): Promise<string | null>;
        init(scconfigPath: string, customData?: Record<string, any>): Promise<IModule | null>;
        newModule(module: string, options?: IHasDependencies): Promise<IModule | null>;
        copyToClipboard(value: string): Promise<boolean>;
        xssSanitize(value: string): string;
    }
    export const application: Application;
    export { EventBus, IEventBus } from "@ijstech/application/event-bus.ts";
    export { FormatUtils, IFormatNumberOptions } from "@ijstech/application/formatUtils.ts";
    export default application;
}
/// <amd-module name="@ijstech/checkbox/style/checkbox.css.ts" />
declare module "@ijstech/checkbox/style/checkbox.css.ts" { }
/// <amd-module name="@ijstech/checkbox/checkbox.ts" />
declare module "@ijstech/checkbox/checkbox.ts" {
    import { ControlElement, Control, notifyEventCallback, I18n } from '@ijstech/base';
    import "@ijstech/checkbox/style/checkbox.css.ts";
    export interface CheckboxElement extends ControlElement {
        checked?: boolean;
        indeterminate?: boolean;
        caption?: string;
        captionWidth?: number | string;
        readOnly?: boolean;
        onChanged?: notifyEventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-checkbox']: CheckboxElement;
            }
        }
    }
    export class Checkbox extends Control {
        private _checked;
        private _caption;
        private _captionWidth;
        private _indeterminate;
        private _readOnly;
        private wrapperElm;
        private inputSpanElm;
        private captionSpanElm;
        private inputElm;
        private checkmarklElm;
        onChanged: notifyEventCallback;
        constructor(parent?: Control, options?: any);
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        get captionWidth(): number | string;
        set captionWidth(value: number | string);
        get height(): number;
        set height(value: number | string);
        get indeterminate(): boolean;
        set indeterminate(value: boolean);
        get checked(): boolean;
        set checked(value: boolean);
        get value(): any;
        set value(data: any);
        get enabled(): boolean;
        set enabled(value: boolean);
        get readOnly(): boolean;
        set readOnly(value: boolean);
        private _handleChange;
        private addClass;
        protected init(): void;
        static create(options?: CheckboxElement, parent?: Control): Promise<Checkbox>;
    }
}
/// <amd-module name="@ijstech/checkbox" />
declare module "@ijstech/checkbox" {
    export { Checkbox, CheckboxElement } from "@ijstech/checkbox/checkbox.ts";
}
/// <amd-module name="@ijstech/image/style/image.css.ts" />
declare module "@ijstech/image/style/image.css.ts" { }
/// <amd-module name="@ijstech/image/image.ts" />
declare module "@ijstech/image/image.ts" {
    import { Control, ControlElement, IBorder, Border } from '@ijstech/base';
    import "@ijstech/image/style/image.css.ts";
    type ObjectFitType = 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
    export interface ImageElement extends ControlElement {
        rotate?: number;
        url?: string;
        fallbackUrl?: string;
        objectFit?: ObjectFitType;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-image']: ImageElement;
            }
        }
    }
    export class Image extends Control {
        private imageElm;
        private _url;
        private _rotate;
        private _fallbackUrl;
        private _objectFit;
        private _borderValue;
        private _usedFallback;
        constructor(parent?: Control, options?: any);
        get fallbackUrl(): string;
        set fallbackUrl(value: string);
        get rotate(): number;
        set rotate(value: any);
        get url(): string;
        set url(value: string);
        get objectFit(): ObjectFitType;
        set objectFit(value: ObjectFitType);
        get border(): Border;
        set border(value: IBorder);
        protected init(): void;
        static create(options?: ImageElement, parent?: Control): Promise<Image>;
    }
}
/// <amd-module name="@ijstech/image" />
declare module "@ijstech/image" {
    export { Image, ImageElement } from "@ijstech/image/image.ts";
}
/// <amd-module name="@ijstech/icon/style/icon.css.ts" />
declare module "@ijstech/icon/style/icon.css.ts" { }
/// <amd-module name="@ijstech/icon/icon.ts" />
declare module "@ijstech/icon/icon.ts" {
    import { Control, ControlElement, Types } from '@ijstech/base';
    import { Image, ImageElement } from "@ijstech/image";
    import "@ijstech/icon/style/icon.css.ts";
    export type IconName = "" | "ad" | "address-book" | "address-card" | "adjust" | "air-freshener" | "align-center" | "align-justify" | "align-left" | "align-right" | "allergies" | "ambulance" | "american-sign-language-interpreting" | "anchor" | "angle-double-down" | "angle-double-left" | "angle-double-right" | "angle-double-up" | "angle-down" | "angle-left" | "angle-right" | "angle-up" | "angry" | "ankh" | "apple-alt" | "archive" | "archway" | "arrow-alt-circle-down" | "arrow-alt-circle-left" | "arrow-alt-circle-right" | "arrow-alt-circle-up" | "arrow-circle-down" | "arrow-circle-left" | "arrow-circle-right" | "arrow-circle-up" | "arrow-down" | "arrow-left" | "arrow-right" | "arrow-up" | "arrows-alt" | "arrows-alt-h" | "arrows-alt-v" | "assistive-listening-systems" | "asterisk" | "at" | "atlas" | "atom" | "audio-description" | "award" | "baby" | "baby-carriage" | "backspace" | "backward" | "bacon" | "bacteria" | "bacterium" | "bahai" | "balance-scale" | "balance-scale-left" | "balance-scale-right" | "ban" | "band-aid" | "barcode" | "bars" | "baseball-ball" | "basketball-ball" | "bath" | "battery-empty" | "battery-full" | "battery-half" | "battery-quarter" | "battery-three-quarters" | "bed" | "beer" | "bell" | "bell-slash" | "bezier-curve" | "bible" | "bicycle" | "biking" | "binoculars" | "biohazard" | "birthday-cake" | "blender" | "blender-phone" | "blind" | "blog" | "bold" | "bolt" | "bomb" | "bone" | "bong" | "book" | "book-dead" | "book-medical" | "book-open" | "book-reader" | "bookmark" | "border-all" | "border-none" | "border-style" | "bowling-ball" | "box" | "box-open" | "box-tissue" | "boxes" | "braille" | "brain" | "bread-slice" | "briefcase" | "briefcase-medical" | "broadcast-tower" | "broom" | "brush" | "bug" | "building" | "bullhorn" | "bullseye" | "burn" | "bus" | "bus-alt" | "business-time" | "calculator" | "calendar" | "calendar-alt" | "calendar-check" | "calendar-day" | "calendar-minus" | "calendar-plus" | "calendar-times" | "calendar-week" | "camera" | "camera-retro" | "campground" | "candy-cane" | "cannabis" | "capsules" | "car" | "car-alt" | "car-battery" | "car-crash" | "car-side" | "caravan" | "caret-down" | "caret-left" | "caret-right" | "caret-square-down" | "caret-square-left" | "caret-square-right" | "caret-square-up" | "caret-up" | "carrot" | "cart-arrow-down" | "cart-plus" | "cash-register" | "cat" | "certificate" | "chair" | "chalkboard" | "chalkboard-teacher" | "charging-station" | "chart-area" | "chart-bar" | "chart-line" | "chart-pie" | "check" | "check-circle" | "check-double" | "check-square" | "cheese" | "chess" | "chess-bishop" | "chess-board" | "chess-king" | "chess-knight" | "chess-pawn" | "chess-queen" | "chess-rook" | "chevron-circle-down" | "chevron-circle-left" | "chevron-circle-right" | "chevron-circle-up" | "chevron-down" | "chevron-left" | "chevron-right" | "chevron-up" | "child" | "church" | "circle" | "circle-notch" | "city" | "clinic-medical" | "clipboard" | "clipboard-check" | "clipboard-list" | "clock" | "clone" | "closed-captioning" | "cloud" | "cloud-download-alt" | "cloud-meatball" | "cloud-moon" | "cloud-moon-rain" | "cloud-rain" | "cloud-showers-heavy" | "cloud-sun" | "cloud-sun-rain" | "cloud-upload-alt" | "cocktail" | "code" | "code-branch" | "coffee" | "cog" | "cogs" | "coins" | "columns" | "comment" | "comment-alt" | "comment-dollar" | "comment-dots" | "comment-medical" | "comment-slash" | "comments" | "comments-dollar" | "compact-disc" | "compass" | "compress" | "compress-alt" | "compress-arrows-alt" | "concierge-bell" | "cookie" | "cookie-bite" | "copy" | "copyright" | "couch" | "credit-card" | "crop" | "crop-alt" | "cross" | "crosshairs" | "crow" | "crown" | "crutch" | "cube" | "cubes" | "cut" | "database" | "deaf" | "democrat" | "desktop" | "dharmachakra" | "diagnoses" | "dice" | "dice-d20" | "dice-d6" | "dice-five" | "dice-four" | "dice-one" | "dice-six" | "dice-three" | "dice-two" | "digital-tachograph" | "directions" | "disease" | "divide" | "dizzy" | "dna" | "dog" | "dollar-sign" | "dolly" | "dolly-flatbed" | "donate" | "door-closed" | "door-open" | "dot-circle" | "dove" | "download" | "drafting-compass" | "dragon" | "draw-polygon" | "drum" | "drum-steelpan" | "drumstick-bite" | "dumbbell" | "dumpster" | "dumpster-fire" | "dungeon" | "edit" | "egg" | "eject" | "ellipsis-h" | "ellipsis-v" | "envelope" | "envelope-open" | "envelope-open-text" | "envelope-square" | "equals" | "eraser" | "ethernet" | "euro-sign" | "exchange-alt" | "exclamation" | "exclamation-circle" | "exclamation-triangle" | "expand" | "expand-alt" | "expand-arrows-alt" | "external-link-alt" | "external-link-square-alt" | "eye" | "eye-dropper" | "eye-slash" | "fan" | "fast-backward" | "fast-forward" | "faucet" | "fax" | "feather" | "feather-alt" | "female" | "fighter-jet" | "file" | "file-alt" | "file-archive" | "file-audio" | "file-code" | "file-contract" | "file-csv" | "file-download" | "file-excel" | "file-export" | "file-image" | "file-import" | "file-invoice" | "file-invoice-dollar" | "file-medical" | "file-medical-alt" | "file-pdf" | "file-powerpoint" | "file-prescription" | "file-signature" | "file-upload" | "file-video" | "file-word" | "fill" | "fill-drip" | "film" | "filter" | "fingerprint" | "fire" | "fire-alt" | "fire-extinguisher" | "first-aid" | "fish" | "fist-raised" | "flag" | "flag-checkered" | "flag-usa" | "flask" | "flushed" | "folder" | "folder-minus" | "folder-open" | "folder-plus" | "font" | "font-awesome-logo-full" | "football-ball" | "forward" | "frog" | "frown" | "frown-open" | "funnel-dollar" | "futbol" | "gamepad" | "gas-pump" | "gavel" | "gem" | "genderless" | "ghost" | "gift" | "gifts" | "glass-cheers" | "glass-martini" | "glass-martini-alt" | "glass-whiskey" | "glasses" | "globe" | "globe-africa" | "globe-americas" | "globe-asia" | "globe-europe" | "golf-ball" | "gopuram" | "graduation-cap" | "greater-than" | "greater-than-equal" | "grimace" | "grin" | "grin-alt" | "grin-beam" | "grin-beam-sweat" | "grin-hearts" | "grin-squint" | "grin-squint-tears" | "grin-stars" | "grin-tears" | "grin-tongue" | "grin-tongue-squint" | "grin-tongue-wink" | "grin-wink" | "grip-horizontal" | "grip-lines" | "grip-lines-vertical" | "grip-vertical" | "guitar" | "h-square" | "hamburger" | "hammer" | "hamsa" | "hand-holding" | "hand-holding-heart" | "hand-holding-medical" | "hand-holding-usd" | "hand-holding-water" | "hand-lizard" | "hand-middle-finger" | "hand-paper" | "hand-peace" | "hand-point-down" | "hand-point-left" | "hand-point-right" | "hand-point-up" | "hand-pointer" | "hand-rock" | "hand-scissors" | "hand-sparkles" | "hand-spock" | "hands" | "hands-helping" | "hands-wash" | "handshake" | "handshake-alt-slash" | "handshake-slash" | "hanukiah" | "hard-hat" | "hashtag" | "hat-cowboy" | "hat-cowboy-side" | "hat-wizard" | "hdd" | "head-side-cough" | "head-side-cough-slash" | "head-side-mask" | "head-side-virus" | "heading" | "headphones" | "headphones-alt" | "headset" | "heart" | "heart-broken" | "heartbeat" | "helicopter" | "highlighter" | "hiking" | "hippo" | "history" | "hockey-puck" | "holly-berry" | "home" | "horse" | "horse-head" | "hospital" | "hospital-alt" | "hospital-symbol" | "hospital-user" | "hot-tub" | "hotdog" | "hotel" | "hourglass" | "hourglass-end" | "hourglass-half" | "hourglass-start" | "house-damage" | "house-user" | "hryvnia" | "i-cursor" | "ice-cream" | "icicles" | "icons" | "id-badge" | "id-card" | "id-card-alt" | "igloo" | "image" | "images" | "inbox" | "indent" | "industry" | "infinity" | "info" | "info-circle" | "italic" | "jedi" | "joint" | "journal-whills" | "kaaba" | "key" | "keyboard" | "khanda" | "kiss" | "kiss-beam" | "kiss-wink-heart" | "kiwi-bird" | "landmark" | "language" | "laptop" | "laptop-code" | "laptop-house" | "laptop-medical" | "laugh" | "laugh-beam" | "laugh-squint" | "laugh-wink" | "layer-group" | "leaf" | "lemon" | "less-than" | "less-than-equal" | "level-down-alt" | "level-up-alt" | "life-ring" | "lightbulb" | "link" | "lira-sign" | "list" | "list-alt" | "list-ol" | "list-ul" | "location-arrow" | "lock" | "lock-open" | "long-arrow-alt-down" | "long-arrow-alt-left" | "long-arrow-alt-right" | "long-arrow-alt-up" | "low-vision" | "luggage-cart" | "lungs" | "lungs-virus" | "magic" | "magnet" | "mail-bulk" | "male" | "map" | "map-marked" | "map-marked-alt" | "map-marker" | "map-marker-alt" | "map-pin" | "map-signs" | "marker" | "mars" | "mars-double" | "mars-stroke" | "mars-stroke-h" | "mars-stroke-v" | "mask" | "medal" | "medkit" | "meh" | "meh-blank" | "meh-rolling-eyes" | "memory" | "menorah" | "mercury" | "meteor" | "microchip" | "microphone" | "microphone-alt" | "microphone-alt-slash" | "microphone-slash" | "microscope" | "minus" | "minus-circle" | "minus-square" | "mitten" | "mobile" | "mobile-alt" | "money-bill" | "money-bill-alt" | "money-bill-wave" | "money-bill-wave-alt" | "money-check" | "money-check-alt" | "monument" | "moon" | "mortar-pestle" | "mosque" | "motorcycle" | "mountain" | "mouse" | "mouse-pointer" | "mug-hot" | "music" | "network-wired" | "neuter" | "newspaper" | "not-equal" | "notes-medical" | "object-group" | "object-ungroup" | "oil-can" | "om" | "otter" | "outdent" | "pager" | "paint-brush" | "paint-roller" | "palette" | "pallet" | "paper-plane" | "paperclip" | "parachute-box" | "paragraph" | "parking" | "passport" | "pastafarianism" | "paste" | "pause" | "pause-circle" | "paw" | "peace" | "pen" | "pen-alt" | "pen-fancy" | "pen-nib" | "pen-square" | "pencil-alt" | "pencil-ruler" | "people-arrows" | "people-carry" | "pepper-hot" | "percent" | "percentage" | "person-booth" | "phone" | "phone-alt" | "phone-slash" | "phone-square" | "phone-square-alt" | "phone-volume" | "photo-video" | "piggy-bank" | "pills" | "pizza-slice" | "place-of-worship" | "plane" | "plane-arrival" | "plane-departure" | "plane-slash" | "play" | "play-circle" | "plug" | "plus" | "plus-circle" | "plus-square" | "podcast" | "poll" | "poll-h" | "poo" | "poo-storm" | "poop" | "portrait" | "pound-sign" | "power-off" | "pray" | "praying-hands" | "prescription" | "prescription-bottle" | "prescription-bottle-alt" | "print" | "procedures" | "project-diagram" | "pump-medical" | "pump-soap" | "puzzle-piece" | "qrcode" | "question" | "question-circle" | "quidditch" | "quote-left" | "quote-right" | "quran" | "radiation" | "radiation-alt" | "rainbow" | "random" | "receipt" | "record-vinyl" | "recycle" | "redo" | "redo-alt" | "registered" | "remove-format" | "reply" | "reply-all" | "republican" | "restroom" | "retweet" | "ribbon" | "ring" | "road" | "robot" | "rocket" | "route" | "rss" | "rss-square" | "ruble-sign" | "ruler" | "ruler-combined" | "ruler-horizontal" | "ruler-vertical" | "running" | "rupee-sign" | "sad-cry" | "sad-tear" | "satellite" | "satellite-dish" | "save" | "school" | "screwdriver" | "scroll" | "sd-card" | "search" | "search-dollar" | "search-location" | "search-minus" | "search-plus" | "seedling" | "server" | "shapes" | "share" | "share-alt" | "share-alt-square" | "share-square" | "shekel-sign" | "shield-alt" | "shield-virus" | "ship" | "shipping-fast" | "shoe-prints" | "shopping-bag" | "shopping-basket" | "shopping-cart" | "shower" | "shuttle-van" | "sign" | "sign-in-alt" | "sign-language" | "sign-out-alt" | "signal" | "signature" | "sim-card" | "sink" | "sitemap" | "skating" | "skiing" | "skiing-nordic" | "skull" | "skull-crossbones" | "slash" | "sleigh" | "sliders-h" | "smile" | "smile-beam" | "smile-wink" | "smog" | "smoking" | "smoking-ban" | "sms" | "snowboarding" | "snowflake" | "snowman" | "snowplow" | "soap" | "socks" | "solar-panel" | "sort" | "sort-alpha-down" | "sort-alpha-down-alt" | "sort-alpha-up" | "sort-alpha-up-alt" | "sort-amount-down" | "sort-amount-down-alt" | "sort-amount-up" | "sort-amount-up-alt" | "sort-down" | "sort-numeric-down" | "sort-numeric-down-alt" | "sort-numeric-up" | "sort-numeric-up-alt" | "sort-up" | "spa" | "space-shuttle" | "spell-check" | "spider" | "spinner" | "splotch" | "spray-can" | "square" | "square-full" | "square-root-alt" | "stamp" | "star" | "star-and-crescent" | "star-half" | "star-half-alt" | "star-of-david" | "star-of-life" | "step-backward" | "step-forward" | "stethoscope" | "sticky-note" | "stop" | "stop-circle" | "stopwatch" | "stopwatch-20" | "store" | "store-alt" | "store-alt-slash" | "store-slash" | "stream" | "street-view" | "strikethrough" | "stroopwafel" | "subscript" | "subway" | "suitcase" | "suitcase-rolling" | "sun" | "superscript" | "surprise" | "swatchbook" | "swimmer" | "swimming-pool" | "synagogue" | "sync" | "sync-alt" | "syringe" | "table" | "table-tennis" | "tablet" | "tablet-alt" | "tablets" | "tachometer-alt" | "tag" | "tags" | "tape" | "tasks" | "taxi" | "teeth" | "teeth-open" | "temperature-high" | "temperature-low" | "tenge" | "terminal" | "text-height" | "text-width" | "th" | "th-large" | "th-list" | "theater-masks" | "thermometer" | "thermometer-empty" | "thermometer-full" | "thermometer-half" | "thermometer-quarter" | "thermometer-three-quarters" | "thumbs-down" | "thumbs-up" | "thumbtack" | "ticket-alt" | "times" | "times-circle" | "tint" | "tint-slash" | "tired" | "toggle-off" | "toggle-on" | "toilet" | "toilet-paper" | "toilet-paper-slash" | "toolbox" | "tools" | "tooth" | "torah" | "torii-gate" | "tractor" | "trademark" | "traffic-light" | "trailer" | "train" | "tram" | "transgender" | "transgender-alt" | "trash" | "trash-alt" | "trash-restore" | "trash-restore-alt" | "tree" | "trophy" | "truck" | "truck-loading" | "truck-monster" | "truck-moving" | "truck-pickup" | "tshirt" | "tty" | "tv" | "umbrella" | "umbrella-beach" | "underline" | "undo" | "undo-alt" | "universal-access" | "university" | "unlink" | "unlock" | "unlock-alt" | "upload" | "user" | "user-alt" | "user-alt-slash" | "user-astronaut" | "user-check" | "user-circle" | "user-clock" | "user-cog" | "user-edit" | "user-friends" | "user-graduate" | "user-injured" | "user-lock" | "user-md" | "user-minus" | "user-ninja" | "user-nurse" | "user-plus" | "user-secret" | "user-shield" | "user-slash" | "user-tag" | "user-tie" | "user-times" | "users" | "users-cog" | "users-slash" | "utensil-spoon" | "utensils" | "vector-square" | "venus" | "venus-double" | "venus-mars" | "vest" | "vest-patches" | "vial" | "vials" | "video" | "video-slash" | "vihara" | "virus" | "virus-slash" | "viruses" | "voicemail" | "volleyball-ball" | "volume-down" | "volume-mute" | "volume-off" | "volume-up" | "vote-yea" | "vr-cardboard" | "walking" | "wallet" | "warehouse" | "water" | "wave-square" | "weight" | "weight-hanging" | "wheelchair" | "wifi" | "wind" | "window-close" | "window-maximize" | "window-minimize" | "window-restore" | "wine-bottle" | "wine-glass" | "wine-glass-alt" | "won-sign" | "wrench" | "x-ray" | "yen-sign" | "yin-yang";
    export interface IconElement extends ControlElement {
        name?: IconName;
        fill?: Types.Color;
        image?: ImageElement;
        spin?: boolean;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-icon']: IconElement;
            }
        }
    }
    export class Icon extends Control {
        private svgElm;
        private _name;
        private _size;
        private _image;
        private _spin;
        private _fill;
        constructor(parent?: Control, options?: any);
        protected init(): void;
        get fill(): Types.Color;
        set fill(color: Types.Color);
        get name(): IconName;
        set name(value: IconName);
        get image(): Image;
        set image(image: Image);
        get spin(): boolean;
        set spin(value: boolean);
        private _updateIcon;
        static create(options?: IconElement, parent?: Control): Promise<Icon>;
    }
}
/// <amd-module name="@ijstech/icon" />
declare module "@ijstech/icon" {
    export { IconName, Icon, IconElement } from "@ijstech/icon/icon.ts";
}
/// <amd-module name="@ijstech/combo-box/style/combo-box.css.ts" />
declare module "@ijstech/combo-box/style/combo-box.css.ts" {
    export let ItemListStyle: string;
}
/// <amd-module name="@ijstech/combo-box/combo-box-item.ts" />
declare module "@ijstech/combo-box/combo-box-item.ts" {
    import { Control, ControlElement } from "@ijstech/base";
    export interface ComboBoxItemElement extends ControlElement {
        value?: string;
        label?: string;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-combo-box-item"]: ComboBoxItemElement;
            }
        }
    }
    export class ComboBoxItem extends Control {
        private _value;
        private _label;
        get value(): string;
        set value(data: string);
        get label(): string;
        set label(data: string);
        init(): void;
        static create(options?: ComboBoxItemElement, parent?: Control): Promise<ComboBoxItem>;
    }
}
/// <amd-module name="@ijstech/combo-box/combo-box.ts" />
declare module "@ijstech/combo-box/combo-box.ts" {
    import { Control, ControlElement, notifyEventCallback, IBorder, Border, IFont, IBackground, Background, I18n } from "@ijstech/base";
    import { Icon, IconElement } from "@ijstech/icon";
    import "@ijstech/combo-box/style/combo-box.css.ts";
    export interface IComboItem {
        value: string;
        label: string;
        isNew?: boolean;
        description?: string;
        icon?: string;
    }
    type ModeType = 'single' | 'multiple' | 'tags';
    export interface ComboBoxElement extends ControlElement {
        value?: string;
        selectedItem?: IComboItem;
        selectedItems?: IComboItem[];
        items?: IComboItem[];
        icon?: IconElement;
        mode?: ModeType;
        readOnly?: boolean;
        placeholder?: string;
        onChanged?: notifyEventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-combo-box"]: ComboBoxElement;
            }
        }
    }
    export class ComboBox extends Control {
        private _value;
        private _selectedItem;
        private _selectedItems;
        private _caption;
        private _captionWidth;
        private _items;
        private _icon;
        private _mode;
        private _readOnly;
        private _placeholder;
        private _searchStr;
        private newItem;
        private isListShown;
        private captionSpanElm;
        private labelElm;
        private inputWrapElm;
        private inputElm;
        private iconElm;
        private listElm;
        private callback;
        onChanged: notifyEventCallback;
        constructor(parent?: Control, options?: any);
        get value(): string | undefined;
        set value(value: string | undefined);
        get selectedItem(): IComboItem | undefined;
        set selectedItem(value: IComboItem | undefined);
        get selectedItems(): IComboItem[] | undefined;
        set selectedItems(value: IComboItem[] | undefined);
        private renderSelectedItems;
        private renderInvalidItems;
        private updateItems;
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        get captionWidth(): number | string;
        set captionWidth(value: number | string);
        get items(): IComboItem[];
        set items(items: IComboItem[]);
        get icon(): Icon;
        set icon(value: Icon);
        get searchStr(): string;
        set searchStr(str: string);
        get placeholder(): string;
        set placeholder(value: string);
        private getTranslatedText;
        get mode(): ModeType;
        set mode(value: ModeType);
        get isMulti(): boolean;
        set border(value: IBorder);
        get border(): Border;
        get enabled(): boolean;
        set enabled(value: boolean);
        get readOnly(): boolean;
        set readOnly(value: boolean);
        get background(): Background;
        set background(value: IBackground);
        get font(): IFont;
        set font(value: IFont);
        private isValueValid;
        private getItemIndex;
        private openList;
        calculatePositon(): void;
        private closeList;
        private toggleList;
        private escapeRegExp;
        private renderItems;
        private add;
        private handleRemove;
        private onItemClick;
        clear(): void;
        protected init(): void;
        disconnectedCallback(): void;
        static create(options?: ComboBoxElement, parent?: Control): Promise<ComboBox>;
    }
}
/// <amd-module name="@ijstech/combo-box" />
declare module "@ijstech/combo-box" {
    export { ComboBox, ComboBoxElement, IComboItem } from "@ijstech/combo-box/combo-box.ts";
    export { ComboBoxItem, ComboBoxItemElement } from "@ijstech/combo-box/combo-box-item.ts";
}
/// <amd-module name="@ijstech/datepicker/style/datepicker.css.ts" />
declare module "@ijstech/datepicker/style/datepicker.css.ts" { }
/// <amd-module name="@ijstech/datepicker/datepicker.ts" />
declare module "@ijstech/datepicker/datepicker.ts" {
    import { ControlElement, Control, notifyEventCallback, IBorder, Border, I18n } from '@ijstech/base';
    import "@ijstech/datepicker/style/datepicker.css.ts";
    import { Moment } from '@ijstech/moment';
    type actionCallback = (target: Datepicker) => void;
    type dateType = 'date' | 'dateTime' | 'time';
    export interface DatepickerElement extends ControlElement {
        caption?: string;
        captionWidth?: number | string;
        value?: Moment;
        valueFormat?: string;
        minDate?: Moment;
        placeholder?: string;
        type?: dateType;
        dateTimeFormat?: string;
        onChanged?: notifyEventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-datepicker']: DatepickerElement;
            }
        }
    }
    export class Datepicker extends Control {
        private _value?;
        private _valueFormat;
        private _caption;
        private _captionWidth;
        private _iconWidth;
        private _dateTimeFormat;
        private _type;
        private _placeholder;
        private _minDate?;
        private callback;
        private _isInternalUpdate;
        private captionSpanElm;
        private labelElm;
        private inputElm;
        private toggleElm;
        private toggleIconElm;
        private datepickerElm;
        onChanged: notifyEventCallback;
        onBlur: actionCallback;
        constructor(parent?: Control, options?: any);
        _handleClick(event: MouseEvent): boolean;
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        get captionWidth(): number;
        set captionWidth(value: number | string);
        get height(): number;
        set height(value: number | string);
        get width(): number;
        set width(value: number | string);
        set border(value: IBorder);
        get border(): Border;
        get value(): Moment | undefined;
        set value(value: Moment | undefined);
        get minDate(): Moment | undefined;
        set minDate(value: Moment | undefined);
        get defaultDateTimeFormat(): string;
        get dateTimeFormat(): string;
        set dateTimeFormat(format: string);
        get datepickerFormat(): string;
        get maxLength(): number;
        get enabled(): boolean;
        set enabled(value: boolean);
        get placeholder(): string;
        set placeholder(value: string);
        private getTranslatedText;
        get type(): dateType;
        set type(value: dateType);
        set designMode(value: boolean);
        get valueFormat(): string;
        set valueFormat(value: string);
        private get formatString();
        private emitChange;
        private _onDatePickerChange;
        private _onBlur;
        private updateValue;
        private clear;
        protected init(): void;
        protected _handleBlur(event: Event, stopPropagation?: boolean): boolean;
        static create(options?: DatepickerElement, parent?: Control): Promise<Datepicker>;
    }
}
/// <amd-module name="@ijstech/datepicker" />
declare module "@ijstech/datepicker" {
    export { Datepicker, DatepickerElement } from "@ijstech/datepicker/datepicker.ts";
}
/// <amd-module name="@ijstech/range/style/range.css.ts" />
declare module "@ijstech/range/style/range.css.ts" { }
/// <amd-module name="@ijstech/range/range.ts" />
declare module "@ijstech/range/range.ts" {
    import { Control, ControlElement, notifyEventCallback, Types, I18n } from '@ijstech/base';
    import "@ijstech/range/style/range.css.ts";
    type tooltipFormatterCallback = (value: number) => string;
    export interface RangeElement extends ControlElement {
        caption?: string;
        captionWidth?: number | string;
        value?: number;
        min?: number;
        max?: number;
        step?: number;
        stepDots?: boolean | number;
        tooltipFormatter?: tooltipFormatterCallback;
        tooltipVisible?: boolean;
        trackColor?: Types.Color;
        onChanged?: notifyEventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-range']: RangeElement;
            }
        }
    }
    export class Range extends Control {
        private _value;
        private _caption;
        private _captionWidth;
        private _tooltipVisible;
        private _trackColor;
        private tooltipFormatter;
        private captionSpanElm;
        private labelElm;
        private inputElm;
        private inputContainerElm;
        private tooltipElm;
        onChanged: notifyEventCallback;
        onKeyUp: notifyEventCallback;
        private callback;
        constructor(parent?: Control, options?: any);
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        get captionWidth(): number;
        set captionWidth(value: number | string);
        get value(): number;
        set value(value: number);
        get width(): number;
        set width(value: number | string);
        get enabled(): boolean;
        set enabled(value: boolean);
        set designMode(value: boolean);
        get tooltipVisible(): boolean;
        set tooltipVisible(value: boolean);
        get trackColor(): Types.Color;
        set trackColor(value: Types.Color);
        get min(): number;
        set min(value: number);
        get max(): number;
        set max(value: number);
        get step(): number;
        set step(value: number);
        private onSliderChange;
        private onUpdateTooltip;
        protected init(): void;
        static create(options?: RangeElement, parent?: Control): Promise<Range>;
    }
}
/// <amd-module name="@ijstech/range" />
declare module "@ijstech/range" {
    export { Range, RangeElement } from "@ijstech/range/range.ts";
}
/// <amd-module name="@ijstech/radio/radio.css.ts" />
declare module "@ijstech/radio/radio.css.ts" {
    export const captionStyle: string;
}
/// <amd-module name="@ijstech/radio/radio.ts" />
declare module "@ijstech/radio/radio.ts" {
    import { Control, ControlElement, notifyEventCallback, IFont, I18n } from '@ijstech/base';
    export interface RadioElement extends ControlElement {
        caption?: string;
        captionWidth?: number | string;
        value?: string;
    }
    export type RadioGroupLayout = 'vertical' | 'horizontal';
    export interface RadioGroupElement extends ControlElement {
        layout?: RadioGroupLayout;
        selectedValue?: string;
        radioItems?: RadioElement[];
        onChanged?: notifyEventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-radio-group']: RadioGroupElement;
                ['i-radio']: RadioElement;
            }
        }
    }
    export class Radio extends Control {
        private _value;
        private _caption;
        private _captionWidth;
        private labelElm;
        private inputElm;
        private captionSpanElm;
        constructor(parent?: Control, options?: any);
        get value(): string;
        set value(value: string);
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        get captionWidth(): number | string;
        set captionWidth(value: number | string);
        set font(value: IFont);
        get font(): IFont;
        add(item: Control): Control;
        _handleClick(event: MouseEvent): boolean;
        protected init(): void;
        static create(options?: RadioElement, parent?: Control): Promise<Radio>;
    }
    export class RadioGroup extends Control {
        private _selectedValue;
        private _radioItems;
        private _layout;
        private _group;
        private name;
        onChanged: notifyEventCallback;
        constructor(parent?: Control, options?: any);
        get selectedValue(): string;
        set selectedValue(value: string);
        get radioItems(): RadioElement[];
        set radioItems(value: RadioElement[]);
        get layout(): RadioGroupLayout;
        set layout(value: RadioGroupLayout);
        private renderUI;
        private appendItem;
        private _handleChange;
        add(options: RadioElement): Radio;
        delete(index: number): void;
        protected init(): void;
        static create(options?: RadioGroupElement, parent?: Control): Promise<RadioGroup>;
    }
}
/// <amd-module name="@ijstech/radio" />
declare module "@ijstech/radio" {
    export { Radio, RadioElement, RadioGroup, RadioGroupElement, RadioGroupLayout } from "@ijstech/radio/radio.ts";
}
/// <amd-module name="@ijstech/modal/style/modal.css.ts" />
declare module "@ijstech/modal/style/modal.css.ts" {
    import { IModalMediaQuery } from "@ijstech/modal/modal.ts";
    export const getOverlayStyle: () => string;
    export const getWrapperStyle: () => string;
    export const getNoBackdropStyle: () => string;
    export const getFixedWrapperStyle: (paddingLeft: string, paddingTop: string) => string;
    export const getAbsoluteWrapperStyle: (left: string, top: string) => string;
    export const getModalStyle: (left: string, top: string) => string;
    export const modalStyle: string;
    export const getBodyStyle: string;
    export const titleStyle: string;
    export const getModalMediaQueriesStyleClass: (mediaQueries: IModalMediaQuery[]) => string;
}
/// <amd-module name="@ijstech/modal/modal.ts" />
declare module "@ijstech/modal/modal.ts" {
    import { Control, ControlElement, Container, IBackground, IBorder, Background, Border, IMediaQuery, IControlMediaQueryProps, ISpace, Overflow, IOverflow, OverflowType, I18n } from '@ijstech/base';
    import { Icon, IconElement } from '@ijstech/icon';
    export type ModalPopupPlacementType = 'center' | 'bottom' | 'bottomLeft' | 'bottomRight' | 'top' | 'topLeft' | 'topRight' | 'rightTop' | 'left' | 'right';
    type eventCallback = (target: Control) => void;
    type ModalPositionType = "fixed" | "absolute";
    export interface IModalMediaQueryProps extends IControlMediaQueryProps {
        showBackdrop?: boolean;
        popupPlacement?: 'center' | 'bottom' | 'top';
        position?: ModalPositionType;
    }
    export type IModalMediaQuery = IMediaQuery<IModalMediaQueryProps>;
    export interface ModalElement extends ControlElement {
        title?: string;
        showBackdrop?: boolean;
        closeIcon?: IconElement;
        popupPlacement?: ModalPopupPlacementType;
        closeOnBackdropClick?: boolean;
        isChildFixed?: boolean;
        closeOnScrollChildFixed?: boolean;
        item?: Control;
        mediaQueries?: IModalMediaQuery[];
        onOpen?: eventCallback;
        onClose?: eventCallback;
        onBeforeClose?: eventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-modal']: ModalElement;
            }
        }
    }
    export class Modal extends Container {
        protected _visible: boolean;
        private wrapperDiv;
        private titleSpan;
        private modalDiv;
        private bodyDiv;
        private overlayDiv;
        private _closeIcon;
        private _placement;
        private _closeOnBackdropClick;
        private _showBackdrop;
        private _wrapperPositionAt;
        private _isChildFixed;
        private _closeOnScrollChildFixed;
        private _mediaQueries;
        private _title;
        private hasInitializedChildFixed;
        private mapScrollTop;
        private insideClick;
        private boundHandleModalMouseDown;
        private boundHandleModalMouseUp;
        protected _onOpen: eventCallback;
        onClose: eventCallback;
        onBeforeClose: eventCallback;
        constructor(parent?: Control, options?: any);
        get visible(): boolean;
        set visible(value: boolean);
        get onOpen(): any;
        set onOpen(callback: any);
        get title(): string;
        set title(value: string);
        updateLocale(i18n: I18n): void;
        private getTranslatedText;
        get popupPlacement(): ModalPopupPlacementType;
        set popupPlacement(value: ModalPopupPlacementType);
        get closeIcon(): Icon | null;
        set closeIcon(elm: Icon | null);
        get closeOnBackdropClick(): boolean;
        set closeOnBackdropClick(value: boolean);
        get showBackdrop(): boolean;
        set showBackdrop(value: boolean);
        private updateNoBackdropMd;
        get item(): Control;
        set item(value: Control);
        get body(): Control;
        set body(value: Control);
        get position(): ModalPositionType;
        set position(value: ModalPositionType);
        get isChildFixed(): boolean;
        set isChildFixed(value: boolean);
        get closeOnScrollChildFixed(): boolean;
        set closeOnScrollChildFixed(value: boolean);
        get mediaQueries(): IModalMediaQuery[];
        set mediaQueries(value: IModalMediaQuery[]);
        private setChildFixed;
        private positionAtChildFixed;
        private getWrapperParent;
        private positionAt;
        private positionAtFix;
        private positionAtAbsolute;
        private getWrapperFixCoords;
        private getWrapperOffsets;
        private getWrapperAbsoluteCoords;
        protected _handleOnShow(event: Event): void;
        private handleModalMouseDown;
        private handleModalMouseUp;
        private setInsideClick;
        private updateModal;
        refresh(): void;
        get background(): Background;
        set background(value: IBackground);
        get width(): number | string;
        set width(value: number | string);
        get height(): number | string;
        set height(value: number | string);
        get border(): Border;
        set border(value: IBorder);
        get padding(): ISpace;
        set padding(value: ISpace);
        get boxShadow(): string;
        set boxShadow(value: string);
        get overflow(): Overflow;
        set overflow(value: OverflowType | IOverflow);
        protected removeTargetStyle(target: HTMLElement, propertyName: string): void;
        protected setTargetStyle(target: HTMLElement, propertyName: string, value: string): void;
        protected init(): void;
        static create(options?: ModalElement, parent?: Container): Promise<Modal>;
    }
}
/// <amd-module name="@ijstech/modal" />
declare module "@ijstech/modal" {
    export { Modal, ModalElement, ModalPopupPlacementType } from "@ijstech/modal/modal.ts";
}
/// <amd-module name="@ijstech/layout/interfaces.ts" />
declare module "@ijstech/layout/interfaces.ts" {
    export interface IHover {
        opacity?: number;
        backgroundColor?: string;
        fontColor?: string;
    }
}
/// <amd-module name="@ijstech/layout/style/panel.css.ts" />
declare module "@ijstech/layout/style/panel.css.ts" {
    import { IGridLayoutMediaQuery, IStackMediaQuery, StackDirectionType } from "@ijstech/layout";
    import { IHover } from "@ijstech/layout/interfaces.ts";
    export const panelStyle: string;
    export const overflowStyle: string;
    export const vStackStyle: string;
    export const hStackStyle: string;
    export const gridStyle: string;
    export const getStackDirectionStyleClass: (direction: StackDirectionType, reverse: boolean) => string;
    export const getStackMediaQueriesStyleClass: (mediaQueries: IStackMediaQuery[], currentDirection: StackDirectionType) => string;
    export const justifyContentStartStyle: string;
    export const justifyContentCenterStyle: string;
    export const justifyContentEndStyle: string;
    export const justifyContentSpaceBetweenStyle: string;
    export const justifyContentSpaceAroundStyle: string;
    export const justifyContentSpaceEvenlyStyle: string;
    export const alignItemsStretchStyle: string;
    export const alignItemsBaselineStyle: string;
    export const alignItemsStartStyle: string;
    export const alignItemsCenterStyle: string;
    export const alignItemsEndStyle: string;
    export const alignSelfAutoStyle: string;
    export const alignSelfStretchStyle: string;
    export const alignSelfStartStyle: string;
    export const alignSelfCenterStyle: string;
    export const alignSelfEndStyle: string;
    export const alignContentSpaceBetweenStyle: string;
    export const alignContentSpaceAroundStyle: string;
    export const alignContentStretchStyle: string;
    export const alignContentStartStyle: string;
    export const alignContentCenterStyle: string;
    export const alignContentEndStyle: string;
    export const getTemplateColumnsStyleClass: (columns: string[]) => string;
    export const getTemplateRowsStyleClass: (rows: string[]) => string;
    export const getTemplateAreasStyleClass: (templateAreas: string[][]) => string;
    export const getGridLayoutMediaQueriesStyleClass: (mediaQueries: IGridLayoutMediaQuery[]) => string;
    export const getHoverStyleClass: (hover: IHover) => string;
}
/// <amd-module name="@ijstech/layout/stack.ts" />
declare module "@ijstech/layout/stack.ts" {
    import { Container, ContainerElement, IMediaQuery, IControlMediaQueryProps } from '@ijstech/base';
    import { IHover } from "@ijstech/layout/interfaces.ts";
    export interface IStackMediaQueryProps extends IControlMediaQueryProps {
        direction?: StackDirectionType;
        gap?: number | string;
        justifyContent?: StackJustifyContentType;
        alignItems?: StackAlignItemsType;
        alignSelf?: StackAlignSelfType;
        reverse?: boolean;
    }
    export type IStackMediaQuery = IMediaQuery<IStackMediaQueryProps>;
    export type StackWrapType = 'nowrap' | 'wrap' | 'wrap-reverse' | 'initial' | 'inherit';
    export type StackDirectionType = 'horizontal' | 'vertical';
    export type StackJustifyContentType = "start" | "center" | "end" | "space-between" | "space-around" | "space-evenly";
    export type StackAlignItemsType = "stretch" | "start" | "center" | "end" | "baseline";
    export type StackAlignSelfType = "auto" | "stretch" | "start" | "center" | "end";
    export type StackAlignContentType = "auto" | "stretch" | "start" | "center" | "end" | "space-between" | "space-around" | "space-evenly";
    export interface StackLayoutElement extends ContainerElement {
        gap?: number | string;
        wrap?: StackWrapType;
        direction?: StackDirectionType;
        justifyContent?: StackJustifyContentType;
        alignItems?: StackAlignItemsType;
        alignSelf?: StackAlignSelfType;
        alignContent?: StackAlignSelfType;
        reverse?: boolean;
        mediaQueries?: IStackMediaQuery[];
        hover?: IHover;
    }
    export type HStackHAlignmentType = StackJustifyContentType;
    export type HStackVAlignmentType = StackAlignItemsType;
    export type VStackHAlignmentType = StackAlignItemsType;
    export type VStackVAlignmentType = StackJustifyContentType;
    export interface HStackElement extends StackLayoutElement {
        horizontalAlignment?: HStackHAlignmentType;
        verticalAlignment?: HStackVAlignmentType;
    }
    export interface VStackElement extends StackLayoutElement {
        horizontalAlignment?: VStackHAlignmentType;
        verticalAlignment?: VStackVAlignmentType;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-stack']: StackLayoutElement;
            }
        }
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-hstack']: HStackElement;
            }
        }
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-vstack']: VStackElement;
            }
        }
    }
    export type StackLayoutAlignmentType<T extends StackDirectionType> = T extends 'horizontal' ? HStackHAlignmentType : VStackHAlignmentType;
    export type StackVerticalAlignmentType<T extends StackDirectionType> = T extends 'horizontal' ? HStackVAlignmentType : VStackVAlignmentType;
    export class StackLayout extends Container {
        private _gap;
        private _wrap;
        private _direction;
        private _reverse;
        private _justifyContent;
        private _alignItems;
        private _alignSelf;
        private _alignContent;
        private _mediaQueries;
        private _hover;
        constructor(parent?: Container, options?: any);
        static create(options?: StackLayoutElement, parent?: Container): Promise<StackLayout>;
        get direction(): StackDirectionType;
        set direction(value: StackDirectionType);
        get reverse(): boolean;
        set reverse(value: boolean);
        get justifyContent(): StackJustifyContentType;
        set justifyContent(value: StackJustifyContentType);
        get alignItems(): StackAlignItemsType;
        set alignItems(value: StackAlignItemsType);
        get alignSelf(): StackAlignSelfType;
        set alignSelf(value: StackAlignSelfType);
        get alignContent(): StackAlignContentType;
        set alignContent(value: StackAlignContentType);
        get gap(): number | string;
        set gap(value: number | string);
        get wrap(): StackWrapType;
        set wrap(value: StackWrapType);
        get mediaQueries(): IStackMediaQuery[];
        set mediaQueries(value: IStackMediaQuery[]);
        get hover(): IHover;
        set hover(value: IHover);
        protected removeStyle<P extends keyof StackLayout>(propertyName: P): void;
        protected setStyle<P extends keyof StackLayout>(propertyName: P, value: string): void;
        protected init(): void;
    }
    export class HStack extends StackLayout {
        private _horizontalAlignment;
        private _verticalAlignment;
        constructor(parent?: Container, options?: any);
        get horizontalAlignment(): HStackHAlignmentType;
        set horizontalAlignment(value: HStackHAlignmentType);
        get verticalAlignment(): HStackVAlignmentType;
        set verticalAlignment(value: HStackVAlignmentType);
        protected init(): void;
        static create(options?: HStackElement, parent?: Container): Promise<HStack>;
    }
    export class VStack extends StackLayout {
        private _horizontalAlignment;
        private _verticalAlignment;
        constructor(parent?: Container, options?: any);
        get horizontalAlignment(): VStackHAlignmentType;
        set horizontalAlignment(value: VStackHAlignmentType);
        get verticalAlignment(): VStackVAlignmentType;
        set verticalAlignment(value: VStackVAlignmentType);
        init(): void;
        static create(options?: VStackElement, parent?: Container): Promise<VStack>;
    }
}
/// <amd-module name="@ijstech/layout/panel.ts" />
declare module "@ijstech/layout/panel.ts" {
    import { Control, Container, ContainerElement } from '@ijstech/base';
    import { IHover } from "@ijstech/layout/interfaces.ts";
    export interface PanelElement extends ContainerElement {
        hover?: IHover;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-panel']: PanelElement;
            }
        }
    }
    export class Panel extends Container {
        private _hover;
        constructor(parent?: Control, options?: any);
        get hover(): IHover;
        set hover(value: IHover);
        protected removeStyle<P extends keyof Panel>(propertyName: P): void;
        protected setStyle<P extends keyof Panel>(propertyName: P, value: string): void;
        protected init(): void;
        connectedCallback(): void;
        static create(options?: PanelElement, parent?: Control): Promise<Panel>;
    }
}
/// <amd-module name="@ijstech/layout/grid.ts" />
declare module "@ijstech/layout/grid.ts" {
    import { Control, ControlElement, Container, IMediaQuery, DisplayType, IBackground, IControlMediaQueryProps } from '@ijstech/base';
    export interface IGap {
        row?: string | number;
        column?: string | number;
    }
    export interface IGridLayoutMediaQueryProps extends IControlMediaQueryProps {
        templateColumns?: string[];
        templateRows?: string[];
        templateAreas?: string[][];
        justifyContent?: GridLayoutJustifyContentType;
        display?: DisplayType;
        gap?: IGap;
        background?: IBackground;
    }
    export type IGridLayoutMediaQuery = IMediaQuery<IGridLayoutMediaQueryProps>;
    export type GridLayoutHorizontalAlignmentType = "stretch" | "start" | "end" | "center";
    export type GridLayoutJustifyContentType = "start" | "center" | "end" | "space-between" | "space-around" | "space-evenly";
    export type GridLayoutVerticalAlignmentType = "stretch" | "start" | "end" | "center" | "baseline";
    export type GridLayoutAutoFlowType = "row" | "column" | "dense" | "initial" | "inherit" | "unset";
    export interface GridLayoutElement extends ControlElement {
        autoColumnSize?: string;
        autoFillInHoles?: boolean;
        autoFlow?: GridLayoutAutoFlowType;
        autoRowSize?: string;
        columnsPerRow?: number;
        gap?: IGap;
        horizontalAlignment?: GridLayoutHorizontalAlignmentType;
        justifyContent?: GridLayoutJustifyContentType;
        mediaQueries?: IGridLayoutMediaQuery[];
        templateAreas?: string[][];
        templateColumns?: string[];
        templateRows?: string[];
        verticalAlignment?: GridLayoutVerticalAlignmentType;
    }
    export const gridSchemaProps: any;
    export const gridProps: any;
    export class GridLayout extends Container {
        private _templateColumns;
        private _templateRows;
        private _templateAreas;
        private _autoColumnSize;
        private _autoRowSize;
        protected _columnsPerRow: number;
        private _gap;
        private _horizontalAlignment;
        private _verticalAlignment;
        private _autoFillInHoles;
        private _autoFlow;
        private _mediaQueries;
        private _styleClassMap;
        private _justifyContent;
        constructor(parent?: Control, options?: any);
        static create(options?: GridLayoutElement, parent?: Container): Promise<GridLayout>;
        get templateColumns(): string[];
        set templateColumns(columns: string[]);
        get templateRows(): string[];
        set templateRows(rows: string[]);
        get templateAreas(): string[][];
        set templateAreas(value: string[][]);
        get autoColumnSize(): string;
        set autoColumnSize(value: string);
        get autoRowSize(): string;
        set autoRowSize(value: string);
        get columnsPerRow(): number;
        set columnsPerRow(value: number);
        get gap(): IGap;
        set gap(value: IGap);
        get horizontalAlignment(): GridLayoutHorizontalAlignmentType;
        set horizontalAlignment(value: GridLayoutHorizontalAlignmentType);
        protected removeStyle<P extends keyof GridLayout>(propertyName: P): void;
        protected setStyle<P extends keyof GridLayout>(propertyName: P, value: string): void;
        get justifyContent(): GridLayoutJustifyContentType;
        set justifyContent(value: GridLayoutJustifyContentType);
        get verticalAlignment(): GridLayoutVerticalAlignmentType;
        set verticalAlignment(value: GridLayoutVerticalAlignmentType);
        get autoFillInHoles(): boolean;
        set autoFillInHoles(value: boolean);
        get autoFlow(): GridLayoutAutoFlowType;
        set autoFlow(value: GridLayoutAutoFlowType);
        get mediaQueries(): IGridLayoutMediaQuery[];
        set mediaQueries(value: IGridLayoutMediaQuery[]);
        protected setAttributeToProperty<P extends keyof GridLayout>(propertyName: P): void;
        protected removeStyleClass(name: string): void;
        protected init(): void;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-grid-layout']: GridLayoutElement;
            }
        }
    }
}
/// <amd-module name="@ijstech/layout/card.ts" />
declare module "@ijstech/layout/card.ts" {
    import { Container } from '@ijstech/base';
    import { GridLayout, GridLayoutElement } from "@ijstech/layout/grid.ts";
    export interface CardLayoutElement extends GridLayoutElement {
        cardMinWidth?: number | string;
        cardHeight?: number | string;
    }
    export class CardLayout extends GridLayout {
        private _cardMinWidth;
        private _cardHeight;
        constructor(parent?: Container, options?: any);
        static create(options?: CardLayoutElement, parent?: Container): Promise<CardLayout>;
        get cardMinWidth(): number | string;
        set cardMinWidth(value: number | string);
        get columnsPerRow(): number;
        set columnsPerRow(value: number);
        get cardHeight(): number | string;
        set cardHeight(value: number | string);
        updateGridTemplateColumns(): void;
        protected setAttributeToProperty<P extends keyof CardLayout>(propertyName: P): void;
        protected init(): void;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-card-layout']: CardLayoutElement;
            }
        }
    }
}
/// <amd-module name="@ijstech/layout" />
declare module "@ijstech/layout" {
    export { StackDirectionType, StackLayout, VStack, VStackElement, HStack, HStackElement, IStackMediaQuery, StackAlignItemsType, StackJustifyContentType } from "@ijstech/layout/stack.ts";
    export { Panel, PanelElement } from "@ijstech/layout/panel.ts";
    export { CardLayout, CardLayoutElement } from "@ijstech/layout/card.ts";
    export { IGridLayoutMediaQuery, GridLayout, GridLayoutElement } from "@ijstech/layout/grid.ts";
}
/// <amd-module name="@ijstech/color/utils.ts" />
declare module "@ijstech/color/utils.ts" {
    export function stringToArr(color: string, isRgb: boolean): string[];
    export function hslaToHex(h: number, s: number, l: number, a: number): string;
    export function rgbToHex(rgba: string[]): string;
    export function hslaToRgba(h: number, s: number, l: number): {
        r: any;
        g: any;
        b: any;
    };
    export function rgbaToHsla(r: number, g: number, b: number): {
        h: number;
        s: number;
        l: number;
    };
    export function getUnitValues(h: number, s: number, l: number, a: number): {
        hex: string;
        isValid: boolean;
        r: any;
        g: any;
        b: any;
        h: number;
        s: number;
        l: number;
        a: number;
    };
    export function convertColor(color: string): any;
    export function isRgbValid(value: string): boolean;
    export function isHValid(value: string): boolean;
    export function isPercentValid(value: string): boolean;
    export function customRound(value: number, threshold: number): number;
    export function hsvToHsl(h: number, s: number, v: number): {
        h: number;
        s: number;
        l: number;
    };
    export function hslToHsv(h: number, s: number, l: number): {
        h: number;
        s: number;
        v: number;
    };
}
/// <amd-module name="@ijstech/color/style/color.css.ts" />
declare module "@ijstech/color/style/color.css.ts" { }
/// <amd-module name="@ijstech/color/color.ts" />
declare module "@ijstech/color/color.ts" {
    import { ControlElement, Control, notifyEventCallback, I18n } from '@ijstech/base';
    import "@ijstech/color/style/color.css.ts";
    export interface ColorPickerElement extends ControlElement {
        value?: string;
        caption?: string;
        captionWidth?: number | string;
        onChanged?: notifyEventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-color']: ColorPickerElement;
            }
        }
    }
    export class ColorPicker extends Control {
        private wrapperElm;
        private inputSpanElm;
        private captionSpanElm;
        private mdColorPicker;
        private colorPalette;
        private colorSlider;
        private pnlShown;
        private pnlWrap;
        private pnlInput;
        private colorSelected;
        private _caption;
        private _captionWidth;
        private _format;
        private inputMap;
        private currentH;
        private currentColor;
        private currentPalette;
        private isMousePressed;
        private isValueChanged;
        onChanged: notifyEventCallback;
        onClosed: () => void;
        constructor(parent?: Control, options?: any);
        get value(): string;
        set value(color: string);
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        get captionWidth(): number | string;
        set captionWidth(value: number | string);
        get height(): number;
        set height(value: number | string);
        protected init(): Promise<void>;
        private onOpenPicker;
        private onClosePicker;
        private createInputGroup;
        private createPreview;
        protected _handleMouseDown(event: MouseEvent): boolean;
        private handleMouseMove;
        private handleMouseUp;
        private createPicker;
        private activeEyeDropper;
        private onPaletteChanged;
        private onSliderChanged;
        private onToggleFormat;
        private updateIconPointer;
        private onColorSelected;
        private updateColor;
        private updateCurrentColor;
        private updateHex;
        private updateUI;
        private initUI;
        private setPalette;
        private onInputChanged;
        static create(options?: ColorPickerElement, parent?: Control): Promise<ColorPicker>;
    }
}
/// <amd-module name="@ijstech/color" />
declare module "@ijstech/color" {
    export { ColorPicker, ColorPickerElement } from "@ijstech/color/color.ts";
}
/// <amd-module name="@ijstech/input/style/input.css.ts" />
declare module "@ijstech/input/style/input.css.ts" { }
/// <amd-module name="@ijstech/input/input.ts" />
declare module "@ijstech/input/input.ts" {
    import { Control, ControlElement, notifyEventCallback, IBorder, Border, IBackground, Background, IFont, I18n } from '@ijstech/base';
    import { Checkbox, CheckboxElement } from "@ijstech/checkbox";
    import { ComboBox, ComboBoxElement } from "@ijstech/combo-box";
    import { Datepicker, DatepickerElement } from '@ijstech/datepicker';
    import { Range, RangeElement } from '@ijstech/range';
    import { Radio, RadioElement } from '@ijstech/radio';
    import { ColorPicker } from '@ijstech/color';
    import "@ijstech/input/style/input.css.ts";
    export type InputType = 'checkbox' | 'radio' | 'range' | 'date' | 'time' | 'dateTime' | 'password' | 'combobox' | 'number' | 'textarea' | 'text' | 'color';
    type InputControlType = Checkbox | ComboBox | Datepicker | Range | Radio | ColorPicker;
    type actionCallback = (target: Input) => void;
    type ResizeType = "none" | "auto" | "both" | "horizontal" | "vertical" | "initial" | "inherit" | "auto-grow";
    type EnterKeyHintType = "enter" | "done" | "go" | "next" | "previous" | "search" | "send";
    export interface InputElement extends ControlElement, CheckboxElement, ComboBoxElement, DatepickerElement, RangeElement, RadioElement {
        caption?: string;
        captionWidth?: number | string;
        inputType?: InputType;
        value?: any;
        placeholder?: string;
        readOnly?: boolean;
        showClearButton?: boolean;
        rows?: number;
        multiline?: boolean;
        resize?: ResizeType;
        maxLength?: number;
        enterKeyHint?: EnterKeyHintType;
        onChanged?: notifyEventCallback;
        onKeyDown?: notifyEventCallback;
        onKeyUp?: notifyEventCallback;
        onBlur?: actionCallback;
        onFocus?: actionCallback;
        onClearClick?: actionCallback;
        onClosed?: () => void;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-input']: InputElement;
            }
        }
    }
    export class Input extends Control {
        private _value;
        private _caption;
        private _captionWidth;
        private _inputType;
        private _placeholder;
        private _readOnly;
        private _showClearButton;
        private _clearBtnWidth;
        private _rows;
        private _multiline;
        private _resize;
        private _maxLength;
        private _enterKeyHint;
        private captionSpanElm;
        private labelElm;
        private inputElm;
        private _inputControl;
        private clearIconElm;
        private _onClosed;
        onKeyDown: notifyEventCallback;
        onKeyUp: notifyEventCallback;
        onChanged: notifyEventCallback;
        onBlur: actionCallback;
        onFocus: actionCallback;
        onClearClick: actionCallback;
        constructor(parent?: Control, options?: any);
        set onObserverChanged(callback: (target: Control, event?: Event) => void);
        get onObserverChanged(): (target: Control, event?: Event) => void;
        set checked(value: boolean);
        get checked(): boolean;
        set valueFormat(value: string);
        get valueFormat(): string;
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        get captionWidth(): number | string;
        set captionWidth(value: number | string);
        get height(): number;
        set height(value: number | string);
        get value(): any;
        set value(value: any);
        get width(): number | string;
        set width(value: number | string);
        get readOnly(): boolean;
        set readOnly(value: boolean);
        get inputType(): InputType;
        set inputType(type: InputType);
        get inputControl(): InputControlType;
        get enabled(): boolean;
        set enabled(value: boolean);
        get placeholder(): string;
        set placeholder(value: string);
        private getTranslatedText;
        get rows(): number;
        set rows(value: number);
        get multiline(): boolean;
        set multiline(value: boolean);
        get resize(): ResizeType;
        set resize(value: ResizeType);
        set border(value: IBorder);
        get border(): Border;
        set maxLength(value: number);
        get maxLength(): number;
        set enterKeyHint(value: EnterKeyHintType);
        get enterKeyHint(): EnterKeyHintType;
        get background(): Background;
        set background(value: IBackground);
        get font(): IFont;
        set font(value: IFont);
        set onClosed(callback: () => void);
        get onClosed(): () => void;
        private _createInputElement;
        private _inputCallback;
        private _handleChange;
        private _handleInputKeyDown;
        private _handleInputKeyUp;
        protected _handleBlur(event: Event, stopPropagation?: boolean): boolean;
        private _handleOnFocus;
        private _clearValue;
        focus(): void;
        protected init(): void;
        static create(options?: InputElement, parent?: Control): Promise<Input>;
    }
}
/// <amd-module name="@ijstech/input" />
declare module "@ijstech/input" {
    export { Input, InputElement } from "@ijstech/input/input.ts";
}
/// <amd-module name="@ijstech/switch/style/switch.css.ts" />
declare module "@ijstech/switch/style/switch.css.ts" { }
/// <amd-module name="@ijstech/switch/switch.ts" />
declare module "@ijstech/switch/switch.ts" {
    import { Control, ControlElement, notifyEventCallback } from "@ijstech/base";
    import "@ijstech/switch/style/switch.css.ts";
    export interface SwitchElement extends ControlElement {
        checkedThumbColor?: string;
        uncheckedThumbColor?: string;
        checkedThumbText?: string;
        uncheckedThumbText?: string;
        checkedTrackColor?: string;
        uncheckedTrackColor?: string;
        checkedText?: string;
        uncheckedText?: string;
        checked?: boolean;
        onChanged?: notifyEventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-switch"]: SwitchElement;
            }
        }
    }
    export class Switch extends Control {
        private wrapperElm;
        private switchBaseElm;
        private inputElm;
        private thumbElm;
        private rippleElm;
        private trackElm;
        private _checked;
        private _checkedThumbColor;
        private _uncheckedThumbColor;
        private _checkedTrackColor;
        private _uncheckedTrackColor;
        private _checkedText;
        private _uncheckedText;
        private _checkedThumbText;
        private _uncheckedThumbText;
        onChanged: notifyEventCallback;
        constructor(parent?: Control, options?: any);
        get checked(): boolean;
        set checked(value: boolean);
        get checkedThumbColor(): string;
        set checkedThumbColor(value: string);
        get uncheckedThumbColor(): string;
        set uncheckedThumbColor(value: string);
        get checkedTrackColor(): string;
        set checkedTrackColor(value: string);
        get uncheckedTrackColor(): string;
        set uncheckedTrackColor(value: string);
        get checkedText(): string;
        set checkedText(value: string);
        get uncheckedText(): string;
        set uncheckedText(value: string);
        get checkedThumbText(): string;
        set checkedThumbText(value: string);
        get uncheckedThumbText(): string;
        set uncheckedThumbText(value: string);
        protected setAttributeToProperty<P extends keyof Switch>(propertyName: P): void;
        _handleClick(event: MouseEvent): boolean;
        init(): void;
        static create(options?: SwitchElement, parent?: Control): Promise<Switch>;
    }
}
/// <amd-module name="@ijstech/switch" />
declare module "@ijstech/switch" {
    export { Switch, SwitchElement } from "@ijstech/switch/switch.ts";
}
/// <amd-module name="@ijstech/link/style/link.css.ts" />
declare module "@ijstech/link/style/link.css.ts" { }
/// <amd-module name="@ijstech/link/link.ts" />
declare module "@ijstech/link/link.ts" {
    import { Control, ControlElement } from '@ijstech/base';
    import "@ijstech/link/style/link.css.ts";
    type TagertType = '_self' | '_blank' | '_parent' | '_top';
    export interface LinkElement extends ControlElement {
        href?: string;
        target?: TagertType;
    }
    export class Link extends Control {
        private _href;
        private _target;
        private _linkElm;
        constructor(parent?: Control, options?: any);
        get href(): string;
        set href(value: string);
        get target(): TagertType;
        set target(value: TagertType);
        append(children: Control | HTMLElement): void;
        _handleClick(event: MouseEvent, stopPropagation?: boolean): boolean;
        protected addChildControl(control: Control): void;
        protected removeChildControl(control: Control): void;
        protected init(): void;
        static create(options?: LinkElement, parent?: Control): Promise<Link>;
    }
}
/// <amd-module name="@ijstech/link" />
declare module "@ijstech/link" {
    export { Link, LinkElement } from "@ijstech/link/link.ts";
}
/// <amd-module name="@ijstech/text/style/text.css.ts" />
declare module "@ijstech/text/style/text.css.ts" { }
/// <amd-module name="@ijstech/text/text.ts" />
declare module "@ijstech/text/text.ts" {
    import { Control, ControlElement, DisplayType } from '@ijstech/base';
    import "@ijstech/text/style/text.css.ts";
    type WordBreakType = 'normal' | 'break-all' | 'keep-all' | 'break-word' | 'inherit' | 'initial' | 'revert' | 'unset';
    type OverflowWrapType = 'normal' | 'break-word' | 'anywhere' | 'inherit' | 'initial' | 'revert' | 'unset';
    export type TextOverflowType = 'clip' | 'ellipsis' | 'initial' | 'inherit';
    export interface TextElement extends ControlElement {
        wordBreak?: WordBreakType;
        overflowWrap?: OverflowWrapType;
        textOverflow?: TextOverflowType;
        lineClamp?: number;
    }
    export const textDataSchema: {
        wordBreak: {
            type: string;
            enum: string[];
            default: string;
        };
        overflowWrap: {
            type: string;
            enum: string[];
            default: string;
        };
        textOverflow: {
            type: string;
            enum: string[];
        };
        lineClamp: {
            type: string;
        };
    };
    export const textPropsConfig: {
        wordBreak: {
            type: string;
            default: string;
        };
        overflowWrap: {
            type: string;
            default: string;
        };
        textOverflow: {
            type: string;
        };
        lineClamp: {
            type: string;
        };
    };
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-text']: TextElement;
            }
        }
    }
    export class Text extends Control {
        constructor(parent?: Control, options?: any);
        get wordBreak(): WordBreakType;
        set wordBreak(value: WordBreakType);
        get overflowWrap(): OverflowWrapType;
        set overflowWrap(value: OverflowWrapType);
        get textOverflow(): TextOverflowType;
        set textOverflow(value: TextOverflowType);
        get lineClamp(): number;
        set lineClamp(value: number);
        get display(): DisplayType;
        set display(value: DisplayType);
        protected init(): void;
        static create(options?: TextElement, parent?: Control): Promise<Text>;
    }
}
/// <amd-module name="@ijstech/text" />
declare module "@ijstech/text" {
    export { Text, TextElement, TextOverflowType, textDataSchema, textPropsConfig } from "@ijstech/text/text.ts";
}
/// <amd-module name="@ijstech/label/style/label.css.ts" />
declare module "@ijstech/label/style/label.css.ts" { }
/// <amd-module name="@ijstech/label/label.ts" />
declare module "@ijstech/label/label.ts" {
    import { Control, I18n } from '@ijstech/base';
    import { Link, LinkElement } from '@ijstech/link';
    import { Text, TextElement } from '@ijstech/text';
    import "@ijstech/label/style/label.css.ts";
    type TextDecorationType = 'none' | 'underline' | 'overline' | 'line-through';
    export interface LabelElement extends TextElement {
        caption?: string;
        link?: LinkElement;
        textDecoration?: TextDecorationType;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-label']: LabelElement;
            }
        }
    }
    export class Label extends Text {
        private captionSpan;
        private _link;
        private _caption;
        constructor(parent?: Control, options?: any);
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        get link(): Link;
        set link(value: Link);
        set height(value: number);
        set width(value: number);
        get textDecoration(): TextDecorationType;
        set textDecoration(value: TextDecorationType);
        protected init(): void;
        static create(options?: LabelElement, parent?: Control): Promise<Label>;
    }
}
/// <amd-module name="@ijstech/label" />
declare module "@ijstech/label" {
    export { Label, LabelElement } from "@ijstech/label/label.ts";
}
/// <amd-module name="@ijstech/upload/style/upload.css.ts" />
declare module "@ijstech/upload/style/upload.css.ts" { }
/// <amd-module name="@ijstech/upload/upload.ts" />
declare module "@ijstech/upload/upload.ts" {
    import { Control, ControlElement } from '@ijstech/base';
    import "@ijstech/upload/style/upload.css.ts";
    type beforeDropCallback = (target: Upload) => void;
    type changedCallback = (target: Upload, files: UploadRawFile[]) => void;
    type removedCallback = (target: Upload, file?: File) => void;
    type uploadingCallback = (target: Upload, file: File) => Promise<boolean>;
    type addedCallback = (target: Upload, file: File) => Promise<boolean>;
    export const genFileId: () => number;
    export interface UploadRawFile extends File {
        uid?: number;
        path?: string;
        cid?: {
            cid: string;
            size: number;
        };
    }
    export interface UploadElement extends ControlElement {
        fileList?: File[];
        multiple?: boolean;
        accept?: string;
        draggable?: boolean;
        caption?: string;
        showFileList?: boolean;
        onBeforeDrop?: beforeDropCallback;
        onChanged?: changedCallback;
        onRemoved?: removedCallback;
        onAdded?: addedCallback;
        onUploading?: uploadingCallback;
    }
    interface UploadDragElement extends ControlElement {
        fileList?: File[];
        caption?: string;
        disabled?: boolean;
        onBeforeDrop?: any;
        onDrop?: any;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-upload']: UploadElement;
                ['i-upload-drag']: UploadDragElement;
            }
        }
    }
    export class Upload extends Control {
        private _wrapperElm;
        private _wrapperFileElm;
        private _fileElm;
        private _previewElm;
        private _previewImgElm;
        private _previewRemoveElm;
        private _wrapImgElm;
        private _fileListElm;
        private _uploadDragElm;
        private lblCaption;
        private _caption;
        private _accept;
        private _draggable;
        private _multiple;
        private isPreviewing;
        onBeforeDrop: beforeDropCallback;
        onChanged: changedCallback;
        onRemoved: removedCallback;
        onAdded: addedCallback;
        onUploading: uploadingCallback;
        private _dt;
        private _fileList;
        constructor(parent?: Control, options?: any);
        get caption(): string;
        set caption(value: string);
        get accept(): string;
        set accept(value: string);
        get draggable(): boolean;
        set draggable(value: boolean);
        get multiple(): boolean;
        set multiple(value: boolean);
        get fileList(): UploadRawFile[];
        set fileList(value: UploadRawFile[]);
        get enabled(): boolean;
        set enabled(value: boolean);
        private addFile;
        private previewFile;
        private handleUpload;
        private proccessFiles;
        private checkBeforeUpload;
        private updateFileListUI;
        private renderPreview;
        private handleRemoveImagePreview;
        private handleRemove;
        toBase64(file: File): Promise<unknown>;
        preview(uri: string): void;
        clear(): void;
        upload(): Promise<void>;
        addFiles(): void;
        addFolder(): void;
        protected init(): void;
        static create(options?: UploadElement, parent?: Control): Promise<Upload>;
    }
}
/// <amd-module name="@ijstech/upload" />
declare module "@ijstech/upload" {
    export { Upload, UploadElement, UploadRawFile } from "@ijstech/upload/upload.ts";
}
/// <amd-module name="@ijstech/module/module.ts" />
declare module "@ijstech/module/module.ts" {
    import { Container, ContainerElement, Control, I18n } from '@ijstech/base';
    import { IconElement } from '@ijstech/icon';
    import { Modal, ModalElement } from '@ijstech/modal';
    import { IModule } from '@ijstech/types';
    export interface ModuleElement extends ContainerElement {
        caption?: string;
    }
    global {
        var Render: any;
        namespace JSX {
            interface IntrinsicElements {
                ['i-module']: ModuleElement;
            }
        }
    }
    export interface IOpenModalOptions {
        title?: string;
        showBackdrop?: boolean;
        closeIcon?: IconElement;
        width?: number | string;
        zIndex?: number;
    }
    export class Module extends Container implements IModule {
        private $renderElms;
        private $render;
        private modulesUrlRegex;
        private static _modalMap;
        currentModuleDir: string;
        private _i18n;
        isModule: boolean;
        static create(options?: ModuleElement, parent?: Container, defaults?: ModuleElement): Promise<Module>;
        constructor(parent?: Container, options?: any, defaults?: any);
        get i18n(): I18n;
        updateLocale(): void;
        init(): void;
        _getValueByControl(elm: Control): any;
        flattenArray(arr: any[]): any;
        _render(...params: any[]): HTMLElement;
        render(): void;
        onLoad(): void;
        onShow(options?: any): void;
        onHide(): void;
        connectedCallback(): void;
        disconnectedCallback(): void;
        openModal(options?: ModalElement): Modal;
        closeModal(): void;
    }
}
/// <amd-module name="@ijstech/module" />
declare module "@ijstech/module" {
    export { Module, ModuleElement, IOpenModalOptions } from "@ijstech/module/module.ts";
}
/// <amd-module name="@ijstech/tooltip/style/tooltip.css.ts" />
declare module "@ijstech/tooltip/style/tooltip.css.ts" { }
/// <amd-module name="@ijstech/tooltip/tooltip.ts" />
declare module "@ijstech/tooltip/tooltip.ts" {
    import { Control, I18n } from '@ijstech/base';
    import "@ijstech/tooltip/style/tooltip.css.ts";
    import { PlacementType, TriggerType, ITooltipImpl, ITooltip } from '@ijstech/types';
    export { ITooltip };
    export class Tooltip extends Control implements ITooltipImpl {
        private _content;
        private _popperClass;
        private _placement;
        private _color;
        private _maxWidth;
        private _trigger;
        private _duration;
        private timeout;
        private _parentI18n;
        private tooltipElm;
        private tooltipArrowElm;
        constructor(parent: Control, parentI18n?: I18n);
        private initData;
        private positionAt;
        get trigger(): TriggerType;
        set trigger(value: TriggerType);
        get popperClass(): string;
        set popperClass(value: string);
        get color(): string;
        set color(value: string);
        updateLocale(i18n: I18n): void;
        get content(): string;
        set content(value: string);
        get placement(): PlacementType;
        set placement(value: PlacementType);
        get duration(): number;
        set duration(value: number);
        get isSmallScreen(): boolean;
        get maxWidth(): string;
        set maxWidth(value: string);
        get designMode(): boolean;
        set designMode(value: boolean);
        show(elm: HTMLElement): void;
        close(): void;
        private onHandleClick;
        private renderTooltip;
        private createLabels;
        private initEvents;
    }
}
/// <amd-module name="@ijstech/tooltip" />
declare module "@ijstech/tooltip" {
    export { Tooltip, ITooltip } from "@ijstech/tooltip/tooltip.ts";
}
/// <amd-module name="@ijstech/button/style/button.css.ts" />
declare module "@ijstech/button/style/button.css.ts" { }
/// <amd-module name="@ijstech/button/button.ts" />
declare module "@ijstech/button/button.ts" {
    import { Control, Container, ControlElement, I18n } from '@ijstech/base';
    import { Icon, IconElement } from '@ijstech/icon';
    import "@ijstech/button/style/button.css.ts";
    export interface ButtonElement extends ControlElement {
        caption?: string;
        icon?: IconElement;
        rightIcon?: IconElement;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-button']: ButtonElement;
            }
        }
    }
    export class Button extends Control {
        private captionElm;
        private _icon;
        private _rightIcon;
        private _caption;
        static create(options?: ButtonElement, parent?: Container): Promise<Button>;
        constructor(parent?: Control, options?: ButtonElement);
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        get icon(): Icon;
        set icon(value: Icon);
        get rightIcon(): Icon;
        set rightIcon(value: Icon);
        get enabled(): boolean;
        set enabled(value: boolean);
        private get isSpinning();
        private prependIcon;
        private appendIcon;
        private updateButton;
        _handleClick(event: MouseEvent): boolean;
        refresh(): void;
        protected init(): void;
    }
}
/// <amd-module name="@ijstech/button" />
declare module "@ijstech/button" {
    export { Button, ButtonElement } from "@ijstech/button/button.ts";
}
/// <amd-module name="@ijstech/tab/style/tab.css.ts" />
declare module "@ijstech/tab/style/tab.css.ts" {
    import { ITabMediaQuery } from "@ijstech/tab/tab.ts";
    export const getTabMediaQueriesStyleClass: (mediaQueries: ITabMediaQuery[]) => string;
}
/// <amd-module name="@ijstech/tab/tab.ts" />
declare module "@ijstech/tab/tab.ts" {
    import { Control, Container, ContainerElement, IFont, IMediaQuery, IControlMediaQueryProps, I18n } from '@ijstech/base';
    import { Icon, IconElement } from "@ijstech/icon";
    import "@ijstech/tab/style/tab.css.ts";
    type TabModeType = "horizontal" | "vertical";
    type TabsEventCallback = (target: Tabs, activeTab: Tab, oldActiveTab?: Tab) => void;
    type TabCloseEventCallback = (target: Tabs, tab: Tab) => void;
    export interface TabsElement extends ContainerElement {
        activeTabIndex?: number;
        closable?: boolean;
        draggable?: boolean;
        mode?: TabModeType;
        mediaQueries?: ITabMediaQuery[];
        onChanged?: TabsEventCallback;
        onCloseTab?: TabCloseEventCallback;
        onBeforeClose?: TabsEventCallback;
    }
    export interface TabElement extends ContainerElement {
        caption?: string;
        icon?: IconElement;
        rightIcon?: IconElement;
        font?: IFont;
    }
    export interface ITab extends TabElement {
        children?: Control | Container;
    }
    export interface ITabMediaQueryProps extends IControlMediaQueryProps {
        mode?: TabModeType;
    }
    export type ITabMediaQuery = IMediaQuery<ITabMediaQueryProps>;
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-tabs']: TabsElement;
                ['i-tab']: TabElement;
            }
        }
    }
    export class Tabs extends Container {
        private tabsNavElm;
        private tabsContentElm;
        private contentPanes;
        private _tabs;
        private _activeTabIndex;
        private _closable;
        private _draggable;
        private _mediaQueries;
        private accumTabIndex;
        private curDragTab;
        onChanged: TabsEventCallback;
        onCloseTab: TabCloseEventCallback;
        onBeforeClose: TabCloseEventCallback;
        constructor(parent?: Container, options?: any);
        updateLocale(i18n: I18n): void;
        get activeTab(): Tab;
        get activeTabIndex(): number;
        set activeTabIndex(index: number);
        get items(): Tab[];
        get closable(): boolean;
        set closable(value: boolean);
        get draggable(): boolean;
        set draggable(value: boolean);
        get mode(): TabModeType;
        set mode(type: TabModeType);
        get mediaQueries(): ITabMediaQuery[];
        set mediaQueries(value: ITabMediaQuery[]);
        add(options?: ITab): Tab;
        delete(tab: Tab): void;
        private appendTab;
        private handleTagDrag;
        _handleClick(event: MouseEvent): boolean;
        private dragStartHandler;
        private dragOverHandler;
        private dropHandler;
        refresh(): void;
        protected init(): void;
        private initTabsNav;
        static create(options?: TabsElement, parent?: Container): Promise<Tabs>;
    }
    export class Tab extends Container {
        private tabContainer;
        private captionElm;
        private _contentElm;
        private _icon;
        private rightElm;
        private _rightIcon;
        private _closeBtn;
        protected _parent: Tabs;
        private _caption;
        active(): void;
        protected addChildControl(control: Control): void;
        protected removeChildControl(control: Control): void;
        updateLocale(i18n: I18n): void;
        get caption(): string;
        set caption(value: string);
        close(): void;
        get index(): number;
        get icon(): Icon;
        set icon(elm: Icon);
        get rightIcon(): Icon;
        set rightIcon(elm: Icon);
        get font(): IFont;
        set font(value: IFont);
        _handleClick(event: MouseEvent): boolean;
        private handleCloseTab;
        private handleDefaultClose;
        init(): void;
        static create(options?: TabElement, parent?: Control): Promise<Tab>;
    }
}
/// <amd-module name="@ijstech/tab" />
declare module "@ijstech/tab" {
    export { Tabs, TabsElement, Tab, TabElement } from "@ijstech/tab/tab.ts";
}
/// <amd-module name="@ijstech/progress/style/progress.css.ts" />
declare module "@ijstech/progress/style/progress.css.ts" { }
/// <amd-module name="@ijstech/progress/progress.ts" />
declare module "@ijstech/progress/progress.ts" {
    import { Control, ControlElement, Types, IFont } from '@ijstech/base';
    import "@ijstech/progress/style/progress.css.ts";
    export type ProgressStatus = 'success' | 'exception' | 'active' | 'warning';
    export type ProgressType = 'line' | 'circle';
    type callbackType = (target: Control) => void;
    export interface ProgressElement extends ControlElement {
        percent?: number;
        strokeWidth?: number;
        strokeColor?: Types.Color;
        loading?: boolean;
        steps?: number;
        type?: ProgressType;
        format?: (percent: number) => string;
        onRenderStart?: callbackType;
        onRenderEnd?: callbackType;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-progress']: ProgressElement;
            }
        }
    }
    export class Progress extends Control {
        private _percent;
        private _status;
        private _loading;
        private _steps;
        private _type;
        private _strokeWidth;
        private _strokeColor;
        private _wrapperElm;
        private _startElm;
        private _barElm;
        private _endElm;
        private _textElm;
        format: (percent: number) => string;
        onRenderStart: callbackType;
        onRenderEnd: callbackType;
        constructor(parent?: Control, options?: any);
        get percent(): number;
        set percent(value: number);
        get strokeColor(): Types.Color;
        set strokeColor(value: Types.Color);
        get loading(): boolean;
        set loading(value: boolean);
        get steps(): number;
        set steps(value: number);
        get type(): ProgressType;
        set type(value: ProgressType);
        get strokeWidth(): number;
        set strokeWidth(value: number);
        get font(): IFont;
        set font(value: IFont);
        private get relativeStrokeWidth();
        private get radius();
        private get trackPath();
        private get perimeter();
        private get rate();
        private get strokeDashoffset();
        private get trailPathStyle();
        private get circlePathStyle();
        private get stroke();
        private get trackColor();
        private get progressTextSize();
        private renderLine;
        private renderCircle;
        private renderCircleInner;
        private updateCircleInner;
        protected init(): void;
        static create(options?: ProgressElement, parent?: Control): Promise<Progress>;
    }
}
/// <amd-module name="@ijstech/progress" />
declare module "@ijstech/progress" {
    export { Progress } from "@ijstech/progress/progress.ts";
}
/// <amd-module name="@ijstech/jsonUI/styles/jsonUI.css.ts" />
declare module "@ijstech/jsonUI/styles/jsonUI.css.ts" {
    export const jsonUICheckboxStyle: string;
    export const jsonUIComboboxStyle: string;
    export const jsonUITabStyle: string;
}
/// <amd-module name="@ijstech/jsonUI" />
declare module "@ijstech/jsonUI" {
    import { Control } from '@ijstech/base';
    import { JSONSchema } from '@ijstech/types';
    export type IUISchemaType = 'VerticalLayout' | 'HorizontalLayout' | 'Group' | 'Categorization' | 'Category' | 'Control';
    export type IUISchemaRulesEffect = 'HIDE' | 'SHOW' | 'DISABLE' | 'ENABLE';
    export interface IUISchemaRulesCondition {
        scope: string;
        schema: {
            [key: string]: any;
        };
    }
    export interface IUISchema {
        type: IUISchemaType;
        elements?: IUISchema[];
        label?: string | boolean;
        scope?: string;
        rule?: IUISchemaRules;
        options?: IUISchemaOptions;
    }
    export interface IUISchemaOptions {
        detail?: 'DEFAULT' | 'GENERATED' | 'REGISTERED' | IUISchema;
        showSortButtons?: boolean;
        elementLabelProp?: string;
        format?: 'date' | 'time' | 'date-time' | 'radio';
        slider?: boolean;
        multi?: boolean;
        color?: boolean;
        restrict?: boolean;
        showUnfocusedDescription?: boolean;
        hideRequiredAsterisk?: boolean;
        toggle?: boolean;
        readonly?: boolean;
        autocomplete?: boolean;
        variant?: 'stepper';
    }
    export interface IUISchemaRules {
        effect?: IUISchemaRulesEffect;
        condition?: IUISchemaRulesCondition;
    }
    interface ValidationResult {
        valid: boolean;
        errors: ValidationError[];
    }
    interface ValidationError {
        property: string;
        scope: string;
        message: string;
    }
    export const DataSchemaValidator: {
        checkPropertyChange: (value: any, schema: JSONSchema.IDataSchema, property: string) => ValidationResult | null;
        mustBeValid: (result: ValidationResult) => void;
        validate: (instance: any, schema: JSONSchema.IDataSchema, options: any) => ValidationResult | null;
    };
    export interface IRenderUIOptions {
        jsonSchema: JSONSchema.IDataSchema;
        data?: any;
        jsonUISchema?: IUISchema;
        hideConfirmButton?: boolean;
        columnsPerRow?: number;
        showClearButton?: boolean;
        clearButtonCaption?: string;
        confirmButtonCaption?: string;
        confirmButtonBackgroundColor?: string;
        confirmButtonFontColor?: string;
        columnWidth?: string | number;
        clearButtonBackgroundColor?: string;
        clearButtonFontColor?: string;
        dateFormat?: string;
        timeFormat?: string;
        dateTimeFormat?: string;
    }
    export function renderUI(target: Control, options: IRenderUIOptions, confirmCallback?: (result: boolean, data: any) => void, valueChangedCallback?: (data: any, errMsg: string) => void): void;
}
/// <amd-module name="@ijstech/alert/style/alert.css.ts" />
declare module "@ijstech/alert/style/alert.css.ts" { }
/// <amd-module name="@ijstech/alert/alert.ts" />
declare module "@ijstech/alert/alert.ts" {
    import { Control, Container, ControlElement, I18n } from "@ijstech/base";
    import "@ijstech/alert/style/alert.css.ts";
    export interface AlertElement extends ControlElement {
        status?: "warning" | "success" | "error" | "loading" | "confirm";
        title?: string;
        content?: string;
        link?: {
            caption: string;
            href: string;
        };
        onClose?: any;
        onConfirm?: any;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-alert"]: AlertElement;
            }
        }
    }
    export interface IAlertMessage {
        status: "warning" | "success" | "error" | "loading" | "confirm";
        title?: string;
        content?: string;
        link?: {
            caption: string;
            href: string;
        };
        onClose?: any;
        onConfirm?: any;
    }
    export class Alert extends Control {
        private mdAlert;
        private pnlMain;
        private contentElm;
        private titleElm;
        private linkElm;
        private _status;
        private _title;
        private _content;
        private _link;
        onClose?: any;
        onConfirm?: any;
        constructor(parent?: Container, options?: any);
        get status(): string;
        set status(value: string);
        get title(): string;
        set title(value: string);
        get content(): string;
        set content(value: string);
        updateLocale(i18n: I18n): void;
        private getTranslatedText;
        get link(): {
            caption: string;
            href: string;
        };
        set link(value: {
            caption: string;
            href: string;
        });
        private get iconName();
        private get color();
        closeModal: () => void;
        showModal: () => void;
        private renderUI;
        private renderContent;
        private createLabels;
        private renderLink;
        private renderButtons;
        protected init(): Promise<void>;
    }
}
/// <amd-module name="@ijstech/alert" />
declare module "@ijstech/alert" {
    export { Alert, AlertElement } from "@ijstech/alert/alert.ts";
}
/// <amd-module name="@ijstech/data-grid/style/dataGrid.css.ts" />
declare module "@ijstech/data-grid/style/dataGrid.css.ts" { }
/// <amd-module name="@ijstech/data-grid/dataGrid.ts" />
declare module "@ijstech/data-grid/dataGrid.ts" {
    import { Control, Container, ControlElement } from '@ijstech/base';
    import { IComboItem } from '@ijstech/combo-box';
    import "@ijstech/data-grid/style/dataGrid.css.ts";
    export type ColRowType = "datePicker" | "dateTimePicker" | "timePicker" | "checkBox" | "comboBox" | "number" | "integer" | "string";
    type DataType = "date" | "dateTime" | "time" | "boolean" | "number" | "integer" | "string";
    export type cellValueChangedCallback = (source: DataGrid, cell: DataGridCell, oldValue: any, newValue: any) => void;
    export interface IDataGridElement extends ControlElement {
        caption?: string;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-data-grid']: IDataGridElement;
            }
        }
    }
    interface IDataGrid {
        colCount: number;
        columns: {
            [colIdx: number]: any;
        };
        rowHeights: any[];
        getColWidth(col: number): number;
        setColWidth(col: number, value: number): void;
        enableUpdateTimer(): void;
    }
    export class DataGridCell {
        private grid;
        private _col;
        private _row;
        private _visible;
        private _button;
        private _checkBox;
        private _color;
        private _formula;
        private _hint;
        private _horizontalAlign;
        private _html;
        private _image;
        private _object;
        private _readOnly;
        private _text;
        private _value;
        mergeRect: any;
        constructor(grid: DataGrid, col: number, row: number);
        get button(): boolean;
        set button(value: boolean);
        get checkBox(): boolean;
        set checkBox(value: boolean);
        get col(): number;
        set col(value: number);
        get color(): string;
        set color(value: string);
        get displayValue(): any;
        get formula(): any;
        set formula(value: any);
        get hint(): string;
        set hint(value: string);
        get horizontalAlign(): boolean;
        set horizontalAlign(value: boolean);
        get html(): string;
        set html(value: string);
        get image(): string;
        set image(value: string);
        get object(): any;
        set object(value: any);
        get readOnly(): boolean;
        set readOnly(value: boolean);
        get row(): number;
        set row(value: number);
        get text(): string;
        set text(value: string);
        get value(): any;
        set value(value: any);
        get visible(): boolean;
        set visible(value: boolean);
    }
    class TGridColumn {
        private grid;
        private _colIdx;
        private _dataType;
        private _visible;
        private _resizable;
        private _sortable;
        private _color;
        private _horizontalAlign;
        private _type;
        private _readOnly;
        private _lookupContext;
        private _lookupTable;
        private _suggestTable;
        private _lookupField;
        private _lookupDetailField;
        private _lookupDetailValue;
        private _lookupDetailType;
        private _listOfValue;
        private _format;
        private _formula;
        private _displayUserName;
        private _binding;
        private _comboItems;
        private _rows;
        constructor(grid: IDataGrid, colIdx: number);
        get asJSON(): any;
        set asJSON(value: any);
        get binding(): any;
        set binding(value: any);
        get colIdx(): number;
        set colIdx(value: number);
        get color(): string;
        set color(value: string);
        get comboItems(): IComboItem[];
        set comboItems(value: IComboItem[]);
        get default(): boolean;
        get format(): string;
        set format(value: string);
        get formula(): string;
        set formula(value: string);
        get horizontalAlign(): number;
        set horizontalAlign(value: number);
        get readOnly(): boolean;
        set readOnly(value: boolean);
        get resizable(): boolean;
        set resizable(value: boolean);
        get sortable(): boolean;
        set sortable(value: boolean);
        get type(): ColRowType;
        set type(value: ColRowType);
        get dataType(): DataType;
        get visible(): boolean;
        set visible(value: boolean);
        get width(): number;
        set width(value: number);
    }
    class TGridColumns {
        private grid;
        private columns;
        private count;
        constructor(grid: DataGrid);
        clear(): void;
        deleteCol(aCol: number): void;
        getColumn(index: number): TGridColumn;
        insertCol(colIdx: number): void;
        loadFromJSON(value: any): void;
        _loadFromJSON(value: any): void;
        saveToJSON(): any[];
        setColCount(value: number): void;
        updateColIndex(): void;
    }
    class TGridRow {
        private grid;
        private _comboItems;
        private _visible;
        private _color;
        private _height;
        private _readOnly;
        private _resizable;
        private _type;
        private _dataType;
        constructor(grid: DataGrid);
        get color(): string;
        set color(value: string);
        get comboItems(): IComboItem[];
        set comboItems(value: IComboItem[]);
        get height(): number;
        set height(value: number);
        get readOnly(): boolean;
        set readOnly(value: boolean);
        get resizable(): boolean;
        set resizable(value: boolean);
        get type(): ColRowType;
        set type(value: ColRowType);
        get dataType(): DataType;
        get visible(): boolean;
        set visible(value: boolean);
    }
    class TGridRows {
        private grid;
        rows: any[];
        private defaultHeight;
        constructor(grid: DataGrid, defaultHeight: number);
        clear(): void;
        getHeight(index: number): any;
        getRow(index: number): TGridRow;
    }
    export type TGridLayout = 'grid' | 'card';
    export class DataGrid extends Control {
        private _colResizing;
        private _listOfValue;
        private _defaultRowHeight;
        private _defaultColWidth;
        private _layout;
        private mergeRect;
        private tableCells;
        private tableSplitters;
        private selectedCells;
        private selectedCellsHighlight;
        private placeHolder;
        private _table;
        private edit;
        private cellHighlight;
        private selectedRangeHighlight;
        private _scrollBox;
        private tableContainer;
        private data;
        columns: TGridColumns;
        gridRows: TGridRows;
        private _colCount;
        private _rowCount;
        private editor;
        private editorMode;
        private _cardPanel;
        private colWidths;
        private _rowHeights;
        private mouseDownPosX;
        private resizeCol;
        private origColWidth;
        private _fixedCol;
        private _fixedRow;
        private _leftCol;
        private _topRow;
        private _row;
        private _col;
        private _readOnly;
        private _scrollLeft;
        private _scrollTop;
        private _dataBindingContext;
        private dataBinding;
        private _skipRefreshData;
        private _bindingRecordSet;
        private showDataInternalFlag;
        private _updateTableTimer;
        private _sorting;
        private _setScrollLeftInterval;
        private _setScrollTopInterval;
        private _restScrollboxHandler;
        private scrollHorizontalTimer;
        private scrollVerticalTimer;
        private _updateTableInternalFlag;
        private _totalColWidth;
        private _totalRowHeight;
        private visibleRowCount;
        private visibleColCount;
        private _needUpdate;
        private showDataFlag;
        private _showDataTimeout;
        private _refreshDataTimeout;
        private _destroyed;
        private sortingCol;
        private sortingDescending;
        private _currCell;
        private resizeTimer;
        private lastClickCell;
        private formula;
        private formulaCell;
        private origValue;
        onSort: any;
        onRowChange: any;
        onCellSelect: any;
        onColResize: any;
        onButtonClick: any;
        onCellClick: any;
        onCellChange: cellValueChangedCallback;
        onDisplayCell: any;
        onEditModeChanged: any;
        onGetEditControl: any;
        onKeyDown: any;
        static create(options?: IDataGridElement, parent?: Container): Promise<DataGrid>;
        constructor(parent?: Control, options?: IDataGridElement);
        get fixedCol(): number;
        set fixedCol(value: number);
        get fixedRow(): number;
        set fixedRow(value: number);
        get layout(): TGridLayout;
        set layout(value: TGridLayout);
        init(): Promise<void>;
        private _init;
        calcTopRow(rowIdx: number): number;
        cells(aCol: number, aRow: number, refresh?: boolean): DataGridCell;
        get col(): number;
        set col(value: number);
        get row(): number;
        set row(value: number);
        get colCount(): number;
        set colCount(value: number);
        get readOnly(): boolean;
        set readOnly(value: boolean);
        get rowCount(): number;
        set rowCount(value: number);
        get topRow(): number;
        set topRow(value: number);
        private _updateRowHeights;
        setObject(aCol: number, aRow: number, aObject: any): void;
        private setJSONValue;
        private updateBindingData;
        private _updateCurrCellValue;
        private hideEditor;
        checkEmptyRow(row: number): boolean;
        setRowCount(aRowCount: number): void;
        refresh(): void;
        deleteRow(row: number): void;
        getObject(aCol: number, aRow: number): any;
        getValue(col: number, row: number): any;
        setScrollLeft(): void;
        setScrollLeftInternal(): void;
        setScrollTop(): void;
        setScrollTopInternal(): void;
        setLeftCol(aLeftCol: number, skipSetScroll?: boolean): void;
        private setTopRow;
        showData(interval: number): void;
        getTableCellByActualIndex(aColIdx: number, aRowIdx: number): HTMLTableCellElement | undefined;
        getTableCell(aColIdx: number, aRowIdx: number): any;
        highlightCurrCell(): void;
        setCurrCell(aCol: number, aRow: number, triggerEvent?: boolean): void;
        private highlightSelectedCell;
        private _updateLanguage;
        private _updateListOfValues;
        private _handleScrollHorizontal;
        _handleScrollVertical(sender: HTMLElement): void;
        private _handleScroll;
        private _handleFileDrop;
        private _handleDragOver;
        private _handleInput;
        protected _handleMouseWheel(event: WheelEvent, delta: number): void;
        private getColLeft;
        private getColRight;
        getColWidth(col: number): number;
        private getRowHeight;
        private _updateTotalRowHeight;
        private _updateTotalColWidth;
        private _updateTableRows;
        private getActualColIdx;
        private getActualRowIdx;
        cols(colIdx: number): TGridColumn;
        rows(rowIdx: number): TGridRow;
        private _updateTableCellDiv;
        private _updateTableCols;
        setColWidth(aColIndex: number, width: number, trigerEvent?: boolean): void;
        private _updateTableMergedCells;
        sort(col: number, descending?: boolean): void;
        private getEditor;
        private handleEditControlChange;
        protected _handleEditDblClick(event: Event, stopPropagation?: boolean): boolean;
        protected colLeft(): void;
        protected colRight(): void;
        protected autoAddRow(): void;
        protected rowDown(disableAutoAddRow?: boolean): void;
        protected calcBottomRow(topRowIdx: number): number;
        protected calcLeftCol(colIdx: number): number;
        protected rowUp(): void;
        protected restoreOrigCellValue(): void;
        protected _handleKeyDown(event: KeyboardEvent, stopPropagation?: boolean): boolean | undefined;
        protected _handleBlur(event: Event, stopPropagation?: boolean): boolean;
        private showEditor;
        protected _handleMouseDown(event: MouseEvent): boolean;
        private _updateCell;
        private checkCellReadOnly;
        private toggleCellValue;
        protected _handleMouseMove(event: MouseEvent): boolean;
        protected _handleMouseUp(event: Event): boolean;
        private _handleColumnResizeStart;
        private _updateTableSplitter;
        private _showDataInternalGrid;
        private showDataInternal;
        private _updateTableInternal;
        enableUpdateTimer(updateRowHeightFlag?: boolean, updateColWidthFlag?: boolean): void;
    }
}
/// <amd-module name="@ijstech/data-grid" />
declare module "@ijstech/data-grid" {
    export { DataGrid, DataGridCell } from "@ijstech/data-grid/dataGrid.ts";
}
/// <amd-module name="@ijstech/markdown/styles/index.css.ts" />
declare module "@ijstech/markdown/styles/index.css.ts" { }
/// <amd-module name="@ijstech/markdown/plaintify.ts" />
declare module "@ijstech/markdown/plaintify.ts" {
    export const TxtRenderer: any;
}
/// <amd-module name="@ijstech/markdown/markdown.ts" />
declare module "@ijstech/markdown/markdown.ts" {
    import { Control, ControlElement, ISpace } from "@ijstech/base";
    import "@ijstech/markdown/styles/index.css.ts";
    export interface MarkdownElement extends ControlElement {
        theme?: 'light' | 'dark';
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-markdown"]: MarkdownElement;
            }
        }
    }
    export function markdownToPlainText(text: string): Promise<string>;
    export class Markdown extends Control {
        private elm;
        private marked;
        gitbookProcess: boolean;
        fileRoot: string;
        private _theme;
        private _space;
        constructor(parent?: Control, options?: MarkdownElement);
        get theme(): 'light' | 'dark';
        set theme(value: 'light' | 'dark');
        get padding(): ISpace;
        set padding(value: ISpace);
        private getRenderer;
        getTokens(text: string): Promise<any>;
        toPlainText(text: string): Promise<string>;
        load(text: string): Promise<any>;
        private preParse;
        beforeRender(text: string): Promise<void>;
        processText(text: string): Promise<string>;
        private loadLib;
        protected init(): void;
    }
}
/// <amd-module name="@ijstech/markdown" />
declare module "@ijstech/markdown" {
    export { Markdown, MarkdownElement, markdownToPlainText } from "@ijstech/markdown/markdown.ts";
}
/// <amd-module name="@ijstech/markdown-editor/styles/index.css.ts" />
declare module "@ijstech/markdown-editor/styles/index.css.ts" { }
/// <amd-module name="@ijstech/markdown-editor/markdown-editor.ts" />
declare module "@ijstech/markdown-editor/markdown-editor.ts" {
    import { Border, Container, Control, IBorder, ISpace, notifyEventCallback } from "@ijstech/base";
    import { Markdown } from '@ijstech/markdown';
    import { Text, TextElement } from '@ijstech/text';
    import "@ijstech/markdown-editor/styles/index.css.ts";
    export interface MarkdownEditorElement extends TextElement {
        mode?: 'wysiwyg' | 'markdown';
        theme?: 'light' | 'dark';
        previewStyle?: 'tab' | 'vertical';
        hideModeSwitch?: boolean;
        value?: string;
        viewer?: boolean;
        toolbarItems?: any[];
        plugins?: any[];
        widgetRules?: {
            rule: string | object;
            toDOM: (text: string) => any;
        }[];
        placeholder?: string;
        autoFocus?: boolean;
        onChanged?: notifyEventCallback;
        onFocus?: notifyEventCallback;
        onBlur?: notifyEventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-markdown-editor"]: MarkdownEditorElement;
            }
        }
    }
    export class MarkdownEditor extends Text {
        private editor;
        private editorPlugins;
        private editorObj;
        private mdViewer;
        private elm;
        private _theme;
        private _mode;
        private _previewStyle;
        private _value;
        private _viewer;
        private _heightValue;
        private _toolbarItems;
        private _customPlugins;
        private _widgetRules;
        private _hideModeSwitch;
        private _placeholder;
        private _autoFocus;
        private overlayElm;
        private isPaste;
        onChanged: notifyEventCallback;
        onFocus: notifyEventCallback;
        onBlur: notifyEventCallback;
        setFocus(): void;
        get mode(): 'wysiwyg' | 'markdown';
        set mode(value: 'wysiwyg' | 'markdown');
        get theme(): 'light' | 'dark';
        set theme(value: 'light' | 'dark');
        get previewStyle(): 'tab' | 'vertical';
        set previewStyle(value: 'tab' | 'vertical');
        get viewer(): boolean;
        set viewer(value: boolean);
        set designMode(value: boolean);
        get value(): string;
        set value(value: string);
        setValue(value: string): Promise<void>;
        get height(): string | number;
        set height(value: string | number);
        get toolbarItems(): any[];
        set toolbarItems(items: any[]);
        get plugins(): any[];
        set plugins(plugins: any[]);
        get widgetRules(): {
            rule: string | object;
            toDOM: (text: string) => any;
        }[];
        set widgetRules(rules: {
            rule: string | object;
            toDOM: (text: string) => any;
        }[]);
        get hideModeSwitch(): boolean;
        set hideModeSwitch(value: boolean);
        get autoFocus(): boolean;
        set autoFocus(value: boolean);
        get placeholder(): string;
        set placeholder(value: string);
        private getTranslatedText;
        get padding(): ISpace;
        set padding(value: ISpace);
        get border(): Border;
        set border(value: IBorder);
        static create(options?: MarkdownEditorElement, parent?: Container): Promise<MarkdownEditor>;
        constructor(parent?: Control, options?: MarkdownEditorElement);
        private loadPlugin;
        private loadSyntaxHighlightPlugin;
        private loadPlugins;
        private addCSS;
        private initEditor;
        private renderEditor;
        getMarkdownValue(): any;
        getEditorElm(): any;
        getViewerElm(): Markdown;
        protected init(): Promise<void>;
    }
}
/// <amd-module name="@ijstech/markdown-editor" />
declare module "@ijstech/markdown-editor" {
    export { MarkdownEditor, MarkdownEditorElement } from "@ijstech/markdown-editor/markdown-editor.ts";
}
/// <amd-module name="@ijstech/menu/style/menu.css.ts" />
declare module "@ijstech/menu/style/menu.css.ts" {
    export const menuStyle: string;
    export const meunItemStyle: string;
    export const modalStyle: string;
}
/// <amd-module name="@ijstech/menu/menu.ts" />
declare module "@ijstech/menu/menu.ts" {
    import { Control, ControlElement, I18n, IContextMenu, IFont, ISpace } from "@ijstech/base";
    import { Link, LinkElement } from '@ijstech/link';
    import { Icon, IconElement } from '@ijstech/icon';
    export type MenuMode = "horizontal" | "vertical" | "inline";
    type AlignType = 'left' | 'right' | 'center';
    export interface MenuItemElement extends IMenuItem {
        level?: number;
    }
    export interface IMenuItem extends ControlElement {
        title?: string;
        link?: LinkElement;
        icon?: IconElement;
        items?: IMenuItem[];
        textAlign?: AlignType;
    }
    export interface MenuElement extends ControlElement {
        mode?: MenuMode;
        data?: IMenuItem[];
        items?: MenuItem[];
        onItemClick?: (target: Menu, item: MenuItem) => void;
    }
    export interface ContextMenuElement extends ControlElement {
        data?: IMenuItem[];
        items?: MenuItem[];
        onItemClick?: (target: Menu, item: MenuItem) => void;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-menu"]: MenuElement;
                ["i-menu-item"]: MenuItemElement;
                ["i-context-menu"]: ContextMenuElement;
            }
        }
    }
    export class Menu extends Control {
        private menuElm;
        private _mode;
        private _data;
        private _items;
        private moreItem;
        onItemClick: (target: Menu, item: MenuItem) => void;
        private _oldWidth;
        private itemsWidth;
        private resizeTimeout;
        private _selectedItem;
        updateLocale(i18n: I18n): void;
        add(options?: IMenuItem): MenuItem;
        delete(item: MenuItem): void;
        get mode(): MenuMode;
        set mode(value: MenuMode);
        get data(): IMenuItem[];
        set data(value: IMenuItem[]);
        get items(): MenuItem[];
        set items(items: MenuItem[]);
        get selectedItem(): MenuItem | undefined;
        set selectedItem(item: MenuItem | undefined);
        private updateItemOptions;
        get menuItems(): MenuItem[];
        private clear;
        private renderItem;
        private handleUpdateMode;
        private rerenderItems;
        private onResize;
        private handleResize;
        protected init(): void;
        disconnectedCallback(): void;
        static create(options?: MenuElement, parent?: Control): Promise<Menu>;
    }
    export class ContextMenu extends Menu implements IContextMenu {
        private modal;
        private openTimeout;
        private itemPanel;
        show(pos: {
            x: number;
            y: number;
        }): void;
        hide(): void;
        private renderItemModal;
        private getModalContainer;
        private handleModalOpen;
    }
    export class MenuItem extends Control {
        private itemElm;
        private itemWrapperElm;
        private captionElm;
        private subMenu;
        private arrowIcon;
        private modal;
        private itemPanel;
        protected _linkTo: Menu;
        private _link;
        private _icon;
        private _items;
        private openTimeout;
        private closeTimeout;
        private _level;
        private _textAlign;
        private _caption;
        constructor(parent?: Control, options?: MenuItemElement);
        add(options?: IMenuItem): MenuItem;
        delete(item: MenuItem): void;
        updateLocale(i18n: I18n): void;
        get title(): string;
        set title(value: string);
        set font(value: IFont);
        get font(): IFont;
        get link(): Link;
        set link(value: Link);
        get icon(): Icon;
        set icon(elm: Icon);
        get items(): MenuItem[];
        set items(items: MenuItem[]);
        get textAlign(): AlignType;
        set textAlign(value: AlignType);
        set level(value: number);
        get padding(): ISpace;
        set padding(value: ISpace);
        set selected(value: boolean);
        private get isSelected();
        private set isSelected(value);
        private updateLevel;
        private menuMode;
        private renderArrowIcon;
        private renderSubMenuItem;
        private renderItemModal;
        private getModalPlacement;
        private getModalContainer;
        private setSelectedItem;
        private handleSelectItem;
        _handleClick(event: MouseEvent): boolean;
        private handleModalOpen;
        private handleModalClose;
        protected init(): void;
        static create(options?: MenuItemElement, parent?: Control): Promise<MenuItem>;
    }
}
/// <amd-module name="@ijstech/menu" />
declare module "@ijstech/menu" {
    export { Menu, ContextMenu, IMenuItem, MenuElement, MenuItem, MenuItemElement } from "@ijstech/menu/menu.ts";
}
/// <amd-module name="@ijstech/tree-view/style/treeView.css.ts" />
declare module "@ijstech/tree-view/style/treeView.css.ts" { }
/// <amd-module name="@ijstech/tree-view/treeView.ts" />
declare module "@ijstech/tree-view/treeView.ts" {
    import { Control, ControlElement, I18n } from '@ijstech/base';
    import { Icon, IconElement } from '@ijstech/icon';
    import { Button, ButtonElement } from '@ijstech/button';
    import "@ijstech/tree-view/style/treeView.css.ts";
    type activedChangeCallback = (target: TreeView, prevNode?: TreeNode, event?: Event) => void;
    type changeCallback = (target: TreeView, node: TreeNode, oldValue: string, newValue: string) => void;
    type beforeChangeCallback = (target: TreeView, node: TreeNode, oldValue: string, newValue: string) => boolean;
    type renderCallback = (target: TreeView, node: TreeNode) => void;
    type mouseEnterCallback = (target: TreeView, node: TreeNode) => void;
    type mouseLeaveCallback = (target: TreeView, node: TreeNode) => void;
    type actionButtonCallback = (target: TreeView, actionButton: Button, event: Event) => void;
    type lazyLoadCallback = (target: TreeView, node: TreeNode) => void;
    export interface ITreeNode {
        caption?: string;
        icon?: IconElement;
        rightIcon?: IconElement;
        collapsible?: boolean;
        expanded?: boolean;
        isLazyLoad?: boolean;
        active?: boolean;
        children?: ITreeNode[];
        alwaysExpanded?: boolean;
    }
    export interface TreeViewElement extends ControlElement {
        activeItem?: TreeNode;
        data?: ITreeNode[];
        editable?: boolean;
        actionButtons?: ButtonElement[];
        alwaysExpanded?: boolean;
        deleteNodeOnEmptyCaption?: boolean;
        onActiveChange?: activedChangeCallback;
        onChange?: changeCallback;
        onBeforeChange?: beforeChangeCallback;
        onRenderNode?: renderCallback;
        onMouseEnterNode?: mouseEnterCallback;
        onMouseLeaveNode?: mouseLeaveCallback;
        onLazyLoad?: lazyLoadCallback;
        onActionButtonClick?: actionButtonCallback;
    }
    export interface TreeNodeElement extends ControlElement {
        caption?: string;
        icon?: IconElement;
        rightIcon?: IconElement;
        collapsible?: boolean;
        expanded?: boolean;
        isLazyLoad?: boolean;
        active?: boolean;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-tree-view']: TreeViewElement;
                ['i-tree-node']: TreeNodeElement;
            }
        }
    }
    export class TreeView extends Control {
        private _activeItem;
        private _data;
        private _editable;
        private _items;
        private _actionButtons;
        private _alwaysExpanded;
        _deleteNodeOnEmptyCaption: boolean;
        onRenderNode: renderCallback;
        onActiveChange: activedChangeCallback;
        onChange: changeCallback;
        onBeforeChange: beforeChangeCallback;
        onMouseEnterNode: mouseEnterCallback;
        onMouseLeaveNode: mouseLeaveCallback;
        onLazyLoad: lazyLoadCallback;
        onActionButtonClick: actionButtonCallback;
        constructor(parent?: Control, options?: any);
        get activeItem(): TreeNode | undefined;
        set activeItem(value: TreeNode | undefined);
        get alwaysExpanded(): boolean;
        set alwaysExpanded(value: boolean);
        get data(): ITreeNode[];
        set data(value: ITreeNode[]);
        get items(): TreeNode[];
        get editable(): boolean;
        set editable(value: boolean);
        get actionButtons(): ButtonElement[];
        set actionButtons(value: ButtonElement[]);
        updateLocale(i18n: I18n): void;
        add(parentNode?: TreeNode | null, caption?: string): TreeNode;
        appendNode(childNode: TreeNode): void;
        delete(node: TreeNode): void;
        clear(): void;
        _setActiveItem(node: TreeNode, event?: Event): void;
        private handleMouseEnter;
        private handleMouseLeave;
        private handleLazyLoad;
        private initNode;
        private registerEvents;
        private renderTreeNode;
        private renderTree;
        private renderActions;
        protected init(): void;
        static create(options?: TreeViewElement, parent?: Control): Promise<TreeView>;
    }
    export class TreeNode extends Control {
        private _caption;
        private _collapsible;
        private _expanded;
        private _active;
        private _isLazyLoad;
        private _editable;
        private _data;
        private _alwaysExpanded;
        private _wrapperElm;
        private _expandElm;
        private _captionElm;
        private _childNodeElm;
        private _iconElm;
        private _iconRightElm;
        constructor(parent?: Control, options?: any);
        get data(): ITreeNode;
        set data(value: ITreeNode);
        get caption(): string;
        set caption(value: string);
        updateLocale(i18n: I18n): void;
        get collapsible(): boolean;
        set collapsible(value: any);
        get expanded(): boolean;
        set expanded(value: any);
        get alwaysExpanded(): boolean;
        set alwaysExpanded(value: boolean);
        get active(): boolean;
        set active(value: any);
        get isLazyLoad(): boolean;
        set isLazyLoad(value: boolean);
        get editable(): boolean;
        set editable(value: boolean);
        get rootParent(): TreeView;
        get icon(): Icon;
        get rightIcon(): Icon;
        get height(): number | string;
        set height(value: number | string);
        private handleChange;
        private renderEditMode;
        private handleEdit;
        edit(): void;
        appendNode(childNode: TreeNode): TreeNode;
        private initChildNodeElm;
        _handleClick(event: MouseEvent): boolean;
        _handleDblClick(event: MouseEvent): boolean;
        _handleContextMenu(event: MouseEvent): boolean;
        protected init(): void;
        static create(options?: TreeNodeElement, parent?: Control): Promise<TreeNode>;
    }
}
/// <amd-module name="@ijstech/tree-view" />
declare module "@ijstech/tree-view" {
    export { TreeView, TreeViewElement, TreeNode, TreeNodeElement } from "@ijstech/tree-view/treeView.ts";
}
/// <amd-module name="@ijstech/popover/style/popover.css.ts" />
declare module "@ijstech/popover/style/popover.css.ts" {
    export const getOverlayStyle: () => string;
    export const getNoBackdropStyle: () => string;
    export const getAbsoluteWrapperStyle: (left: string, top: string) => string;
    export const popoverMainContentStyle: string;
    export const popoverArrowStyle: string;
}
/// <amd-module name="@ijstech/popover/popover.ts" />
declare module "@ijstech/popover/popover.ts" {
    import { Control, ControlElement, Container, IBackground, IBorder, Background, Border, ISpace } from '@ijstech/base';
    import { TriggerType } from '@ijstech/types';
    export type popoverPlacementType = 'center' | 'bottom' | 'bottomLeft' | 'bottomRight' | 'top' | 'topLeft' | 'topRight' | 'rightTop' | 'left' | 'right';
    type eventCallback = (target: Control) => void;
    type PopoverPositionType = "fixed" | "absolute";
    export interface PopoverElement extends ControlElement {
        placement?: popoverPlacementType;
        closeOnScrollChildFixed?: boolean;
        item?: Control;
        trigger?: TriggerType;
        isArrowShown?: boolean;
        onOpen?: eventCallback;
        onClose?: eventCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-popover']: PopoverElement;
            }
        }
    }
    export class Popover extends Container {
        protected _visible: boolean;
        private wrapperDiv;
        private popoverDiv;
        private bodyDiv;
        private overlayDiv;
        private _placement;
        private _wrapperPositionAt;
        private _trigger;
        private _isArrowShown;
        private insideClick;
        private boundHandlePopoverMouseDown;
        private boundHandlePopoverMouseUp;
        protected _onOpen: eventCallback;
        onClose: eventCallback;
        constructor(parent?: Control, options?: any);
        get visible(): boolean;
        set visible(value: boolean);
        get onOpen(): any;
        set onOpen(callback: any);
        get placement(): popoverPlacementType;
        set placement(value: popoverPlacementType);
        get item(): Control;
        set item(value: Control);
        get position(): PopoverPositionType;
        set position(value: PopoverPositionType);
        get isSmallScreen(): boolean;
        get parent(): Control | undefined;
        set parent(value: Control | undefined);
        set linkTo(value: Control);
        get linkTo(): Control;
        get isArrowShown(): boolean;
        set isArrowShown(value: boolean);
        private handleHoverEvent;
        _handleClick(event: MouseEvent): boolean;
        private positionPopoverRelativeToParent;
        private calculatePopoverWrapperCoordinates;
        protected _handleOnShow(event: Event): void;
        private handlePopoverMouseDown;
        private handlePopoverMouseUp;
        private setInsideClick;
        private setPropertyValue;
        refresh(): void;
        get background(): Background;
        set background(value: IBackground);
        get width(): number | string;
        set width(value: number | string);
        get height(): number | string;
        set height(value: number | string);
        get border(): Border;
        set border(value: IBorder);
        get padding(): ISpace;
        set padding(value: ISpace);
        get trigger(): TriggerType;
        set trigger(value: TriggerType);
        protected removeTargetStyle(target: HTMLElement, propertyName: string): void;
        protected setTargetStyle(target: HTMLElement, propertyName: string, value: string): void;
        protected init(): void;
        static create(options?: PopoverElement, parent?: Container): Promise<Popover>;
    }
}
/// <amd-module name="@ijstech/popover" />
declare module "@ijstech/popover" {
    export { Popover, PopoverElement, popoverPlacementType } from "@ijstech/popover/popover.ts";
}
/// <amd-module name="@ijstech/iframe/style/iframe.css.ts" />
declare module "@ijstech/iframe/style/iframe.css.ts" { }
/// <amd-module name="@ijstech/iframe/iframe.ts" />
declare module "@ijstech/iframe/iframe.ts" {
    import { Control, ControlElement } from '@ijstech/base';
    import "@ijstech/iframe/style/iframe.css.ts";
    export interface IframeElement extends ControlElement {
        url?: string;
        allowFullscreen?: boolean;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-iframe']: IframeElement;
            }
        }
    }
    export class Iframe extends Control {
        private _url;
        private allowFullscreen;
        private iframeElm;
        private overlayElm;
        constructor(parent?: Control, options?: any);
        reload(): Promise<void>;
        clear(): void;
        unload(): void;
        postMessage(msg: string): void;
        get url(): string;
        set url(value: string);
        set designMode(value: boolean);
        protected init(): void;
        static create(options?: IframeElement, parent?: Control): Promise<Iframe>;
    }
}
/// <amd-module name="@ijstech/iframe" />
declare module "@ijstech/iframe" {
    export { Iframe, IframeElement } from "@ijstech/iframe/iframe.ts";
}
/// <amd-module name="@ijstech/pagination/style/pagination.css.ts" />
declare module "@ijstech/pagination/style/pagination.css.ts" { }
/// <amd-module name="@ijstech/pagination/pagination.ts" />
declare module "@ijstech/pagination/pagination.ts" {
    import { Control, ControlElement } from '@ijstech/base';
    import "@ijstech/pagination/style/pagination.css.ts";
    type notifyCallback = (target: Pagination, lastActivePage: number, isClicked?: boolean) => void;
    export interface PaginationElement extends ControlElement {
        totalPages?: number;
        currentPage?: number;
        pageSize?: number;
        onPageChanged?: notifyCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-pagination']: PaginationElement;
            }
        }
    }
    export class Pagination extends Control {
        private _totalPages;
        private _curPage;
        private _pageSize;
        private _showPrevMore;
        private _showNextMore;
        private pagers;
        private pageItems;
        private activeItem;
        private _paginationDiv;
        private _prevElm;
        private _nextElm;
        private pagerCount;
        private isClicked;
        onPageChanged: notifyCallback;
        constructor(parent?: Control, options?: any);
        get totalPages(): number;
        set totalPages(value: number);
        get currentPage(): number;
        set currentPage(value: number);
        get pageSize(): number;
        set pageSize(value: number);
        private onActiveItem;
        private onDisablePrevNext;
        protected _handleOnClickIndex(value: number, event: Event): void;
        private _handleOnClickMore;
        protected _handleOnNext(event: Event): void;
        protected _handleOnPrev(event: Event): void;
        private onMouseenter;
        private renderEllipsis;
        private renderPage;
        private updatePagers;
        private renderPageItem;
        protected init(): void;
        static create(options?: PaginationElement, parent?: Control): Promise<Pagination>;
    }
}
/// <amd-module name="@ijstech/pagination" />
declare module "@ijstech/pagination" {
    export { Pagination, PaginationElement } from "@ijstech/pagination/pagination.ts";
}
/// <amd-module name="@ijstech/table/style/table.css.ts" />
declare module "@ijstech/table/style/table.css.ts" {
    import { TableColumnElement } from "@ijstech/table/tableColumn.ts";
    import { ITableMediaQuery } from "@ijstech/table/table.ts";
    import { ControlElement } from '@ijstech/base';
    export const tableStyle: string;
    export const getCustomStylesClass: (styles: ControlElement) => string;
    export const getTableMediaQueriesStyleClass: (columns: TableColumnElement[], mediaQueries: ITableMediaQuery[]) => string;
}
/// <amd-module name="@ijstech/table/tableCell.ts" />
declare module "@ijstech/table/tableCell.ts" {
    import "@ijstech/table/style/table.css.ts";
    export interface ITableCell {
        rowSpan: number;
        columnSpan: number;
        value: string;
    }
    export class TableCell {
        private _rowSpan;
        private _columnSpan;
        private _value;
        constructor(options: ITableCell);
        get rowSpan(): number;
        set rowSpan(value: number);
        get columnSpan(): number;
        set columnSpan(value: number);
        get value(): string;
        set value(data: string);
    }
}
/// <amd-module name="@ijstech/table/tableColumn.ts" />
declare module "@ijstech/table/tableColumn.ts" {
    import { Control, ControlElement, I18n } from '@ijstech/base';
    import { TableCell } from "@ijstech/table/tableCell.ts";
    import "@ijstech/table/style/table.css.ts";
    export type SortDirection = 'asc' | 'desc' | 'none';
    type renderCallback = (target: TableColumn, columnData: any, rowData: any, rowIndex?: number, cell?: TableCell) => any;
    type TextAlign = 'left' | 'right' | 'center';
    export interface TableColumnElement extends ControlElement {
        title: string;
        fieldName: string;
        key?: string | number;
        sortable?: boolean;
        sortOrder?: SortDirection;
        textAlign?: TextAlign;
        sorter?: (a: any, b: any) => number;
        onRenderCell?: renderCallback;
    }
    export class TableColumn extends Control {
        fieldName: string;
        key?: string | number;
        sortable?: boolean;
        private columnElm;
        private sortElm;
        private ascElm;
        private descElm;
        private isHeader;
        private _sortOrder;
        private _data;
        private _textAlign;
        private _rowData;
        private _caption;
        onSortChange: (source: Control, key: string, value: SortDirection) => void;
        onRenderCell: renderCallback;
        sorter: (a: any, b: any) => number;
        constructor(parent?: Control, options?: any);
        get data(): number | string;
        set data(value: number | string);
        get rowData(): number | string;
        set rowData(value: any);
        get sortOrder(): SortDirection;
        set sortOrder(value: SortDirection);
        get textAlign(): TextAlign;
        set textAlign(value: TextAlign);
        get caption(): string;
        set caption(value: string);
        updateLocale(i18n: I18n): void;
        private renderSort;
        appendNode(params: any): Promise<void>;
        init(): void;
    }
}
/// <amd-module name="@ijstech/table/utils.ts" />
declare module "@ijstech/table/utils.ts" {
    import { TableColumnElement } from "@ijstech/table/tableColumn.ts";
    export const paginate: <Type>(array: Type[], pageSize: number, pageNumber: number) => Type[];
    export const getColumnIndex: (columns: TableColumnElement[], key: string) => number;
    export const getColumnKey: (columns: TableColumnElement[], columnIdx: number) => string;
    export const getSorter: (columns: TableColumnElement[], key: string) => (a: any, b: any) => number;
    export const getValueByPath: (object: any, prop: string) => any;
    export const orderBy: (list: any, sortConfig: any, columns: TableColumnElement[]) => any;
    export const filterBy: (list: any[], value: any, columnKey: string | number) => any[];
}
/// <amd-module name="@ijstech/table/tableRow.ts" />
declare module "@ijstech/table/tableRow.ts" {
    import "@ijstech/table/style/table.css.ts";
    import { TableCell } from "@ijstech/table/tableCell.ts";
    export class TableRow {
        private _cells;
        constructor(cells: TableCell[]);
        get cells(): TableCell[];
        set cells(value: TableCell[]);
    }
}
/// <amd-module name="@ijstech/table/table.ts" />
declare module "@ijstech/table/table.ts" {
    import { Control, ControlElement, IMediaQuery, IControlMediaQueryProps, I18n } from '@ijstech/base';
    import { TableColumnElement } from "@ijstech/table/tableColumn.ts";
    import { Pagination } from '@ijstech/pagination';
    import { TableRow } from "@ijstech/table/tableRow.ts";
    import { Icon } from '@ijstech/icon';
    type cellClickCallback = (target: Table, rowIndex: number, columnIdx: number, record: any) => void;
    type emptyCallback = (target: Table) => void;
    type sortCallback = (target: Table, key: string, value: string) => void;
    interface ITableExpandable {
        onRenderExpandedRow: (record: any) => any;
        rowExpandable: boolean;
        onRenderExpandIcon?: (target: Table, expand: boolean) => Icon;
    }
    export interface ITableMediaQueryProps extends IControlMediaQueryProps {
        fieldNames?: string[];
        expandable?: ITableExpandable;
    }
    export type ITableMediaQuery = IMediaQuery<ITableMediaQueryProps>;
    export interface TableElement extends ControlElement {
        heading?: boolean;
        data?: any;
        columns?: TableColumnElement[];
        rows?: TableRow[];
        pagination?: string;
        expandable?: ITableExpandable;
        mediaQueries?: ITableMediaQuery[];
        headingStyles?: ControlElement;
        bodyStyles?: ControlElement;
        onRenderEmptyTable?: emptyCallback;
        onCellClick?: cellClickCallback;
        onColumnSort?: sortCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-table']: TableElement;
            }
        }
    }
    export class Table extends Control {
        private wrapperElm;
        private tableElm;
        private tHeadElm;
        private tBodyElm;
        private pagingElm;
        onCellClick: cellClickCallback;
        onRenderEmptyTable: emptyCallback;
        onColumnSort: sortCallback;
        private _data;
        private _filteredData;
        private _tableID;
        private _columns;
        private _rows;
        private _pagination;
        private firstLoad;
        private _mediaQueries;
        private _expandable;
        private _sortConfig;
        private _heading;
        private _headingStyles;
        private _bodyStyles;
        private _bodyStyle;
        private _headingStyle;
        constructor(parent?: Control, options?: any);
        get data(): any;
        set data(value: any);
        get filteredData(): any;
        set filteredData(value: any);
        private get hasData();
        private get sortConfig();
        private sortFn;
        get columns(): TableColumnElement[];
        set columns(value: TableColumnElement[]);
        get rows(): TableRow[];
        get pagination(): Pagination;
        set pagination(value: string | Pagination);
        get expandable(): ITableExpandable;
        set expandable(value: ITableExpandable);
        private get hasExpandColumn();
        private get columnLength();
        get mediaQueries(): ITableMediaQuery[];
        set mediaQueries(value: ITableMediaQuery[]);
        get headingStyles(): ControlElement;
        set headingStyles(value: ControlElement);
        get bodyStyles(): ControlElement;
        set bodyStyles(value: ControlElement);
        private onPageChanged;
        private onSortChange;
        private renderHeader;
        updateLocale(i18n: I18n): void;
        _handleClick(event: MouseEvent): boolean;
        private expandRow;
        private renderRow;
        private renderBody;
        private createTable;
        filter(predicate: (dataItem: any) => boolean): void;
        protected init(): void;
        connectedCallback(): void;
        static create(options?: TableElement, parent?: Control): Promise<Table>;
    }
}
/// <amd-module name="@ijstech/table" />
declare module "@ijstech/table" {
    export { Table, TableElement } from "@ijstech/table/table.ts";
    export { TableColumn } from "@ijstech/table/tableColumn.ts";
    export { TableRow } from "@ijstech/table/tableRow.ts";
    export { TableCell } from "@ijstech/table/tableCell.ts";
}
/// <amd-module name="@ijstech/carousel/style/carousel.css.ts" />
declare module "@ijstech/carousel/style/carousel.css.ts" {
    import { ICarouselMediaQuery } from "@ijstech/carousel/carousel.ts";
    export const sliderStyle: string;
    export const getCarouselMediaQueriesStyleClass: (mediaQueries: ICarouselMediaQuery[]) => string;
}
/// <amd-module name="@ijstech/carousel/carousel.ts" />
declare module "@ijstech/carousel/carousel.ts" {
    import { Control, ControlElement, ContainerElement, IMediaQuery, IControlMediaQueryProps } from '@ijstech/base';
    type SwipeStartEventCallback = () => void;
    type SwipeEndEventCallback = (isSwiping: boolean) => void;
    type SlideChangeCallback = (index: number) => void;
    export interface ICarouselMediaQueryProps extends IControlMediaQueryProps {
        indicators?: boolean;
    }
    export type ICarouselMediaQuery = IMediaQuery<ICarouselMediaQueryProps>;
    export interface CarouselItemElement extends ContainerElement {
        name?: string;
    }
    type CarouselType = 'dot' | 'arrow';
    export interface CarouselSliderElement extends ControlElement {
        slidesToShow?: number;
        transitionSpeed?: number;
        autoplay?: boolean;
        autoplaySpeed?: number;
        items?: CarouselItemElement[];
        activeSlide?: number;
        type?: CarouselType;
        indicators?: boolean;
        swipe?: boolean;
        mediaQueries?: ICarouselMediaQuery[];
        onSwipeStart?: SwipeStartEventCallback;
        onSwipeEnd?: SwipeEndEventCallback;
        onSlideChange?: SlideChangeCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-carousel-slider']: CarouselSliderElement;
            }
        }
    }
    export class CarouselSlider extends Control {
        private _slidesToShow;
        private _transitionSpeed;
        private _type;
        private _autoplay;
        private _autoplaySpeed;
        private _activeSlide;
        private _items;
        private _slider;
        private timer;
        private sliderListElm;
        private dotPagination;
        private dotsElm;
        private wrapperSliderElm;
        private arrowPrev;
        private arrowNext;
        private pos1;
        private pos2;
        private threshold;
        private _swipe;
        private _indicators;
        private _mediaQueries;
        onSwipeStart: SwipeStartEventCallback;
        onSwipeEnd: SwipeEndEventCallback;
        onSlideChange: SlideChangeCallback;
        private isSwiping;
        private isHorizontalSwiping;
        constructor(parent?: Control, options?: any);
        get slidesToShow(): number;
        set slidesToShow(value: number);
        get transitionSpeed(): number;
        set transitionSpeed(value: number);
        get autoplay(): boolean;
        set autoplay(value: boolean);
        get autoplaySpeed(): number;
        set autoplaySpeed(value: number);
        get activeSlide(): number;
        set activeSlide(value: number);
        get items(): CarouselItemElement[];
        set items(nodes: CarouselItemElement[]);
        add(control: Control): Control;
        get type(): CarouselType;
        set type(value: CarouselType);
        get swipe(): boolean;
        set swipe(value: boolean);
        get mediaQueries(): ICarouselMediaQuery[];
        set mediaQueries(value: ICarouselMediaQuery[]);
        _handleMouseDown(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;
        _handleMouseMove(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;
        _handleMouseUp(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;
        get indicators(): boolean;
        set indicators(value: boolean);
        private get isArrow();
        private updateArrows;
        private updateSliderByArrows;
        private updateWrapperClass;
        private renderItems;
        private renderDotPagination;
        private renderArrows;
        private onDotClick;
        private setAutoplay;
        prev(): void;
        next(): void;
        refresh(): void;
        private dragStartHandler;
        private dragHandler;
        private dragEndHandler;
        protected init(): void;
        static create(options?: CarouselSliderElement, parent?: Control): Promise<CarouselSlider>;
    }
}
/// <amd-module name="@ijstech/carousel" />
declare module "@ijstech/carousel" {
    export { CarouselSlider } from "@ijstech/carousel/carousel.ts";
}
/// <amd-module name="@ijstech/video/style/video.css.ts" />
declare module "@ijstech/video/style/video.css.ts" { }
/// <amd-module name="@ijstech/video/video.ts" />
declare module "@ijstech/video/video.ts" {
    import { Container, ControlElement, Control, Border, IBorder } from '@ijstech/base';
    import "@ijstech/video/style/video.css.ts";
    export interface VideoElement extends ControlElement {
        url?: string;
        isStreaming?: boolean;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-video']: VideoElement;
            }
        }
    }
    export class Video extends Container {
        private videoElm;
        private sourceElm;
        private overlayElm;
        private player;
        private _url;
        private _isPlayed;
        get url(): string;
        set url(value: string);
        get border(): Border;
        set border(value: IBorder);
        set designMode(value: boolean);
        getPlayer(): any;
        private getVideoTypeFromExtension;
        protected init(): void;
        static create(options?: VideoElement, parent?: Control): Promise<Video>;
    }
}
/// <amd-module name="@ijstech/video" />
declare module "@ijstech/video" {
    export { Video, VideoElement } from "@ijstech/video/video.ts";
}
/// <amd-module name="@ijstech/schema-designer/uiSchema.ts" />
declare module "@ijstech/schema-designer/uiSchema.ts" {
    import { Container, ControlElement } from '@ijstech/base';
    import { ISchemaDesignerData } from "@ijstech/schema-designer/schemaDesigner.ts";
    type IUISchemaOptions = 'DEFAULT' | 'GENERATED' | 'REGISTERED' | 'INLINED';
    type IUISchemaRuleEffect = 'HIDE' | 'SHOW' | 'ENABLE' | 'DISABLE';
    type IUISchemaType = 'VerticalLayout' | 'HorizontalLayout' | 'Group' | 'Categorization' | 'Category' | 'Control';
    export interface ISchemaDesignerUI {
        type: IUISchemaType;
        scope?: string;
        label?: string;
        elements?: ISchemaDesignerUI[];
        options?: {
            format?: string;
            readonly?: boolean;
        } | {
            detail: IUISchemaOptions | {
                type: IUISchemaType;
                elements: ISchemaDesignerUI;
            };
        };
        rule?: IUISchemaRule;
    }
    interface IRules {
        not?: IRules;
        const?: string | number | boolean;
        minimum?: number;
        exclusiveMaximum?: number;
        enum?: string[] | number[];
    }
    interface IUISchemaRule {
        effect: IUISchemaRuleEffect;
        condition: {
            scope: string;
            schema: IRules;
        };
    }
    export class SchemaDesignerUI extends Container {
        private txtUISchema;
        private pnlUISchemaBuilder;
        private uiSchema;
        schema: ISchemaDesignerData;
        constructor(parent?: Container, options?: ControlElement);
        protected init(): void;
        refresh(): void;
        getUISchema(): ISchemaDesignerUI;
        private updateJsonUISchema;
        private getUISchemaMap;
        private getScopeByFields;
        updateActionsItems(): Promise<void>;
        updateActionsRules(): Promise<void>;
        updateUISchemaItemsByRename(fields: string[], newFields: string[]): Promise<void>;
        updateUISchemaByType(fields: string[], isOption?: boolean): Promise<void>;
        deleteUISchema(fields: string[], onlyChild?: boolean): void;
        private createUISchema;
        private initUI;
    }
}
/// <amd-module name="@ijstech/schema-designer/style/schema-designer.css.ts" />
declare module "@ijstech/schema-designer/style/schema-designer.css.ts" { }
/// <amd-module name="@ijstech/schema-designer/schemaDesigner.ts" />
declare module "@ijstech/schema-designer/schemaDesigner.ts" {
    import { Container, ControlElement } from '@ijstech/base';
    import { ISchemaDesignerUI } from "@ijstech/schema-designer/uiSchema.ts";
    export { ISchemaDesignerUI };
    import "@ijstech/schema-designer/style/schema-designer.css.ts";
    type IDataType = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array';
    export interface ISchemaDesignerData {
        type: IDataType;
        properties: {
            [key: string]: {
                type: IDataType;
                title?: string;
                description?: string;
                pattern?: number | string;
                format?: string;
                const?: string | number | boolean;
                default?: string | number | boolean;
                multipleOf?: number;
                minimum?: number;
                maximum?: number;
                exclusiveMinimum?: number;
                exclusiveMaximum?: number;
                minLength?: number;
                maxLength?: number;
                minItems?: number;
                maxItems?: number;
                uniqueItems?: boolean;
                deprecated?: boolean;
                readOnly?: boolean;
                writeOnly?: boolean;
                additionalProperties?: boolean;
                enum?: string[] | number[];
                oneOf?: {
                    title?: string;
                    const: number | string;
                }[];
                items?: ISchemaDesignerData | false;
                prefixItems?: {
                    type?: string | number;
                    enum?: string | number;
                }[];
                required?: string[];
            };
        };
        required?: string[];
    }
    export interface SchemaDesignerElement extends ControlElement {
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-schema-designer']: SchemaDesignerElement;
            }
        }
    }
    export class SchemaDesigner extends Container {
        private txtSchema;
        private pnlSchemaBuilder;
        private schema;
        private pnlUISchema;
        private uiSchemaPanel;
        static create(options?: SchemaDesignerElement, parent?: Container): Promise<SchemaDesigner>;
        constructor(parent?: Container, options?: SchemaDesignerElement);
        refresh(): void;
        protected init(): void;
        getJsonData(): {};
        getJsonUI(): {};
        private getJSON;
        private updateJsonData;
        private convertFieldNameToLabel;
        private generateFieldName;
        private createDataSchema;
        private renderEnum;
        private renderOneOf;
        private renderPrefixItems;
        private updateControls;
        private getControlByPath;
        private renderSchema;
        private addSchemaByType;
        private renderObjectSchema;
        private renderStringSchema;
        private renderNumberSchema;
        private renderBooleanSchema;
        private renderArraySchema;
        private initUI;
    }
}
/// <amd-module name="@ijstech/schema-designer" />
declare module "@ijstech/schema-designer" {
    export { SchemaDesigner, SchemaDesignerElement, ISchemaDesignerData, ISchemaDesignerUI } from "@ijstech/schema-designer/schemaDesigner.ts";
}
/// <amd-module name="@ijstech/navigator/style/navigator.css.ts" />
declare module "@ijstech/navigator/style/navigator.css.ts" { }
/// <amd-module name="@ijstech/navigator/navigator.ts" />
declare module "@ijstech/navigator/navigator.ts" {
    import { Container, Control, ControlElement } from "@ijstech/base";
    import "@ijstech/navigator/style/navigator.css.ts";
    interface INavOption {
        searchPlaceholder?: string;
    }
    interface INavItem {
        id: number | string;
        caption: string;
        navItems: INavItem[];
        data: any;
    }
    export interface NavElement extends ControlElement {
        navItems?: INavItem[];
        options?: INavOption;
        onItemClick?: () => void;
    }
    export interface NavItemElement extends ControlElement {
        caption: string;
        navItems: INavItem[];
        data: any;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-nav"]: NavElement;
            }
        }
    }
    export class Nav extends Control {
        private _navItems;
        private _flatNavItems;
        private _parentNavItem;
        private _wrapper;
        private txtSearch;
        private _navWrapper;
        private _options;
        private _onItemClick;
        private _searching;
        private _activeNavItem;
        constructor(parent?: Control, options?: any);
        static create(options?: NavElement, parent?: Container): Promise<Nav>;
        protected init(): void;
        set navItems(navItems: INavItem[]);
        get navItems(): INavItem[];
        setRootActive(): void;
        setSelectedItemById(id: number | string): void;
        getSelectedItemById(id: number | string): INavItem;
        getActiveRoute(): INavItem[];
        clear(): void;
        private render;
        private renderNav;
        private setNavItemActive;
        private handleSearchOnChange;
        private flattenNavItem;
        private findSiblingsById;
        private findParentNavItem;
        private findParentPathByNavItem;
    }
    export class NavItem extends Control {
        private _navItems;
        private _wrapper;
        private _caption;
        private _back;
        constructor(parent?: Control, options?: any);
        static create(options?: NavItemElement, parent?: Container): Promise<NavItem>;
        protected init(): void;
        private render;
    }
}
/// <amd-module name="@ijstech/navigator" />
declare module "@ijstech/navigator" {
    export { Nav, NavItem } from "@ijstech/navigator/navigator.ts";
}
/// <amd-module name="@ijstech/breadcrumb/style/breadcrumb.css.ts" />
declare module "@ijstech/breadcrumb/style/breadcrumb.css.ts" { }
/// <amd-module name="@ijstech/breadcrumb/breadcrumb.ts" />
declare module "@ijstech/breadcrumb/breadcrumb.ts" {
    import { Container, Control, ControlElement } from "@ijstech/base";
    import "@ijstech/breadcrumb/style/breadcrumb.css.ts";
    export interface IBreadcrumbItem {
        caption: string;
        data?: any;
    }
    export interface BreadcrumbElement extends ControlElement {
        onItemClick: (breadcrumbItem?: IBreadcrumbItem) => void;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-breadcrumb"]: BreadcrumbElement;
            }
        }
    }
    export class Breadcrumb extends Control {
        private _wrapper;
        private _breadcrumbItems;
        private _onItemClick;
        constructor(parent?: Control, options?: any);
        static create(options?: BreadcrumbElement, parent?: Container): Promise<Breadcrumb>;
        protected init(): void;
        set breadcrumbItems(breadcrumbItems: IBreadcrumbItem[]);
        get breadcrumbItems(): IBreadcrumbItem[];
        private clear;
        private render;
    }
}
/// <amd-module name="@ijstech/breadcrumb" />
declare module "@ijstech/breadcrumb" {
    export { Breadcrumb, IBreadcrumbItem } from "@ijstech/breadcrumb/breadcrumb.ts";
}
/// <amd-module name="@ijstech/form/styles/index.css.ts" />
declare module "@ijstech/form/styles/index.css.ts" {
    export const formStyle: string;
    export const formGroupStyle: string;
    export const groupStyle: string;
    export const groupHeaderStyle: string;
    export const groupBodyStyle: string;
    export const collapseBtnStyle: string;
    export const inputStyle: string;
    export const datePickerStyle: string;
    export const comboBoxStyle: string;
    export const buttonStyle: string;
    export const iconButtonStyle: string;
    export const checkboxStyle: string;
    export const listHeaderStyle: string;
    export const listBtnAddStyle: string;
    export const listColumnHeaderStyle: string;
    export const listItemStyle: string;
    export const listVerticalLayoutStyle: string;
    export const listItemBtnDelete: string;
    export const tabsStyle: string;
    export const cardStyle: string;
    export const cardHeader: string;
    export const cardBody: string;
    export const uploadStyle: string;
    export const tokenInputStyle: string;
}
/// <amd-module name="@ijstech/form/types/jsonSchema4.ts" />
declare module "@ijstech/form/types/jsonSchema4.ts" {
    export type IJSONSchema4TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null' | 'any';
    type IJSONSchema4Type = string | number | boolean | IJSONSchema4Object | IJSONSchema4Array | null;
    interface IJSONSchema4Object {
        [key: string]: IJSONSchema4Type;
    }
    interface IJSONSchema4Array extends Array<IJSONSchema4Type> {
    }
    type IJSONSchema4Version = string;
    export interface IJSONSchema4 {
        id?: string | undefined;
        $ref?: string | undefined;
        $schema?: IJSONSchema4Version | undefined;
        title?: string | undefined;
        placeholder?: string | undefined;
        description?: string | undefined;
        tooltip?: string | undefined;
        default?: IJSONSchema4Type | undefined;
        multipleOf?: number | undefined;
        maximum?: number | undefined;
        exclusiveMaximum?: boolean | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: boolean | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        pattern?: string | undefined;
        additionalItems?: boolean | IJSONSchema4 | undefined;
        items?: IJSONSchema4 | IJSONSchema4[] | undefined;
        maxItems?: number | undefined;
        minItems?: number | undefined;
        uniqueItems?: boolean | undefined;
        maxProperties?: number | undefined;
        minProperties?: number | undefined;
        required?: boolean | string[] | undefined;
        additionalProperties?: boolean | IJSONSchema4 | undefined;
        definitions?: {
            [k: string]: IJSONSchema4;
        } | undefined;
        properties?: {
            [k: string]: IJSONSchema4;
        } | undefined;
        patternProperties?: {
            [k: string]: IJSONSchema4;
        } | undefined;
        dependencies?: {
            [k: string]: IJSONSchema4 | string[];
        } | undefined;
        enum?: IJSONSchema4Type[] | undefined;
        type?: IJSONSchema4TypeName | IJSONSchema4TypeName[] | undefined;
        allOf?: IJSONSchema4[] | undefined;
        anyOf?: IJSONSchema4[] | undefined;
        oneOf?: IJSONSchema4[] | undefined;
        not?: IJSONSchema4 | undefined;
        extends?: string | string[] | undefined;
        [k: string]: any;
        format?: string | undefined;
    }
}
/// <amd-module name="@ijstech/form/types/jsonSchema6.ts" />
declare module "@ijstech/form/types/jsonSchema6.ts" {
    export type IJSONSchema6TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null' | 'any';
    type IJSONSchema6Type = string | number | boolean | IJSONSchema6Object | IJSONSchema6Array | null;
    interface IJSONSchema6Object {
        [key: string]: IJSONSchema6Type;
    }
    interface IJSONSchema6Array extends Array<IJSONSchema6Type> {
    }
    type IJSONSchema6Version = string;
    type IJSONSchema6Definition = IJSONSchema6 | boolean;
    export interface IJSONSchema6 {
        $id?: string | undefined;
        $ref?: string | undefined;
        $schema?: IJSONSchema6Version | undefined;
        multipleOf?: number | undefined;
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        pattern?: string | undefined;
        items?: IJSONSchema6Definition | IJSONSchema6Definition[] | undefined;
        additionalItems?: IJSONSchema6Definition | undefined;
        maxItems?: number | undefined;
        minItems?: number | undefined;
        uniqueItems?: boolean | undefined;
        contains?: IJSONSchema6Definition | undefined;
        maxProperties?: number | undefined;
        minProperties?: number | undefined;
        required?: string[] | undefined;
        properties?: {
            [k: string]: IJSONSchema6Definition;
        } | undefined;
        patternProperties?: {
            [k: string]: IJSONSchema6Definition;
        } | undefined;
        additionalProperties?: IJSONSchema6Definition | undefined;
        dependencies?: {
            [k: string]: IJSONSchema6Definition | string[];
        } | undefined;
        propertyNames?: IJSONSchema6Definition | undefined;
        enum?: IJSONSchema6Type[] | undefined;
        const?: IJSONSchema6Type | undefined;
        type?: IJSONSchema6TypeName | IJSONSchema6TypeName[] | undefined;
        allOf?: IJSONSchema6Definition[] | undefined;
        anyOf?: IJSONSchema6Definition[] | undefined;
        oneOf?: IJSONSchema6Definition[] | undefined;
        not?: IJSONSchema6Definition | undefined;
        definitions?: {
            [k: string]: IJSONSchema6Definition;
        } | undefined;
        title?: string | undefined;
        placeholder?: string | undefined;
        description?: string | undefined;
        tooltip?: string | undefined;
        default?: IJSONSchema6Type | undefined;
        examples?: IJSONSchema6Type[] | undefined;
        format?: string | undefined;
    }
}
/// <amd-module name="@ijstech/form/types/jsonSchema7.ts" />
declare module "@ijstech/form/types/jsonSchema7.ts" {
    export type IJSONSchema7TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null';
    type IJSONSchema7Type = string | number | boolean | IJSONSchema7Object | IJSONSchema7Array | null;
    interface IJSONSchema7Object {
        [key: string]: IJSONSchema7Type;
    }
    interface IJSONSchema7Array extends Array<IJSONSchema7Type> {
    }
    type IJSONSchema7Version = string;
    type IJSONSchema7Definition = IJSONSchema7 | boolean;
    export interface IJSONSchema7 {
        $id?: string | undefined;
        $ref?: string | undefined;
        $schema?: IJSONSchema7Version | undefined;
        $comment?: string | undefined;
        $defs?: {
            [key: string]: IJSONSchema7Definition;
        } | undefined;
        type?: IJSONSchema7TypeName | IJSONSchema7TypeName[] | undefined;
        enum?: IJSONSchema7Type[] | undefined;
        const?: IJSONSchema7Type | undefined;
        multipleOf?: number | undefined;
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        pattern?: string | undefined;
        items?: IJSONSchema7Definition | IJSONSchema7Definition[] | undefined;
        additionalItems?: IJSONSchema7Definition | undefined;
        maxItems?: number | undefined;
        minItems?: number | undefined;
        uniqueItems?: boolean | undefined;
        contains?: IJSONSchema7 | undefined;
        maxProperties?: number | undefined;
        minProperties?: number | undefined;
        required?: string[] | undefined;
        properties?: {
            [key: string]: IJSONSchema7Definition;
        } | undefined;
        patternProperties?: {
            [key: string]: IJSONSchema7Definition;
        } | undefined;
        additionalProperties?: IJSONSchema7Definition | undefined;
        dependencies?: {
            [key: string]: IJSONSchema7Definition | string[];
        } | undefined;
        propertyNames?: IJSONSchema7Definition | undefined;
        if?: IJSONSchema7Definition | undefined;
        then?: IJSONSchema7Definition | undefined;
        else?: IJSONSchema7Definition | undefined;
        allOf?: IJSONSchema7Definition[] | undefined;
        anyOf?: IJSONSchema7Definition[] | undefined;
        oneOf?: IJSONSchema7Definition[] | undefined;
        not?: IJSONSchema7Definition | undefined;
        format?: string | undefined;
        contentMediaType?: string | undefined;
        contentEncoding?: string | undefined;
        definitions?: {
            [key: string]: IJSONSchema7Definition;
        } | undefined;
        title?: string | undefined;
        placeholder?: string | undefined;
        description?: string | undefined;
        tooltip?: string | undefined;
        default?: IJSONSchema7Type | undefined;
        readOnly?: boolean | undefined;
        writeOnly?: boolean | undefined;
        examples?: IJSONSchema7Type | undefined;
    }
}
/// <amd-module name="@ijstech/form/types/index.ts" />
declare module "@ijstech/form/types/index.ts" {
    import { IJSONSchema4TypeName, IJSONSchema4 } from "@ijstech/form/types/jsonSchema4.ts";
    import { IJSONSchema6TypeName, IJSONSchema6 } from "@ijstech/form/types/jsonSchema6.ts";
    import { IJSONSchema7TypeName, IJSONSchema7 } from "@ijstech/form/types/jsonSchema7.ts";
    export type IUISchemaType = 'VerticalLayout' | 'HorizontalLayout' | 'Group' | 'Categorization' | 'Category' | 'Control';
    export type IUISchemaRulesEffect = 'HIDE' | 'SHOW' | 'DISABLE' | 'ENABLE';
    export interface IUISchemaRulesCondition {
        scope: string;
        schema: IDataSchema;
    }
    export interface IUISchemaOptions {
        detail?: 'DEFAULT' | 'GENERATED' | 'REGISTERED' | IUISchema;
        showSortButtons?: boolean;
        elementLabelProp?: string;
        format?: 'date' | 'time' | 'date-time' | 'radio';
        slider?: boolean;
        multi?: boolean;
        color?: boolean;
        restrict?: boolean;
        showUnfocusedDescription?: boolean;
        hideRequiredAsterisk?: boolean;
        toggle?: boolean;
        readonly?: boolean;
        autocomplete?: boolean;
        variant?: 'stepper';
    }
    export interface IUISchemaRules {
        effect?: IUISchemaRulesEffect;
        condition?: IUISchemaRulesCondition;
    }
    export interface ValidationError {
        property: string;
        scope: string;
        message: string;
    }
    export interface ValidationResult {
        valid: boolean;
        errors: ValidationError[];
    }
    export type IDataSchemaTypeName = IJSONSchema4TypeName | IJSONSchema6TypeName | IJSONSchema7TypeName;
    export type IDataSchema = IJSONSchema4 & IJSONSchema6 & IJSONSchema7;
    export interface IUISchema {
        type: IUISchemaType;
        elements?: IUISchema[];
        label?: string | boolean;
        scope?: string;
        rule?: IUISchemaRules;
        options?: IUISchemaOptions;
    }
    export interface IInputOptions {
        inputType: string;
        height?: number | string;
        width?: number | string;
        value?: number | string;
        rows?: number;
    }
}
/// <amd-module name="@ijstech/form/translations.json.ts" />
declare module "@ijstech/form/translations.json.ts" {
    const _default: {
        en: {
            "is_not_an_instance_of_the_class/constructor_name": string;
            "invalid_schema/property_definition_name": string;
            is_a_readonly_field_it_can_not_be_changed: string;
            is_missing_and_it_is_required: string;
            disallowed_value_was_matched: string;
            There_must_be_a_minimum_of_number_in_the_array: string;
            There_must_be_a_maximum_of_number_in_the_array: string;
            does_not_match_the_regex_pattern_name: string;
            may_only_be_length_characters_long: string;
            must_be_at_least_length_characters_long: string;
            must_have_a_minimum_value_of_number: string;
            must_have_a_maximum_value_of_number: string;
            does_not_have_a_value_in_the_enumeration_enumer: string;
            may_only_have_number_digits_of_decimal_places: string;
            is_not_a_valid_wallet_address: string;
            is_not_a_valid_cid: string;
            is_not_a_valid_version_0_cid: string;
            is_not_a_valid_version_1_cid: string;
            is_not_a_valid_uuid: string;
            is_not_a_valid_URL: string;
            this: string;
            confirm: string;
            clear: string;
            add: string;
        };
        "zh-hant": {
            "is_not_an_instance_of_the_class/constructor_name": string;
            "invalid_schema/property_definition_name": string;
            is_a_readonly_field_it_can_not_be_changed: string;
            is_missing_and_it_is_required: string;
            disallowed_value_was_matched: string;
            There_must_be_a_minimum_of_number_in_the_array: string;
            There_must_be_a_maximum_of_number_in_the_array: string;
            does_not_match_the_regex_pattern_name: string;
            may_only_be_length_characters_long: string;
            must_be_at_least_length_characters_long: string;
            must_have_a_minimum_value_of_number: string;
            must_have_a_maximum_value_of_number: string;
            does_not_have_a_value_in_the_enumeration_enumer: string;
            may_only_have_number_digits_of_decimal_places: string;
            is_not_a_valid_wallet_address: string;
            is_not_a_valid_cid: string;
            is_not_a_valid_version_0_cid: string;
            is_not_a_valid_version_1_cid: string;
            is_not_a_valid_uuid: string;
            is_not_a_valid_URL: string;
            this: string;
            confirm: string;
            clear: string;
            add: string;
        };
        vi: {
            "is_not_an_instance_of_the_class/constructor_name": string;
            "invalid_schema/property_definition_name": string;
            is_a_readonly_field_it_can_not_be_changed: string;
            is_missing_and_it_is_required: string;
            disallowed_value_was_matched: string;
            There_must_be_a_minimum_of_number_in_the_array: string;
            There_must_be_a_maximum_of_number_in_the_array: string;
            does_not_match_the_regex_pattern_name: string;
            may_only_be_length_characters_long: string;
            must_be_at_least_length_characters_long: string;
            must_have_a_minimum_value_of_number: string;
            must_have_a_maximum_value_of_number: string;
            does_not_have_a_value_in_the_enumeration_enumer: string;
            may_only_have_number_digits_of_decimal_places: string;
            is_not_a_valid_wallet_address: string;
            is_not_a_valid_cid: string;
            is_not_a_valid_version_0_cid: string;
            is_not_a_valid_version_1_cid: string;
            is_not_a_valid_uuid: string;
            is_not_a_valid_URL: string;
            this: string;
            confirm: string;
            clear: string;
            add: string;
        };
    };
    export default _default;
}
/// <amd-module name="@ijstech/form/form.ts" />
declare module "@ijstech/form/form.ts" {
    import { Control, ControlElement, notifyMouseEventCallback, I18n } from '@ijstech/base';
    import { IDataSchema, IUISchema, ValidationResult } from "@ijstech/form/types/index.ts";
    import "@ijstech/form/styles/index.css.ts";
    export { IDataSchema, IUISchema };
    export interface FormElement extends ControlElement {
        jsonSchema?: IDataSchema;
        uiSchema?: IUISchema;
        data?: any;
        options?: IFormOptions;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-form']: FormElement;
            }
        }
    }
    interface IButtonOptions {
        caption?: string;
        backgroundColor?: string;
        fontColor?: string;
        hide?: boolean;
        onClick?: notifyMouseEventCallback;
    }
    export interface IFormOptions {
        columnsPerRow?: number;
        confirmButtonOptions?: IButtonOptions;
        clearButtonOptions?: IButtonOptions;
        columnWidth?: string | number;
        dateTimeFormat: {
            date?: string;
            time?: string;
            dateTime?: string;
        };
        customControls?: {
            [key: string]: {
                render: (parent?: Control) => Control;
                getData: (control: Control) => any;
                setData: (control: Control, value: any, rowData?: any) => void;
            };
        };
        onChange?: (control: Control, value?: any) => void;
    }
    export class Form extends Control {
        private _jsonSchema;
        private _uiSchema;
        private _formOptions;
        private _formRules;
        private _formControls;
        private validationData;
        private validationResult;
        private isSubmitted;
        private i18nMessage;
        constructor(parent?: Control, options?: any);
        protected init(): void;
        set formOptions(options: any);
        get formOptions(): any;
        set jsonSchema(jsonSchema: IDataSchema);
        get jsonSchema(): IDataSchema;
        set uiSchema(uiSchema: IUISchema);
        get uiSchema(): IUISchema;
        clearFormData(): void;
        setFormData(data: any): void;
        private setCustomData;
        private setData;
        getFormData(isErrorShown?: boolean): Promise<any>;
        private getDataBySchema;
        private isNumber;
        private checkArrayErrors;
        private checkError;
        private findTabByElm;
        renderForm(): void;
        private renderFormByJSONSchema;
        private replacePhrase;
        private renderFormByUISchema;
        private setupRules;
        private setupControlRule;
        private validateRule;
        private validateAllRule;
        private getDataSchemaByScope;
        private renderGroup;
        private renderLabel;
        private renderInput;
        private renderNumberInput;
        private renderTextArea;
        private renderColorPicker;
        private renderUploader;
        private renderDatePicker;
        private renderComboBox;
        private renderRadioGroup;
        private renderCheckBox;
        private renderList;
        private renderCard;
        updateLocale(i18n: I18n): void;
        private getTranslatedMessage;
        private getTranslatedText;
        private validateOnValueChanged;
        private checkPropertyChange;
        private mustBeValid;
        validate(instance: any, schema: IDataSchema, options: any): ValidationResult;
        private convertFieldNameToLabel;
        private convertToKey;
        private setDataUpload;
    }
}
/// <amd-module name="@ijstech/form" />
declare module "@ijstech/form" {
    export { Form, FormElement, IDataSchema, IUISchema, IFormOptions } from "@ijstech/form/form.ts";
}
/// <amd-module name="@ijstech/repeater/style/repeater.css.ts" />
declare module "@ijstech/repeater/style/repeater.css.ts" { }
/// <amd-module name="@ijstech/repeater/repeater.ts" />
declare module "@ijstech/repeater/repeater.ts" {
    import { Control, ControlElement, Container } from '@ijstech/base';
    import { StackAlignItemsType, StackJustifyContentType } from '@ijstech/layout';
    import "@ijstech/repeater/style/repeater.css.ts";
    type onRenderCallback = (parent: Control, index: number) => void;
    type LayoutType = 'horizontal' | 'vertical';
    export interface RepeaterElement extends ControlElement {
        onRender?: onRenderCallback;
        data?: any[];
        count?: number;
        layout?: LayoutType;
        gap?: number | string;
        justifyContent?: StackJustifyContentType;
        alignItems?: StackAlignItemsType;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-repeater']: RepeaterElement;
            }
        }
    }
    export class Repeater extends Container {
        private _data;
        private _count;
        private _layout;
        private _gap;
        private _justifyContent;
        private _alignItems;
        private wrapper;
        private templateEl;
        onRender: onRenderCallback;
        constructor(parent?: Control, options?: any);
        get count(): number;
        set count(value: number);
        set data(value: any[]);
        get data(): any[];
        get layout(): LayoutType;
        set layout(value: LayoutType);
        get gap(): number | string;
        set gap(value: number | string);
        get justifyContent(): StackJustifyContentType;
        set justifyContent(value: StackJustifyContentType);
        get alignItems(): StackAlignItemsType;
        set alignItems(value: StackAlignItemsType);
        private foreachNode;
        private isEmpty;
        private cloneItems;
        add(item: Control): Control;
        update(): void;
        clear(): void;
        protected init(): void;
        static create(options?: RepeaterElement, parent?: Container): Promise<Repeater>;
    }
}
/// <amd-module name="@ijstech/repeater" />
declare module "@ijstech/repeater" {
    export { Repeater, RepeaterElement } from "@ijstech/repeater/repeater.ts";
}
/// <amd-module name="@ijstech/accordion/interface.ts" />
declare module "@ijstech/accordion/interface.ts" {
    import { ControlElement } from "@ijstech/base";
    export interface IAccordionItem extends ControlElement {
        name: string;
        defaultExpanded?: boolean;
        showRemove?: boolean;
    }
    export interface IAccordion {
        items: IAccordionItem[];
        isFlush?: boolean;
    }
}
/// <amd-module name="@ijstech/accordion/style/accordion.css.ts" />
declare module "@ijstech/accordion/style/accordion.css.ts" {
    export const customStyles: string;
    export const expandablePanelStyle: string;
}
/// <amd-module name="@ijstech/accordion/accordion-item.ts" />
declare module "@ijstech/accordion/accordion-item.ts" {
    import { Control, Container, IFont, I18n } from "@ijstech/base";
    import { IAccordionItem } from "@ijstech/accordion/interface.ts";
    type onSelectedFn = (target: AccordionItem) => void;
    export interface AccordionItemElement extends IAccordionItem {
        onSelected?: onSelectedFn;
        onRemoved?: onSelectedFn;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-accordion-item']: AccordionItemElement;
            }
        }
    }
    export class AccordionItem extends Container {
        private pnlAccordionItem;
        private lbTitle;
        private pnlContent;
        private iconExpand;
        private iconRemove;
        private _name;
        private _defaultExpanded;
        private _expanded;
        private _showRemove;
        onSelected: onSelectedFn;
        onRemoved: onSelectedFn;
        constructor(parent?: Container, options?: any);
        static create(options?: AccordionItemElement, parent?: Container): Promise<AccordionItem>;
        updateLocale(i18n: I18n): void;
        get name(): string;
        set name(value: string);
        get defaultExpanded(): boolean;
        set defaultExpanded(value: boolean);
        get expanded(): boolean;
        set expanded(value: boolean);
        get showRemove(): boolean;
        set showRemove(value: boolean);
        get contentControl(): Control;
        get font(): IFont;
        set font(value: IFont);
        private renderUI;
        private updatePanel;
        private onSelectClick;
        private onRemoveClick;
        add(item: Control): Control;
        protected init(): Promise<void>;
    }
}
/// <amd-module name="@ijstech/accordion/accordion.ts" />
declare module "@ijstech/accordion/accordion.ts" {
    import { Control, Container, ControlElement, I18n } from "@ijstech/base";
    import { AccordionItem, AccordionItemElement } from "@ijstech/accordion/accordion-item.ts";
    import { IAccordionItem } from "@ijstech/accordion/interface.ts";
    export { AccordionItem, AccordionItemElement };
    type onCustomItemRemovedCallback = (item: Control) => Promise<void>;
    export interface AccordionElement extends ControlElement {
        items?: IAccordionItem[];
        isFlush?: boolean;
        onCustomItemRemoved?: onCustomItemRemovedCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ["i-accordion"]: AccordionElement;
            }
        }
    }
    export interface IAccordionMessage {
    }
    export class Accordion extends Control {
        private wrapper;
        private _items;
        private _isFlush;
        private accordionItemMapper;
        onCustomItemRemoved: onCustomItemRemovedCallback;
        static create(options?: AccordionElement, parent?: Container): Promise<Accordion>;
        constructor(parent?: Container, options?: any);
        updateLocale(i18n: I18n): void;
        get isFlush(): boolean;
        set isFlush(value: boolean);
        get items(): IAccordionItem[];
        set items(value: IAccordionItem[]);
        private createAccordionItem;
        private onItemClick;
        private onRemoveClick;
        private removeItem;
        add(item: IAccordionItem): AccordionItem;
        delete(item: AccordionItem): void;
        updateItemName(id: string, name: string): void;
        clear(): void;
        private appendItem;
        protected init(): Promise<void>;
    }
}
/// <amd-module name="@ijstech/accordion" />
declare module "@ijstech/accordion" {
    export { Accordion, AccordionElement, AccordionItem } from "@ijstech/accordion/accordion.ts";
}
/// <amd-module name="@ijstech/components" />
declare module "@ijstech/components" {
    export * as Styles from '@ijstech/style';
    export { application, EventBus, IEventBus, IHasDependencies, IModuleOptions, IModuleRoute, IModuleMenuItem, FormatUtils, IFormatNumberOptions } from '@ijstech/application';
    export { IRenderUIOptions, renderUI, DataSchemaValidator } from '@ijstech/jsonUI';
    export { customModule, customElements, getCustomElements, Component, Control, ControlElement, Container, Observe, Unobserve, ClearObservers, isObservable, observable, LibPath, RequireJS, ISpace, IBorder, IFont, I18n, IdUtils } from '@ijstech/base';
    export { Locales } from '@ijstech/types';
    export { Alert } from '@ijstech/alert';
    export { Button } from '@ijstech/button';
    export { ComboBox, IComboItem } from '@ijstech/combo-box';
    export { DataGrid, DataGridCell } from '@ijstech/data-grid';
    export { Input } from '@ijstech/input';
    export { Icon, IconName } from '@ijstech/icon';
    export { Image } from '@ijstech/image';
    export { Markdown, markdownToPlainText } from '@ijstech/markdown';
    export { MarkdownEditor } from '@ijstech/markdown-editor';
    export { Menu, ContextMenu, IMenuItem, MenuItem } from '@ijstech/menu';
    export { Module } from '@ijstech/module';
    export { Label } from '@ijstech/label';
    export { Tooltip } from '@ijstech/tooltip';
    export { TreeView, TreeNode } from '@ijstech/tree-view';
    export { Switch } from '@ijstech/switch';
    export { Modal } from '@ijstech/modal';
    export { Popover } from '@ijstech/popover';
    export { Checkbox } from '@ijstech/checkbox';
    export { Datepicker } from '@ijstech/datepicker';
    export { Upload } from '@ijstech/upload';
    export { Tabs, Tab } from '@ijstech/tab';
    export { Iframe } from '@ijstech/iframe';
    export { Range } from '@ijstech/range';
    export { Radio, RadioGroup } from '@ijstech/radio';
    export { Panel, VStack, HStack, CardLayout, GridLayout, StackLayout } from '@ijstech/layout';
    export { Pagination } from '@ijstech/pagination';
    export { Progress } from '@ijstech/progress';
    export { Link } from '@ijstech/link';
    export { Table, TableColumn, TableCell } from '@ijstech/table';
    export { CarouselSlider } from '@ijstech/carousel';
    export * as IPFS from '@ijstech/ipfs';
    export { moment } from '@ijstech/moment';
    export { Video } from '@ijstech/video';
    export { SchemaDesigner } from '@ijstech/schema-designer';
    export { Nav } from '@ijstech/navigator';
    export { Breadcrumb, IBreadcrumbItem } from '@ijstech/breadcrumb';
    export { Form, IDataSchema, IUISchema, IFormOptions } from '@ijstech/form';
    export { ColorPicker } from '@ijstech/color';
    export { Repeater } from '@ijstech/repeater';
    export { Accordion, AccordionItem } from '@ijstech/accordion';
}
